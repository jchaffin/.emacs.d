(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(LaTeX-fill-break-at-separators nil)
 '(LaTeX-item-indent nil)
 '(TeX-auto-save t)
 '(TeX-error-overview-open-after-TeX-run t)
 '(TeX-interactive-mode nil t)
 '(TeX-parse-self t)
 '(TeX-syntactic-comment t t)
 '(auctex-latexmk-inherit-TeX-PDF-mode t)
 '(aw-background nil t)
 '(aw-keys '(97 115 100 102 103 104 106 107 108) t)
 '(browse-url-chromium-program "/Applications/Chromium.app/Contents/MacOS/Chromium")
 '(cdlatex-insert-auto-labels-in-env-templates t)
 '(cfw:display-calendar-holidays nil)
 '(cfw:fchar-horizontal-line 9552)
 '(cfw:fchar-junction 9580)
 '(cfw:fchar-left-junction 9568)
 '(cfw:fchar-right-junction 9571)
 '(cfw:fchar-top-junction 9574)
 '(cfw:fchar-top-left-corner 9556)
 '(cfw:fchar-top-right-corner 9559)
 '(cfw:fchar-vertical-line 9553)
 '(cfw:org-capture-template
   '("c" "calfw2org" entry
     (file "agenda/schedule.org")
     "*  %?
 %(cfw:org-capture-day)"))
 '(cfw:render-line-breaker 'cfw:render-line-breaker-wordwrap t)
 '(cider-repl-history-file "~/.emacs.d/cider-history" t)
 '(cider-repl-history-size 3000 t)
 '(cider-repl-result-prefix ";; => " t)
 '(cider-repl-use-clojure-font-lock t t)
 '(cider-repl-wrap-history t t)
 '(cider-show-error-buffer nil t)
 '(clojure-indent-style :always-indent t)
 '(company-box-enable-icon nil)
 '(company-lsp-async t)
 '(company-lsp-cache-candidates nil)
 '(company-transformers nil)
 '(counsel-gtags-auto-update t t)
 '(counsel-gtags-ignore-case t t)
 '(cquery-executable "/usr/local/bin/cquery" t)
 '(cquery-extra-init-params
   '(:index
     (:comments 2)
     :cacheFormat "msgpack" :completion
     (:detailedLabel t)) t)
 '(css-indent-offset nil t)
 '(default-input-method "latin-1-prefix")
 '(diary-file "/Users/jacobchaffin/Dropbox/org/diary.org")
 '(dired-sidebar-should-follow-file nil t)
 '(dired-sidebar-theme 'none t)
 '(ediff-diff-options "-w" t)
 '(enable-recursive-minibuffers t)
 '(eshell-modify-global-environment t)
 '(eshell-prompt-regexp "λ " t)
 '(fci-rule-color "#202020")
 '(flycheck-disabled-checkers '(emacs-lisp-checkdoc) t)
 '(flycheck-emacs-lisp-load-path 'inherit t)
 '(flycheck-global-modes nil t)
 '(ggtags-highlight-tag nil t)
 '(global-auto-revert-mode t)
 '(global-display-line-numbers-mode t)
 '(ivy-initial-inputs-alist nil t)
 '(ivy-re-builders-alist '((t . ivy-prescient-re-builder)) t)
 '(ivy-sort-max-size 50000)
 '(ivy-todo-file "/Users/jacobchaffin/Dropbox/org/agenda/ivy-todo.org" t)
 '(ivy-use-selectable-prompt nil)
 '(ivy-use-virtual-buffers t)
 '(js-indent-level 2 t)
 '(latex/no-fill-environments
   '("equation" "equation*" "align" "align*" "forest" "forest*" "tabular" "tikzpicture") t)
 '(livedown-open nil t)
 '(lsp-clangd-executable "/usr/local/opt/llvm/bin/clangd" t)
 '(lsp-inhibit-message t)
 '(lsp-message-project-root-warning t t)
 '(lsp-project-blacklist '("^/ssh:" "node_modules"))
 '(lsp-ui-doc-header t t)
 '(lsp-ui-doc-include-signature nil t)
 '(lsp-ui-doc-max-width 100 t)
 '(lsp-ui-sideline-show-symbol nil t)
 '(magic-latex-enable-block-align nil t)
 '(magic-latex-enable-block-highlight t t)
 '(magic-latex-enable-inline-image nil t)
 '(magic-latex-enable-pretty-symbols t t)
 '(magic-latex-enable-suscript nil t)
 '(meghanada-javac-xlint "-Xlint:all,-processing" t)
 '(meghanada-server-remote-debug t t)
 '(merlin-command 'opam t)
 '(merlin-error-after-save nil t)
 '(monky-process-type 'cmdserver t)
 '(neo-smart-open t)
 '(neo-theme 'icons)
 '(no-littering-etc-directory "/Users/jacobchaffin/.emacs.d/etc" t)
 '(nrepl-hide-special-buffers t t)
 '(org-agenda-files
   '("~/Dropbox/org/TODOS.org" "/Users/jacobchaffin/Dropbox/courses/ling165b/TODOs.org" "/Users/jacobchaffin/Dropbox/courses/ling103/TODOs.org" "/Users/jacobchaffin/Dropbox/courses/cs131/TODOs.org"))
 '(org-agenda-skip-deadline-if-done t)
 '(org-agenda-skip-deadline-prewarning-if-scheduled t)
 '(org-agenda-time-leading-zero t)
 '(org-attach-auto-tag "attach" t)
 '(org-babel-uppercase-example-markers t)
 '(org-bullets-bullet-list '("‣" "•") nil nil "Customized with use-package org-bullets")
 '(org-catch-invisible-edits nil)
 '(org-confirm-babel-evaluate nil)
 '(org-edit-src-persistent-message nil)
 '(org-ellipsis "   ")
 '(org-gcal-file-alist
   '(("jchaffin@g.ucla.edu" . "~/Dropbox/org/agenda/schedule.org")))
 '(org-hide-emphasis-markers t)
 '(org-journal-enable-agenda-integration t)
 '(org-pandoc-options '((standalone . t)))
 '(org-pretty-entities t)
 '(org-pretty-entities-include-sub-superscripts nil)
 '(org-projectile-capture-template "** TODO %?
  :PROPERTIES:
  :CREATED: %U
  :END:" t)
 '(org-projectile-per-project-filepath "TODOs.org" t)
 '(org-ref-bibliography-notes "/Users/jacobchaffin/Dropbox/org/ref/refnotes.org")
 '(org-ref-bibtex-hydra-key-binding "j")
 '(org-ref-completion-library 'org-ref-ivy-cite)
 '(org-ref-default-bibliography '("/Users/jacobchaffin/Dropbox/org/ref/references.bib"))
 '(org-ref-pdf-directory "/Users/jacobchaffin/Dropbox/org/papers/pdfs/")
 '(org-ref-show-broken-links t)
 '(org-ref-show-citation-on-enter t)
 '(org-refile-targets '((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9)))
 '(org-src-fontify-natively t)
 '(org-src-preserve-indentation t)
 '(org-src-tab-acts-natively t)
 '(org-src-window-setup 'other-window)
 '(org-startup-indented t)
 '(org-tags-column 0)
 '(pdf-annot-activate-created-annotations t t)
 '(pdf-view-display-size 'fit-page)
 '(pdf-view-resize-factor 1.1)
 '(pretty-outlines-bullets-bullet-list '("" "" "" "") t)
 '(pretty-outlines-ellipsis "   " t)
 '(projectile-completion-system 'ivy)
 '(projectile-enable-caching t)
 '(projectile-find-dir-includes-top-level t)
 '(projectile-indexing-method 'turbo-alien)
 '(projectile-switch-project-action 'projectile-dired)
 '(safe-local-variable-values
   '((projectile-project-name . "cs131-gramars")
     (projectile-project-type quote dune)
     (projectile-project-name . "hello-world-dune")
     (org-highlight-latex-and-related quote
                                      (latex))
     (org-ref-pdf-directory . "/Users/jacobchaffin/Dropbox/courses/ling103/pdfs")
     (org-ref-pdf-directory . "/Users/jacobchaffin/Dropbox/courses/ling165b/materials/readings")
     (projectile-project-name . "Phonetics")
     (projectile-project-name . "Programming Languages")
     (remote-path . "~/courses/cs131")
     (projectile-project-name . "Syntax II")
     (org-noter-default-notes-file-names "ling103.org")
     (port . "22")
     (remote-path "~/courses/cs131")
     (user . "classbin")
     (host . "lnxsrv07seas.ucla.edu")
     (org-ref-default-bibliography "~/Dropbox/Documents/Courses/ling120c/ling120c.bib")))
 '(scimax-dir "/Users/jacobchaffin/.emacs.d/etc/local/scimax/" t)
 '(scimax-snippet-dir "/Users/jacobchaffin/.emacs.d/etc/yasnippet/snippets/")
 '(skeletor-completing-read-function 'ivy-completing-read)
 '(skeletor-project-directory "/Users/jacobchaffin/Developer/Projects/")
 '(skeletor-python-bin-search-path '("/usr/local/bin" "/usr/bin"))
 '(skeletor-user-directory "/Users/jacobchaffin/.emacs.d/etc/skeletons/")
 '(typescript-indent-level 2 t)
 '(wakatime-cli-path
   "/Users/jacobchaffin/.local/lib/python3.6/site-packages/wakatime/cli.py")
 '(wakatime-python-bin "/Users/jacobchaffin/.pyenv/shims/python")
 '(which-key-replacement-alist
   '((("\\`M-m m o\\'")
      nil . "")
     (("\\`M-m m t\\'")
      nil . "")
     (("\\`M-m m o\\'")
      nil . "")
     (("\\`M-m m t\\'")
      nil . "")
     (("\\`M-m m o\\'")
      nil . "")
     (("\\`M-m m o\\'")
      nil . "")
     (("\\`M-m m t\\'")
      nil . "")
     (("\\`M-m m o\\'")
      nil . "")
     (("\\`M-m m t\\'")
      nil . "")
     ((nil . "projectile-\\(.+\\)")
      nil . "\\1")
     (("\\`C-c p\\'")
      nil . "")
     ((nil . "magit-\\(.+\\)")
      nil . " \\1")
     (("\\`C-c v\\'")
      nil . "")
     (("\\`M-m w b\\'")
      nil . "Configure")
     (("\\`M-m w B\\'")
      nil . "Default Browser")
     (("\\`M-m w e G s\\'")
      nil . "Google Scholar")
     (("\\`M-m w e G m\\'")
      nil . "Google Maps")
     (("\\`M-m w e G b\\'")
      nil . "Google Bookmarks")
     (("\\`M-m w e G i\\'")
      nil . "Google Images")
     (("\\`M-m w e G\\'")
      nil . "Google+")
     (("\\`M-m w e\\'")
      nil . "Search Engine")
     (("\\`M-m w\\'")
      nil . "Web Browser")
     (("\\`M-m m i\\'")
      nil . "iTunes")
     (("\\`M-m h\\'")
      nil . "helpful")
     (("\\`M-m o\\'")
      nil . "Org Mode")
     (("\\`M-m o\\'")
      nil . "Org Mode")
     (("\\`M-m m o\\'")
      nil . "Open")
     (("\\`M-m m t\\'")
      nil . "iTerm")
     (("\\`M-m m\\'")
      nil . "")
     (("\\`M-m r\\'")
      nil . "Reload/Eval")
     (("\\`M-m r\\'")
      nil . "Reload/Eval")
     ((nil . "Prefix Command")
      nil . "prefix")
     ((nil . "\\`\\?\\?\\'")
      nil . "lambda")
     ((nil . "which-key-show-next-page-no-cycle")
      nil . "wk next pg")
     (("<left>")
      "←")
     (("<right>")
      "→")
     (("<\\([[:alnum:]-]+\\)>")
      "\\1"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cfw:face-annotation ((t :foreground "RosyBrown" :inherit cfw:face-day-title)))
 '(cfw:face-day-title ((t :background "grey10")))
 '(cfw:face-default-content ((t :foreground "#bfebbf")))
 '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
 '(cfw:face-disable ((t :foreground "DarkGray" :inherit cfw:face-day-title)))
 '(cfw:face-grid ((t :foreground "DarkGrey")))
 '(cfw:face-header ((t (:foreground "#d0bf8f" :weight bold))))
 '(cfw:face-holiday ((t :background "grey10" :foreground "#8c5353" :weight bold)))
 '(cfw:face-periods ((t :foreground "cyan")))
 '(cfw:face-saturday ((t :foreground "#8cd0d3" :background "grey10" :weight bold)))
 '(cfw:face-select ((t :background "#2f2f2f")))
 '(cfw:face-sunday ((t :foreground "#cc9393" :background "grey10" :weight bold)))
 '(cfw:face-title ((t (:foreground "#f0dfaf" :weight bold :height 2.0 :inherit variable-pitch))))
 '(cfw:face-today ((t :background: "grey10" :weight bold)))
 '(cfw:face-today-title ((t :background "#7f9f7f" :weight bold)))
 '(cfw:face-toolbar ((t :foreground "Steelblue4" :background "Steelblue4")))
 '(cfw:face-toolbar-button-off ((t (:foreground "Gray10" :weight bold :inherit (cfw:face-toolbar)))))
 '(cfw:face-toolbar-button-on ((t :foreground "Gray50" :weight bold :inherit (cfw:face-toolbar))))
 '(eshell-prompt ((t (:foreground "gray83"))))
 '(lsp-face-highlight-write ((t nil)))
 '(org-outline-numbering-face ((t (:family "Sans" :weight book :inherit (default))))))


