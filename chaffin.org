#+TITLE: Jacob Chaffin's Literate Emacs Configuration
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{mathptmx}
#+LaTeX_HEADER: \usepackage[scaled=.90]{helvet}
#+LaTeX_HEADER: \usepackage{courier}

#+OPTIONS: H:5 num:t toc:nil \n:nil d:nil tasks:nil tags:nil tex:t num:nil

* Table Of Contents                                       :TOC_4_gh:noexport:
- [[#configuration][Configuration]]
  - [[#preface][Preface]]
    - [[#about][About]]
    - [[#influences][Influences]]
  - [[#package-management][Package Management]]
    - [[#straightel][straight.el]]
    - [[#use-package][Use Package]]
    - [[#default-packages][Default Packages]]
  - [[#user-information][User Information]]
  - [[#core][Core]]
    - [[#constants][Constants]]
    - [[#macros][Macros]]
      - [[#with-system][With system]]
      - [[#if-not][If not]]
      - [[#major-mode][Major Mode]]
    - [[#functions][Functions]]
      - [[#reload-initialization-file][Reload Initialization File]]
      - [[#eval-buffer-using-straightel-transaction-system][Eval Buffer using =straight.el= transaction system.]]
      - [[#add-multiple-hooks][Add multiple hooks]]
      - [[#join-strings-with-separator][Join Strings with Separator]]
      - [[#buffer-list-names][Buffer List Names]]
      - [[#count-windows][Count Windows]]
      - [[#copy-file-path][Copy File Path]]
      - [[#list-directory-contents-without-wildcards][List Directory Contents without wildcards]]
      - [[#resolve-path-relative-to-user-emacs-directory][Resolve Path Relative to user-emacs-directory]]
      - [[#explore-a-local-repository][Explore a local repository]]
  - [[#environment][Environment]]
    - [[#macos][macOS]]
      - [[#computer-name][Computer Name]]
      - [[#macos-keybindings][MacOS Keybindings]]
      - [[#reveal-in-macos-finder][Reveal in macOS Finder]]
      - [[#osx-dictionary][OSX Dictionary]]
      - [[#exec-path-from-shell][Exec Path From Shell]]
    - [[#other-operating-systems][Other Operating Systems]]
      - [[#windowspc][Windows/PC]]
      - [[#linux][Linux]]
    - [[#graphical-interface][Graphical Interface]]
    - [[#custom-file][Custom File]]
    - [[#backup-files][Backup Files]]
    - [[#load-secrets][Load Secrets]]
    - [[#use-emacs-terminfo][Use Emacs Terminfo]]
    - [[#keybindings][Keybindings]]
  - [[#org-mode][Org Mode]]
    - [[#org-prettify][Org Prettify]]
      - [[#improve-legibility][Improve Legibility]]
      - [[#image-size][Image Size]]
      - [[#org-bullets][Org Bullets]]
      - [[#org-beautify-theme][Org Beautify Theme]]
      - [[#toc-org][TOC Org]]
    - [[#org-utilities][Org Utilities]]
      - [[#org-pomodoro][Org Pomodoro]]
      - [[#org-ref][Org Ref]]
      - [[#org-id][Org ID]]
      - [[#spell-check][Spell Check]]
    - [[#org-pdf][Org PDF]]
      - [[#pdf-tools][PDF Tools]]
      - [[#org-pdf-view][Org PDF View]]
    - [[#org-export][Org Export]]
      - [[#latex-backend][LaTeX Backend]]
  - [[#better-defaults][(Better) Defaults]]
    - [[#better-utilities][Better Utilities]]
      - [[#better-dired][Better Dired]]
      - [[#undo-tree][Undo Tree]]
      - [[#projectile][Projectile]]
      - [[#restart-emacs][Restart Emacs]]
      - [[#popwin][Popwin]]
    - [[#better-help][Better Help]]
    - [[#better-display][Better Display]]
      - [[#page-break-lines][Page Break Lines]]
      - [[#splash-screen-replacement][Splash Screen Replacement.]]
      - [[#initial-startup-display][Initial Startup Display]]
      - [[#menu-bar-tool-bar-scroll-bar][Menu Bar, Tool Bar, Scroll Bar]]
      - [[#truncate-lines][Truncate Lines]]
    - [[#better-garbage-collection][Better Garbage Collection]]
    - [[#better-encryption][Better Encryption]]
      - [[#gnutls][GnuTLS]]
      - [[#use-gpg2][Use GPG2]]
      - [[#disable-external-pin-entry][Disable External Pin Entry]]
      - [[#internal-pinentry-problem-and-solution][Internal Pinentry Problem and Solution]]
    - [[#better-commands][Better Commands]]
      - [[#alias-yes-or-no][Alias Yes Or No]]
  - [[#editing][Editing]]
    - [[#indentation][Indentation]]
      - [[#highlight-indent-guides][~highlight-indent-guides~]]
    - [[#yasnippet][YASnippet]]
    - [[#flycheck][Flycheck]]
      - [[#flycheck-color-mode-line][Flycheck Color Mode Line]]
      - [[#flycheck-in-org-special-edit-buffers][Flycheck in Org Special Edit Buffers]]
    - [[#flyspell][Flyspell]]
    - [[#company][Company]]
      - [[#company-statistics][Company Statistics]]
      - [[#company-quick-help][Company Quick Help]]
      - [[#company-dict][Company Dict]]
  - [[#utilities][Utilities]]
    - [[#image][Image+]]
    - [[#ivy][Ivy]]
      - [[#ivy-config][Ivy Config]]
      - [[#ivy-hydra][Ivy Hydra]]
      - [[#ivy-historian][Ivy Historian]]
      - [[#counsel][Counsel]]
      - [[#swiper][Swiper]]
      - [[#swiper-avy][Swiper Avy]]
      - [[#counsel-projectile][Counsel-Projectile]]
      - [[#smex][Smex]]
      - [[#counsel-osx-app][Counsel OSX App]]
      - [[#counsel-dash][Counsel Dash]]
    - [[#deft][Deft]]
    - [[#wakatime][Wakatime]]
  - [[#user-interface][User Interface]]
    - [[#cursor][Cursor]]
      - [[#vertical-bar][Vertical Bar]]
      - [[#disable-blink][Disable Blink]]
      - [[#smart-cursor-color][Smart Cursor Color]]
    - [[#theme][Theme]]
      - [[#enable-custom-themes][Enable Custom Themes]]
      - [[#zenburn-theme][Zenburn Theme]]
      - [[#contrasting-theme-for-use-with-sunshineel][Contrasting theme for use with =sunshine.el=.]]
      - [[#load-themes][Load Themes]]
    - [[#modeline][Modeline]]
      - [[#display-time][Display Time]]
      - [[#spaceline][Spaceline]]
      - [[#mode-icons][Mode Icons]]
    - [[#all-the-icons][All The Icons]]
      - [[#ivy-all-the-icons][Ivy All the Icons]]
    - [[#terminal][Terminal]]
      - [[#multi-term][Multi-Term]]
    - [[#frame-font][Frame Font]]
    - [[#sunshine][Sunshine]]
    - [[#emojify][Emojify]]
  - [[#version-control][Version Control]]
    - [[#magit][Magit]]
      - [[#magithub][Magithub]]
    - [[#gistel][gist.el]]
    - [[#git-timemachine][git-timemachine]]
    - [[#git-messenger][git-messenger]]
    - [[#git-modes][git modes]]
    - [[#mercurial][Mercurial]]
      - [[#monky][monky]]
      - [[#ah][ah]]
  - [[#web-browsing][Web Browsing]]
    - [[#osx-browse][osx-browse]]
    - [[#google-search-query-at-point][google-search-query-at-point]]
    - [[#browse-url-dwim][browse-url-dwim]]
    - [[#google-this][google-this]]
    - [[#google-translate][google-translate]]
  - [[#email][Email]]
    - [[#mu][Mu]]
  - [[#programming-languages][Programming Languages]]
    - [[#lisp][Lisp]]
      - [[#parens][Parens]]
      - [[#hlsexp][Hlsexp]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#common-lisp][Common Lisp]]
      - [[#slime][Slime]]
    - [[#clojure][Clojure]]
      - [[#clojure-mode-repository][Clojure Mode (repository)]]
      - [[#clojurescript][ClojureScript]]
      - [[#clojure-mode-extra-font-locking][Clojure Mode Extra Font Locking]]
      - [[#cider-repository][Cider (repository)]]
      - [[#inf-clojure][inf-clojure]]
      - [[#linting-clojure][Linting Clojure]]
      - [[#typed-clojure][Typed Clojure]]
      - [[#flycheck-pos-tip][Flycheck-Pos-Tip]]
    - [[#java][Java]]
      - [[#eclim][Eclim]]
    - [[#latex][LaTeX]]
      - [[#tex-config][Tex Config]]
      - [[#bibtex][Bibtex]]
      - [[#latex-extra][LaTeX Extra]]
      - [[#latex-preview-pane][LaTeX Preview Pane]]
      - [[#company-auctex][Company AucTeX]]
      - [[#org-edit-latex][Org Edit Latex]]
      - [[#magic-latex-buffer][Magic Latex Buffer]]
      - [[#auctex-latexmk][Auctex Latexmk]]
      - [[#reftex][RefTeX]]
      - [[#texinfo][Texinfo]]
    - [[#javascript][Javascript]]
      - [[#javascript-preamble][JavaScript Preamble]]
      - [[#js2-mode][js2-mode]]
      - [[#rjsx-mode][rjsx-mode]]
      - [[#tern][Tern]]
      - [[#json][JSON]]
      - [[#react][React]]
      - [[#typescript][TypeScript]]
      - [[#coffee][Coffee]]
      - [[#add-node-modules-path-repository][Add Node Modules Path (repository)]]
      - [[#npm-mode][Npm Mode]]
      - [[#enable-syntax-checking-in-js-mode-and-related-mode-buffers][Enable syntax checking in ~js-mode~ and related mode buffers.]]
    - [[#web][Web]]
      - [[#web-mode][Web Mode]]
      - [[#emmet][Emmet]]
      - [[#html][HTML]]
      - [[#css][CSS]]
      - [[#syntax-checking-and-code-completion][Syntax Checking and Code Completion]]
    - [[#markdown][Markdown]]
      - [[#markdown-mode][Markdown Mode]]
      - [[#markdown-mode-1][markdown-mode+]]
      - [[#markdown-tocontents][markdown-tocontents]]
      - [[#markdownfmt][markdownfmt]]
    - [[#ruby][Ruby]]
      - [[#ruby-mode][ruby-mode]]
      - [[#rvm][rvm]]
    - [[#docker][Docker]]
  - [[#footnotes][Footnotes]]

* Configuration
** Preface
*** About

[[https://en.wikipedia.org/wiki/literate_programming][Literate Programming]] is a method of writing computer programs where
the composition, logic, and structure of the program are optimized for
human comprehension. Introduced by Donald Knuth in his 1983 eponymous
work, a literate program interoperates source code with macros,
commentary, and documentation written in natural language prose. The
source code is then extracted in a pre-compilation step known as
/tangling/.

Where as a program is traditionally presented in a tree structure, a
programmer implementing literate techniques arranges parts and forms
the relations of these parts in the order of human logic.

A literate program is then structured like an essay or other work of
literature, where ideas are connected in the form of a web rather than
the unidirectional order of interpretation that is characteristic of a
compiler.

*** Influences

- [[http://pages.sachachua.com/.emacs.d/sacha.html][Sacha Chua's Emacs Configuration]]
- [[http://aaronbedra.com/emacs.d/][Aaron Bedra's Emacs Configuration]]
- [[https://github.com/Wasamasa/dotemacs/blob/master/init.org][wasamasa/dotemacs]]
- [[http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/][Optimal Emacs Settings For Org Mode For Literal Programming]]

** Package Management
*** straight.el

Currently we have a tumultuous relationship.

*** Use Package

#+NAME: use-package-config
#+BEGIN_SRC emacs-lisp :tangle yes
(eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)
#+END_SRC

*** Default Packages

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'cl)
(require 'dash)
#+END_SRC

** User Information

These values are initialized with the ’name’ and ’email’
environment variables, respectively[fn:1].

Emacs uses these variables to fill the mail header when sending
emails in emacs, and various third-party packages rely on them
for correct behavior.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Jacob Chaffin"
      user-mail-address "jchaffin@ucla.edu")
#+END_SRC

Ensure that programs store emacs information in the cannonical
directory.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-emacs-directory "~/.emacs.d/")
#+END_SRC

** Core
*** Constants                                                      :ignore:

Variables used throughout this file[fn:2]:

#+NAME: define-constants
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none
<<defconst-is-macos>>
<<defconst-is-windows>>
<<defconst-is-linux>>
<<defconst-is-gui>>
#+END_SRC

*** Macros
**** With system

This is a simple utility macro that evaluates code depending on
operating system type.

Where as the top level ~system-type~ aliases are intended to simplify
conditionals of the /if-then/ form or /if-else-then/ form, the
~with-system~ macro is intended for use in structures with a single
conditional clause.

In emacs-lisp, this kind of statement can be expressed with the ~when~
macro[fn:3].

Credits to stack overflow user [[https://stackoverflow.com/users/403018/gerstmann][gerstmann]], who provided this solution
in the following stack overflow [[https://stackoverflow.com/a/26137517/6233622][ticket]].

#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro with-system (type &rest body)
  "If TYPE equals `system-type', evaluate BODY."
  (declare (indent defun))
  `(when (eq system-type ',type)
     ,@body))
#+END_SRC

**** If not

Clojure-like =if-not= macro in elisp.

#+NAME: if-not
#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro if-not (condition then-form &rest rest-forms)
  (declare (indent defun))
  `(progn
     (if (not ,condition)
	 ,then-form
       ,@rest-forms)))
#+END_SRC

**** Major Mode
***** =with-major-mode=

#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro with-major-mode (mode &rest body)
  (declare (indent defun))
  `(when (equal major-mode ',mode)
     ,@body))
#+END_SRC

***** =if-major-mode=

#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro if-major-mode (mode then-form &rest rest-forms)
  (declare (indent defun))
  `(progn
     (if (equal major-mode ',mode)
	 ,then-form
       ,@rest-forms)))
#+END_SRC

*** Functions
**** Reload Initialization File

#+NAME: chaffin-reload-init
#+BEGIN_SRC emacs-lisp :tangle yes
(defun chaffin-reload-init ()
  "Reload init.el"
  (interactive)
  (straight-transaction
    (straight-mark-transaction-as-init)
    (message "Reloading initialization file...")
    (load user-init-file nil 'nomessage)
    (message "Reloading initialization file...done.")))
#+END_SRC

**** Eval Buffer using =straight.el= transaction system.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun chaffin-eval-buffer ()
  "Evaluate current buffer using the `straight' 
   transaction system."
  (interactive)
  (message "Evaluating %s..." (buffer-name))
  (straight-transaction
    (if (null buffer-file-name)
	(eval-buffer)
      (when (string= buffer-file-name user-init-file)
	(straight-mark-transaction-as-init))
      (load-file buffer-file-name)))
  (message "Evaluating %s...done." (buffer-name)))
#+END_SRC

**** Add multiple hooks

See Stack Overflow ticket [[https://stackoverflow.com/a/7400476/6233622][#7398216]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun add-to-hooks (fun hooks)
    "Add function to hooks"
    (dolist (hook hooks)
      (add-hook hook fun)))
#+END_SRC

**** Join Strings with Separator

#+BEGIN_SRC emacs-lisp :tangle yes
(defun join (lst sep)
  (mapconcat 'identity lst sep))
#+END_SRC

**** Buffer List Names

#+BEGIN_SRC emacs-lisp :tangle yes
(defun buffer-list-names ()
  "Get list of buffer names"
  (let ((f (lambda (b) (buffer-name b)))
	(buffer-alist (buffer-list)))
    (mapcar f buffer-alist)))
#+END_SRC

**** Count Windows

#+NAME: window-count
#+BEGIN_SRC emacs-lisp :tangle yes
(defun window-count ()
  "Count number of windows in the current frame."
  (interactive)
  (length (window-list)))
#+END_SRC

#+NAME: window-count-unique
#+BEGIN_SRC emacs-lisp :tangle yes
(defun window-count-unique ()
  "Count number of unique windows in the current frame"
  (interactive)
  (length (cl-delete-duplicates (mapcar #'window-buffer (window-list)))))
#+END_SRC

**** Copy File Path

A useful utility function for copying the file path to the buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun copy-file-path (func)

  "Copies the file path and applies the result as an argument to
function FUNC. To copy the file path to the kill-ring, use the interactive
function `copy-file-path-as-kill'."

  (destructuring-bind (file dir)
      (if-major-mode dired-mode
	(list (substring-no-properties (thing-at-point 'symbol))
	      dired-directory)
	(mapcar (lambda (f)
		  (funcall f buffer-file-name))
		'(file-name-nondirectory file-name-directory )))
    (funcall func (expand-file-name file dir))))
#+END_SRC

***** Copy File Path as New Kill

#+BEGIN_SRC emacs-lisp :tangle yes
(defun copy-file-path-as-kill ()
  "Copies the file path of the current dired directory or file buffer to the kill-ring."
  (interactive)
  (let ((func (lambda (s) (progn
			    (kill-new s)
			    (message "%s" s)))))
    (copy-file-path func)))
#+END_SRC

***** Copy File Path As Region Kill
And just for the fun of it, a function that copies the current file path using a temporary
buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun copy-file-path-as-region-kill (s)
  (interactive)
  (copy-file-path (lambda (s)
		    (with-temp-buffer
		      (insert s)
		      (kill-region (point-min) (point-max))))))
#+END_SRC

**** List Directory Contents without wildcards

#+BEGIN_SRC emacs-lisp :tangle yes
;; (defun directory-files-no-wildcards (directory &optional full nosort)
;;   (let ((match "^\\([^\s]\\|[^.]\\|\\.[^.]\\|\\.\\..\\)"))
;;     (directory-files directory full match nosort)))

(defun directory-files-no-wildcards (directory &optional full nosort)
  (seq-filter (lambda (x)
		(not
		 (or (string-empty-p (string-trim x))
		     (or (string= "." x)
			 (string= ".." x)))))
	      (directory-files directory full nil nosort)))
#+END_SRC

**** Resolve Path Relative to user-emacs-directory

#+BEGIN_SRC emacs-lisp :tangle yes
(defun emacs-directory (path)
  (let* ((user-emacs-directory* (or user-emacs-directory "~/.emacs.d/")))
    (concat
     (file-name-as-directory user-emacs-directory*)
     path)))
#+END_SRC

**** Explore a local repository 

#+BEGIN_SRC emacs-lisp :tangle yes
(defun go-to-repo--ivy ()
  (let ((repo-dir "~/.emacs.d/straight/repos/"))

    (ivy-read
     "Go to Package Directory: "
     (directory-files repo-dir)
     :action (lambda (package)
	       (let ((default-directory (concat
					 (file-name-as-directory
					  repo-dir)
					 package)))
		 (dired default-directory))))))


(defun go-to-repo ()
  (interactive)
  (if (eq completing-read-function 'ivy-completing-read)
      (go-to-repo--ivy)
    (message "Currently this operating only supports the Ivy completion framework.")))
#+END_SRC

** Environment
*** macOS

I work on a macbook, so this block is where I'm loading all of my settings that rely on local
filepaths, macOS applications, and external programs.

#+NAME: defconst-is-macos
#+BEGIN_SRC emacs-lisp :tangle no
(defconst *is-mac* (eq system-type 'darwin))
#+END_SRC

#+NAME: macos-config
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports results :results output
  (when *is-mac*
     (progn
       <<macos-default-settings>>
       <<macos-finder-config>>
       <<macos-dictionary-config>>))
#+END_SRC

**** Computer Name

#+NAME: defvar-computer-name
#+BEGIN_SRC emacs-lisp :tangle yes
(defun chaffin/computer-name-cmd ()
  (let* ((has-scutil (executable-find "scutil"))
	 (scutil-cmd (lambda () (shell-command-to-string "scutil --get ComputerName"))))
    (if has-scutil
	(replace-regexp-in-string "\n" "" (funcall scutil-cmd))
      nil)))

(defvar computer-name (chaffin/computer-name-cmd))
(defconst *is-hal* (string= computer-name "hal"))
#+END_SRC

**** MacOS Keybindings
macOS specific settings[fn:4].

Maps the modifier keys based on personal preferences.
Also sets terminal coding system to "utf-8".

#+NAME: macos-default-settings
#+BEGIN_SRC emacs-lisp :tangle no
(setq mac-command-modifier 'super
      mac-option-modifier 'meta
      ns-control-modifier 'control
      ns-function-modifier 'hyper)

(set-terminal-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

**** Reveal in macOS Finder
#+NAME: macos-finder-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package reveal-in-osx-finder
  :straight t
  :bind ("C-c z" . reveal-in-osx-finder))
#+END_SRC

**** OSX Dictionary

Provides an interface to /Dictionary.app/ in Emacs.

#+NAME: macos-dictionary-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package osx-dictionary
  :straight t
  :bind (("C-c C-d" . osx-dictionary-search-word-at-point)
	 ("C-c i" . osx-dictionary-search-input)))
#+END_SRC

**** Exec Path From Shell

Emacs relies heavily on shell environment variables.

These variables may not be picked up when launching emacs
from a gui on a unix-like operating system.

The [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] package fixes this problem by copying
user environment variables from the shell.

The ~exec-path-from-shell~ package only works with posix-compliant
operating systems. This may or may not include Microsoft Windows[fn:5].

However, the ~exec-path-from-shell~ instructions recommends loading
the package on linux and macOS operating system. I don't use Windows
all that often anyways, so that's fine with me.

The ~:if~ key of ~use-package~ offers us a really concise way for
conditionally loading dependencies.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
  ;; only load `exec-path-from-shell' package on macos and linux.
  :if (memq window-system '(mac ns))
  :straight t
  :config
  (exec-path-from-shell-initialize)
  (setq exec-path-from-shell-check-startup-files nil))
#+END_SRC

*** Other Operating Systems

**** Windows/PC

#+NAME: defconst-is-windows
#+BEGIN_SRC emacs-lisp :tangle no
(defconst *is-windows* (eq system-type 'windows))
#+END_SRC

**** Linux

#+NAME: defconst-is-linux
#+BEGIN_SRC emacs-lisp :tangle no
(defconst *is-linux* (eq system-type 'linux))
#+END_SRC

*** Graphical Interface

There's some packages and commands I only want available when Emacs is
running in a graphical interface. Things like image-rendering, large
packages, and image rendering.

#+NAME: defconst-is-gui
#+BEGIN_SRC emacs-lisp :tangle no
(defconst *is-gui* (display-graphic-p))
#+END_SRC

*** Custom File

By default, Emacs customizations[fn:6] done through the =customize=
interface write to ~user-init-file~.

While I usually prefer configuring emacs programmatically, settings
that depend on resources outside of this repository, such as
org-agenda files, will impact portability and potentially break on
other machines.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq custom-file "~/.emacs.d/custom/custom.el")
(load custom-file)
#+END_SRC

*** Backup Files

This might come back to bite me one day but I never use them.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq make-backup-files nil)
#+END_SRC

*** Load Secrets

#+BEGIN_SRC emacs-lisp :tangle yes
(load-library (concat user-emacs-directory "secrets/secrets.el.gpg"))
#+END_SRC

*** Use Emacs Terminfo

Setting this variable to false forces Emacs to use internal terminfo,
rather than the system terminfo.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq system-uses-terminfo nil)
#+END_SRC

*** Keybindings
** Org Mode

#+NAME: org-mode-settings
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<org-prettify>>
<<org-utils>>
<<org-pdf>>
<<org-export>>
#+END_SRC

*** Org Prettify

These settings subjectively improve the overall viewable-ness of
org-mode buffers.

#+NAME: org-prettify
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-prettify-text>>
<<org-prettify-image>>
<<org-prettify-bullets>>
<<org-prettify-toc-org>>
#+END_SRC

**** Improve Legibility

#+NAME: org-prettify-text
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook #'org-mode-hook (lambda ()
                              (auto-fill-mode)
                              (visual-line-mode)))
#+END_SRC

**** Image Size

Make images compact.

#+NAME: org-prettify-image
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-image-actual-width 400)
#+END_SRC

**** Org Bullets

Use UTF-8 Bullets for Org-mode headings.

#+NAME: org-prettify-bullets
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-bullets
  :straight t
  :init
  (add-hook 'org-mode-hook
	    (lambda ()
	      (org-bullets-mode 1))))
#+END_SRC

**** Org Beautify Theme
:PROPERTIES:
:ID:       4612DA55-904D-44D4-9E3D-98E6D7AF72E2
:CUSTOM_ID: org-beautify-theme
:END:


#+NAME: org-prettify-ob-theme
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-beautify-theme
  :straight t
  :config
  (progn
    (setq org-beautify-theme-use-box-hack nil)
    (add-to-list 'custom-enabled-themes 'org-beautify)
    (load-theme 'org-beautify t)))
#+END_SRC


**** TOC Org

#+NAME: org-prettify-toc-org
#+BEGIN_SRC emacs-lisp :tangle no
(use-package toc-org
  :straight t
  :init
  (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

*** Org Utilities

#+NAME: org-utils
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-utils-agenda>>
<<org-utils-pomodoro>>
<<org-utils-ref>>
<<org-utils-id>>
#+END_SRC

**** Org Pomodoro

#+NAME: org-utils-pomodoro
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-pomodoro
  :straight t
  :bind (:map org-mode-map
	      ("C-c M-RET p" . org-pomodoro))
  :config
  (setq org-pomodoro-audio-player "afplay"
	org-pomodoro-tick-sound
	(expand-file-name "~/.emacs.d/resources/clock-ticking-2.wav")
	;; Start Settings
	org-pomodoro-start-sound-p t ;; enable starting sound
	org-pomodoro-start-sound-args "--volume 0.08"
	org-pomodoro-start-sound
	(expand-file-name "~/.emacs.d/resources/Victory.wav")
	;; Finished Settings
	org-pomodoro-finished-sound-args "--volume 0.2"
	org-pomodoro-finished-sound
	(expand-file-name "~/.emacs.d/resources/Waves.wav")
	;; Short Break Settings
	org-pomodoro-short-break-length 5
	org-pomodoro-short-break-sound-args "--volume 0.2"
	org-pomodoro-short-break-sound org-pomodoro-finished-sound
	;; Long Break Settings
	org-pomodoro-long-break-length 15
	org-pomodoro-long-break-sound-args "--volume 0.2"
	org-pomodoro-long-break-sound
	(expand-file-name "~/.emacs.d/resources/Complete.wav")))
#+END_SRC

**** Org Ref

:PROPERTIES:
:ID:       1038C1B0-F5E1-4246-A360-B29BFBA82AC2
:END:

#+NAME: org-utils-ref
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-utils-ref-settings>>
<<org-utils-ref-ivy>>
<<org-utils-ref-open-pdf-at-point>>
#+END_SRC


#+NAME: org-utils-ref-settings
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no
(use-package org-ref
  :if *is-mac*
  :straight t
  :config
  (progn
    (setq org-ref-bibliography-notes "~/Dropbox/org/papers/notes.org"
	  org-ref-default-bibliography '("~/Dropbox/org/papers/references.bib")
	  org-ref-pdf-directory "~/Dropbox/org/papers/pdfs/")
    (require 'org-ref-pdf)
    (require 'org-ref-latex)
    (require 'org-ref-reftex)
    (require 'org-ref-utils)
    (require 'org-ref-url-utils)
    (require 'org-ref-pubmed)
    (require 'org-ref-scopus)
    (require 'org-ref-scifinder)
    (require 'org-ref-citeproc)
    (require 'org-ref-sci-id)
    (require 'org-ref-isbn)
    (require 'org-ref-wos)
    (require 'org-ref-worldcat)
    (require 'x2bib)))
#+END_SRC

***** Org Ref Ivy

#+NAME: org-utils-ref-ivy
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-ref-completion-library 'org-ref-ivy-cite)
(require 'org-ref)
(require 'org-ref-ivy)
(require 'org-ref-ivy-cite)
#+END_SRC

***** Open Pdf at point

See [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org#using-doc-view-or-pdf-tools][Using Doc View or PDF Tools]] section of =org-ref= documentation.

#+NAME: org-utils-ref-open-pdf-at-point
#+BEGIN_SRC emacs-lisp :tangle no
(defun chaffin/org-ref-open-pdf-at-point ()
  "Open the pdf for bibtex key under point if it exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
         (pdf-file (funcall org-ref-get-pdf-filename-function key)))
    (if (file-exists-p pdf-file)
        (find-file pdf-file)
      (message "No PDF found for %s" key))))

(setq org-ref-open-pdf-function 'chaffin/org-ref-open-pdf-at-point)

#+END_SRC

**** Org ID

Functions shamelessly taken from Lee Hinman's [[https://writequit.org/articles/emacs-org-mode-generate-ids.html][blogpost]] on generating
custom org heading ids.

#+NAME: org-utils-id
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no :exports none
<<org-utils-id-custom>>
<<org-utils-id-add-ids-to-headlines>>
#+END_SRC

***** Custom ID

#+NAME:  org-utils-id-custom
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no :exports none
<<org-utils-id-custom-settings>>
<<org-utils-id-custom-get>>
#+END_SRC

#+NAME: org-utils-id-custom-settings
#+BEGIN_SRC emacs-lisp :tangle no
(require 'org-id)
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+END_SRC


****** Get Custom ID

From [[https://writequit.org/articles/emacs-org-mode-generate-ids.html][Emacs Org Mode Generate Ids]] blogpost:

#+NAME: org-utils-id-custom-get
#+BEGIN_SRC emacs-lisp :tangle no
(defun chaffin/org-custom-id-get (&optional pom create prefix)
  "Get the CUSTOM_ID property of the entry at point-or-marker POM.
   If POM is nil, refer to the entry at point. If the entry does
   not have an CUSTOM_ID, the function returns nil. However, when
   CREATE is non nil, create a CUSTOM_ID if none is present
   already. PREFIX will be passed through to `org-id-new'. In any
   case, the CUSTOM_ID of the entry is returned."
  (interactive)
  (org-with-point-at pom
    (let ((id (org-entry-get nil "CUSTOM_ID")))
      (cond
       ((and id (stringp id) (string-match "\\S-" id))
        id)
       (create
        (setq id (org-id-new (concat prefix "h")))
        (org-entry-put pom "CUSTOM_ID" id)
        (org-id-add-location id (buffer-file-name (buffer-base id))))))))
#+END_SRC


***** Add IDs to Headlines in file

#+NAME: org-utils-id-add-ids-to-headlines
#+BEGIN_SRC emacs-lisp :tangle no
(defun chaffin/org-add-ids-to-headlines-in-file ()
  "Add CUSTOM_ID properties to all headlines in the current
  file which do not already have one. Only adds ids if the `auto-id' option is set a non-nil value in the file.

  i.e `#+OPTIONS: auto-id:t`"

  (interactive)
  (save-excursion
    (widen)
    (goto-char (point-min))
    (when (re-search-forward
	   "^\\#+OPTIONS:.*auto-id:t"
	   (point-max)
	   t)
      (org-map-entries
       (lambda ()
	 (chaffin/org-custom-id-get (point) 'create))))))

(add-hook 'org-mode-hook
	  (lambda ()
	    (add-hook 'before-save-hook
		      (lambda ()
			(when (and (eq major-mode 'org-mode)
				   (eq buffer-read-only nil))
			  (chaffin/org-add-ids-to-headlines-in-file))))))
#+END_SRC

**** Spell Check

Add spell checking in org mode buffers using Flyspell.

#+NAME: org-utils-flyspell
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'org-mode-hook 'turn-on-flyspell)
#+END_SRC

*** Org PDF

#+NAME: org-pdf
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-pdf-pdftools>>
<<org-pdf-pdfview>>
<<org-pdf-org-file-apps>>
#+END_SRC

**** PDF Tools

[[https://github.com/politza/pdf-tools][PDF Tools]] adds several features and enhancements for interacting with
PDF documents in Emacs. It serves as a replacement for DocView mode.

Credits to Dr. Ben Maughan over at Pragmatic Emacs for this
[[http://pragmaticemacs.com/category/emacs/][blogpost]] demonstrating how to get the most out of this package.

#+NAME: org-pdf-pdftools
#+BEGIN_SRC emacs-lisp :tangle no
(use-package pdf-tools
  :straight t
  :defer t
  :config
  (pdf-tools-install))
#+END_SRC

**** Org PDF View

#+NAME: org-pdf-pdfview
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package org-pdfview
  :after pdf-tools
  :bind (:map pdf-view-mode-map
	    ("C-s" . isearch-forward)
	    ("h" . pdf-annot-add-highlight-markup-annotation)
	    ("t" . pdf-annot-add-text-annotation)
	    ("D" . pdf-annot-delete))
  :straight t
  :mode (("\\.pdf\\'" . pdf-view-mode))
  :config
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t)
  (setq pdf-view-resize-factor 1.1))
#+END_SRC

Now we can open pdf files with =org-pdfview=[fn:7]:

#+NAME: org-pdf-org-file-apps
#+BEGIN_SRC emacs-lisp :tangle no

(with-eval-after-load 'org-pdfview
  (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link)))))

#+END_SRC

*** Org Export

#+NAME: org-export
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-export-latex>>
<<org-export-gfm>>
<<org-export-youtube>>
<<org-export-ox-extra>>
#+END_SRC

**** LaTeX Backend

#+NAME: org-export-latex
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<tex-config>>

(require 'ox-latex)

<<org-export-latex-user-labels>>
<<org-export-latex-pdf-process>>
<<org-export-latex-per-file-class>>
#+END_SRC

***** Latexmk

[[https://ctan.org/pkg/latexmk?lang=en][Latexmk]] automates the proces of building LaTeX documents to pdf.

It can be done through the =org-mode= latex export dispatcher in a single command:

#+NAME: org-export-latex-pdf-process
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-latex-pdf-process
    '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -synctex=1 -pdf -bibtex -f %f"))
#+END_SRC

***** Prefer user provided labeling system

#+NAME: org-export-latex-user-labels
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-latex-prefer-user-labels t)
#+END_SRC

***** Org LaTeX Default Packages                                 :ignore:

#+NAME: org-export-latex-default-packages
#+BEGIN_SRC emacs-lisp :tangle no :exports none
<<org-export-latex-default-packages-natbib>>
#+END_SRC

****** Natbib

Add [[https://ctan.org/pkg/natbib?lang=en][natbib]] package, as it's the easiest way to get BibTeX support
through [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][org-ref]] and other tools for LaTeX in Emacs.

#+NAME: org-export-latex-default-packages-natbib
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
#+END_SRC

****** Minted

#+NAME: org-export-latex-default-packages-minted
#+BEGIN_SRC emacs-lisp :tangle no :exports none

#+END_SRC

***** Hyperref Template
The default cross-referencing and hyperlink styles provided by
=hyperref= are awful. This makes them less awful.

#+NAME: org-export-latex-hyperref
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-latex-hyperref-template "\\hypersetup{\n colorlinks=true,urlcolor=black,linkcolor=black \n}")
#+END_SRC


***** Custom Classes
****** Org Per File Class

Adds a class for exporting to pdf using latex backend without
importing the default =ox-latex= packages. This allows the export
settings of a particular file to be completely insulated from most external
configuration.

#+NAME: org-export-latex-per-file-class
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
	     '("per-file-class"
	       "\\documentclass{scrartcl}
	       [NO-DEFAULT-PACKAGES]
	       [EXTRA]"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC


** (Better) Defaults
*** Better Utilities
**** Better Dired
***** Reuse dired buffer when moving to parent directory

From [[https://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer][emacswiki.org]]

#+BEGIN_QUOTE
When moving to parent directory by `^´, Dired by default creates a new
buffer for each movement up. The following rebinds `^´ to use the same
buffer.
#+END_QUOTE


#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'dired-mode-hook
	  (lambda ()
	    (define-key dired-mode-map (kbd "^")
	      (lambda () (interactive) (find-alternate-file "..")))))
#+END_SRC

***** Use other dired buffer as default directory

When split frames with two dired buffers, default to the other buffer
as the current directory.

See docstring for =dired-dwim-target=.


#+BEGIN_SRC emacs-lisp :tangle yes
(setq dired-dwim-target t)
#+END_SRC

***** Dired+

Adds extensions and functionality to dired mode.

#+NAME: dired-plus-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dired+
  :straight t)
#+END_SRC

***** Dired Icons

#+NAME: all-the-icons-dired
#+BEGIN_SRC emacs-lisp :tangle no
(use-package all-the-icons-dired
  :straight t
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

**** Undo Tree

#+NAME: undo-tree-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package undo-tree
  :straight t
  :init
  (global-undo-tree-mode))
#+END_SRC

**** Projectile

#+NAME: projectile-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile
  :straight t
  :config
  (projectile-mode))
#+END_SRC

**** Restart Emacs

The [[https://github.com/iqbalansari/restart-emacs][restart-emacs]] package allows quickly rebooting Emacs
from within Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package restart-emacs
  :straight t
  :bind (("C-x C-r" . restart-emacs)))
#+END_SRC

**** Popwin


#+NAME: popwin
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package popwin
  :straight t
  :config (popwin-mode 1))
#+END_SRC

*** Better Help

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package help+
  :straight t)

(use-package help-macro+
  :straight t)

(use-package help-fns+
  :straight t)

(use-package help-mode+
  :straight t)
#+END_SRC

*** Better Display
**** Page Break Lines

Global minor-mode that turns ~^L~ form feed characters into
horizontal line rules.

#+NAME: page-break-lines-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package page-break-lines
  :straight t
  :init
  (global-page-break-lines-mode))
#+END_SRC

**** Splash Screen Replacement.

The default splash screen is great when you're starting out,
but it's more so an annoyance than anything else once you
know you're around.

***** Enable Emojis for org tags in dashboard agenda widget

#+NAME: enable-emojify
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none
<<emojify-mode-config>>
#+END_SRC

***** Emacs Dashboard

[[https://github.com/rakanalh/emacs-dashboard][Dashboard]] is a highly customizable splash screen
replacement library used in the popular [[https://github.com/syl20bnr/spacemacs][spacemacs]] framework.
It's a nice way of consolidating any combination of tasks,
agenda items, bookmarks, and pretty much any other enumerable
list that one may use in the wacky world of Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dashboard
  :straight t
  :init
  (with-eval-after-load 'page-break-lines
    (if (not (global-page-break-lines-mode))
	(global-page-break-lines-mode)))
  :config
  (dashboard-setup-startup-hook))

(with-eval-after-load 'dashboard
  (defun chaffin/dashboard-init ()
    (progn
      (add-to-list 'dashboard-items '(agenda) t)
      (setq dashboard-banner-logo-title "Welcome Back, MasterChaff"
	    dashboard-items '(( agenda . 10)
			      ( projects . 5)
			      ( recents . 5)
			      ( bookmarks . 5)))))
  (chaffin/dashboard-init))
      
#+END_SRC

**** Initial Startup Display

#+BEGIN_SRC emacs-lisp :tangle yes
(setq initial-scratch-message nil
      inhibit-startup-message t
      inhibit-startup-screen t)
#+END_SRC

***** Startup Message

Replace the startup-echo-area-message with the version info of the
current Emacs distribution. 

#+BEGIN_SRC emacs-lisp :tangle yes
(defalias #'startup-echo-area-message
  (lambda ()
    (replace-regexp-in-string "\n" "" (emacs-version))))
#+END_SRC

**** Menu Bar, Tool Bar, Scroll Bar

Disable scroll bars and tool bar on all system types.

On macOS, the menu bar is integrated into the UI.

Disabling it will just empty the menu tab options for Emacs.app,
so we'll leave it there.

#+BEGIN_SRC emacs-lisp :tangle yes
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (unless (eq system-type 'darwin)
  (menu-bar-mode -1))
#+END_SRC

**** Truncate Lines

Not sure this is doing anything...

#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default truncate-lines nil)
#+END_SRC

*** Better Garbage Collection

Consider the following from the documentation:

#+BEGIN_QUOTE
By binding this temporarily to a large number, you can effectively
prevent garbage collection during a part of the program.
#+END_QUOTE

When I first read how the default garbage collection interval in Emacs
is notoriously low, I added an arbitrary number of zeros to the
default value and called it a day. However, because I'm writing this
monolithic configuration and making a lot of mistakes in the process,
I've had to start Emacs with essentially its default settings pretty
frequently and I've noticed the lag time I occasionally experience
when searching long documents is essentially nonexistent in vanilla
Emacs. After reading this [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][blogpost]], it seems that jacking up the GC
interval may actually be the /cause/ of the lagtime rather than
contributing to the solution.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun chaffin/rev-up-gc ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun chaffin/rev-down-gc ()
  (setq gc-cons-threshold 800000))

(add-hook 'minibuffer-setup-hook #'chaffin/rev-up-gc)
(add-hook 'minibuffer-exit-hook 'chaffin/rev-down-gc)
#+END_SRC

*** Better Encryption
**** GnuTLS

- See [[https://github.com/wasamasa/dotemacs/blob/master/init.org#gnutls][wasamasa/dotfiles]]

#+BEGIN_SRC emacs-lisp :tangle yes
(setq gnutls-min-prime-bits 4096)
#+END_SRC

**** Use GPG2

Set GPG program to 'gpg2'.

#+BEGIN_SRC emacs-lisp :tangle yes
(when *is-mac*
(setq epg-gpg-program "gpg2"))
#+END_SRC

**** Disable External Pin Entry

Switching between Emacs and an external tools is annoying.

By default, decrypting gpg files in Emacs will result in the pin entry
window being launched from the terminal session.

By disabling the agent info, we can force Emacs to handle this
internally[fn:8].

#+BEGIN_SRC emacs-lisp :tangle yes
(setenv "GPG_AGENT_INFO" nil)
#+END_SRC

Or so I thought...

**** Internal Pinentry Problem and Solution

While I couldn't figure out how to get Emacs to handle gpg pinentry
internally, I was able to still find a satisfactory solution using the
~pinentry-mac~ tool.

Note that this solution requires macOS and using gpg2 for encryption.

See ticket [[https://github.com/Homebrew/homebrew-core/issues/14737][#1437]] from the [[https://github.com/Homebrew/homebrew-core][Homebrew/homebrew-core]] repository.

#+BEGIN_EXAMPLE sh
brew install pinentry-mac
echo "pinentry-program /usr/local/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
killall gpg-agent
#+END_EXAMPLE

*** Better Commands
**** Alias Yes Or No

#+NAME: yes-or-no-p
#+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Editing
*** Indentation

Tabs are the bane of humanity[fn:9]. [[http://www.urbandictionary.com/define.php?term=dont%20%40%20me][Don't @ me]].

#+BEGIN_SRC emacs-lisp :tangle yes
(setq tab-width 2
      indent-tabs-mode nil)
#+END_SRC

**** ~highlight-indent-guides~
[[https://github.com/darthfennec/highlight-indent-guides][
Highlight Indent Guides]] sublime-like indentation guides.

/Commented out because of bug that leaves a trail of solid white line marks on the indent guide overlay./

#+BEGIN_SRC emacs-lisp :tangle no
(use-package highlight-indent-guides
   :straight t
   :init
   (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
   :config
   (setq highlight-indent-guides-method 'character))
#+END_SRC

*** YASnippet

YASnippet is a template system based off the TextMate snippet syntax.

Let's begin by creating a variable for our personal snippets directory.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-snippets-dir (concat user-emacs-directory "snippets"))
#+END_SRC

After installation and enabling the package, add the personal snippets
directory to the list of directories where YASnippet should look for snippets.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :straight t
  :init
  (yas-global-mode 1)
  :config
  (push 'user-snippets-dir yas-snippet-dirs))
#+END_SRC

YASnippet can also be used as a non-global minor mode on a per-buffer
basis.

Invoking ~yas-reload-all~ will load the snippet tables, and then
calling ~yas-minor-mode~ from the major mode hooks will load the
snippets corresponding to the major mode of the current buffer mode.

#+BEGIN_EXAMPLE emacs-lisp
(yas-reload-all)
(add-hook 'prog-mode-hook #'yas-minor-mode)
#+END_EXAMPLE

*** Flycheck

#+NAME: flycheck
#+BEGIN_SRC :tangle yes :noweb yes :exports none
<<flycheck-settings>>
<<flycheck-color-mode-line-config>>
#+END_SRC

[[https://github.com/Flycheck/Flycheck][On the fly]] syntax highlighting.

#+NAME: flycheck-settings
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package flycheck
  :straight t
  :defer-install t
  :init
  (setq flycheck-global-modes nil)
  :config
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)
		flycheck-emacs-lisp-load-path 'inherit))
#+END_SRC

**** Flycheck Color Mode Line

     Colors the modeline according to current Flycheck state of buffer.

     #+NAME: flycheck-color-modeline-config
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package flycheck-color-mode-line
	 :straight t
	 :init
	 (add-hook 'flycheck-mode 'flycheck-color-mode-line-mode))
     #+END_SRC

**** Flycheck Package                                           :noexport:

[[https://github.com/purcell/flycheck-package][Flycheck Package]] requires ~package.el~ to be enabled, so it's incompatible with ~straight.el~.

#+NAME: flycheck-package-config
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package flycheck-package
    :straight t
    :init
    (eval-after-load 'flycheck
      '(flycheck-package-setup)))
#+END_SRC

**** Flycheck in Org Special Edit Buffers

#+NAME: flycheck-org-special-edit
#+BEGIN_SRC emacs-lisp :tangle no
  (defadvice org-edit-src-code (around set-buffer-file-name activate compile)
    (let ((file-name (buffer-file-name))) ;; (1)
      ad-do-it                            ;; (2)
      ;; (3)
      (setq buffer-file-name file-name)))
#+END_SRC

*** Flyspell

:PROPERTIES:
:ID:       9D04DEB5-0E76-4BCC-B840-85C9B7A262F4
:CUSTOM_ID: flyspell
:END:

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flyspell
  :straight t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(with-eval-after-load 'flyspell
  <<org-utils-flyspell>>)
#+END_SRC

*** Company

Emacs has two popular packages for code completion --
[[https://github.com/auto-complete/auto-complete][autocomplete]] and [[https://github.com/company-mode/company-mode][company]]. This reddit [[https://www.reddit.com/r/emacs/comments/2ekw22/autocompletemode_vs_companymode_which_is_better/][thread]] was enough for
me to go with company.

If you need more convincing, [[https://github.com/company-mode/company-mode/issues/68][company-mode/company-mode#68]]
offers a comprehensive discussion on the two.

The ticket is from the ‘company-mode‘ repository, so there's
probably some bias there, but company-mode hasn't provided
any reason for me reconsider my choice.

#+NAME: company-prefix-setup
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(use-package company
  :straight t
  :defer t
  :bind (("TAB" . company-indent-or-complete-common)
	 ("C-c /" . company-files)
	 ("M-SPC" . company-complete)
	 (:map company-mode-map
	       ("M-n" . company-select-next-or-abort)
	       ("M-p" . company-select-previous-or-abort)))
  :config
  (progn

    <<company-config>>

    <<company-quick-help>>

    <<company-statistics-config>>

    <<company-dict-config>>))
#+END_SRC


#+NAME: company-config
#+BEGIN_SRC emacs-lisp :tangle no
(global-company-mode)
(setq company-tooltip-limit 20
      company-tooltip-align-annotations t
      company-idle-delay .3
      company-begin-commands '(self-insert-command))
#+END_SRC

**** Company Statistics

[[https://github.com/company-mode/company-statistics][Company statistics]] uses a persisent store of completions to rank the
top candidates for completion.

#+NAME: company-statistics-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-statistics
  :straight t
  :config
  ;; Alternatively,
  ;; (company-statistics-mode)
  (add-hook 'after-init-hook 'company-statistics-mode))
#+END_SRC

**** Company Quick Help

[[https://github.com/expez/company-quickhelp][Company Quick Help]] emulates ~autocomplete~ documentation-on-idle behavior, but using the
less-buggy ~pos-tip~ package rather than ~popup-el~.

#+NAME: company-quick-help-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-quickhelp
  :defer t
  :commands (company-quickhelp-manual-begin)
  :bind
  (:map company-active-map
	("C-c h" . company-quickhelp-manual-begin))
  :config
  (company-quickhelp-mode 1))
#+END_SRC

**** Company Dict

#+NAME: company-dict-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-dict
  :straight t
  :init
  (add-to-list 'company-backends 'company-dict)
  :config
  (setq company-dict-enable-fuzzy t
	company-dict-enable-yasnippet t))
#+END_SRC

** Utilities
*** Image+

[[https://github.com/mhayashi1120/Emacs-imagex][Image+]]  provides extensions for image file manipulation in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package image+
  :straight t
  :if *is-gui*
  :after image
  :config
  (eval-after-load 'image+
    `(when (require 'hydra nil t)
       (defhydra imagex-sticky-binding (global-map "C-x C-l")
	 "Manipulating image"
	 ("+" imagex-sticky-zoom-in "zoom in")
	 ("-" imagex-sticky-zoom-out "zoom out")
	 ("M" imagex-sticky-maximize "maximize")
	 ("O" imagex-sticky-restore-original "restore orginal")
	 ("S" imagex-sticky-save-image "save file")
	 ("r" imagex-sticky-rotate-right "rotate right")
	 ("l" imagex-sticky-rotate-left "rotate left")))))
#+END_SRC

*** Ivy
**** Ivy Config
[[https://github.com/abo-abo/swiper][Ivy]] is a completion and selection framework in the same vein
as helm.
It doesn't have the same kind of ecosystem or interopability,
but its easy to configure, offers a minimalistic interface,
and is every bit as good of a completion tool as helm is,
if not better.

I prefer the default regex matcher, but if you want fuzzy matching as
a fallback or replacement checkout this article on [[https://oremacs.com/2016/01/06/ivy-flx/][better fuzzmatching
support with ivy]].

#+NAME: ivy
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package ivy
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
	ivy-initial-inputs-alist nil
	ivy-re-builders-alist
	'((t . ivy--regex-plus)))
  <<ivy-hydra>>
  <<ivy-historian>>)
#+END_SRC

**** Ivy Hydra

#+NAME: ivy-hydra
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ivy-hydra
  :after hydra)
#+END_SRC

**** Ivy Historian

#+NAME: ivy-historian
#+BEGIN_SRC emacs-lisp :tangle no :exports none :noweb yes
<<historian>>
<<ivy-historian-settings>>
#+END_SRC

#+NAME: historian
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(use-package historian
  :straight t)
#+END_SRC

#+NAME: ivy-historian-settings
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ivy-historian
  :after historian
  :straight t)
#+END_SRC

**** Counsel

#+NAME: counsel
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none
(use-package counsel
  :straight t
  :bind
  (("C-c C-r" . ivy-resume)
   ("C-`" . ivy-avy)
   ("M-x" . counsel-M-x)
   ("M-y" . counsel-yank-pop)
   ("C-x C-f" . counsel-find-file)
   ("<f1> f" . counsel-describe-function)
   ("<f1> v" . counsel-describe-variable)
   ("<f1> l" . counsel-load-library)
   ("<f2> i" . counsel-info-lookup-symbol)
   ("<f2> u" . counsel-unicode-char)
   ("C-c g" . counsel-git)
   ("C-c j" . counsel-git-grep)
   ("C-c k" . counsel-ag)
   ("C-x l" . counsel-locate)
   ("C-S-o" . counsel-rhythmbox)
   :map read-expression-map
   ("C-r" . counsel-expression-history))
  :init
  (progn
      <<ivy>>
      <<swiper>>
      <<counsel-projectile-config>>
      <<counsel-osx-app-config>>
      <<smex-config>>))
#+END_SRC

#+RESULTS: counsel

**** Swiper

#+NAME: swiper
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<swiper-avy>>
<<swiper-settings>>
#+END_SRC

#+NAME: swiper-settings
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package swiper
  :bind
  (("\C-s" . swiper)))
#+END_SRC

**** Swiper Avy

#+NAME: swiper-avy
#+BEGIN_SRC emacs-lisp :tangle no
(use-package avy
  :straight t)
#+END_SRC

**** Counsel-Projectile

[[https://github.com/ericdanan/counsel-projectile][Counsel Projectile]] provides a project management interface via ivy and
friends.

#+NAME: counsel-projectile-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-projectile
  :straight t
  :after projectile
  :init
  (counsel-projectile-mode))
#+END_SRC

**** Smex

#+NAME: smex-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package smex
  :straight t
  :init (setq-default smex-history-length 32))
#+END_SRC

**** Counsel OSX App

 #+NAME: counsel-osx-app-config
 #+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-osx-app
  :if *is-mac*
  :straight t
  :bind (("C-c o a" . counsel-osx-app)))
 #+END_SRC

**** Counsel Dash

#+NAME: counsel-dash-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-dash
  :if *is-mac*
  :straight t
  :defines chaffin/dash-activate-package-docsets
  :init
  (defun counsel-dash-at-point ()
    "Counsel dash with selected point."
    (interactive)
    (counsel-dash
     (if (use-region-p)
	 (buffer-substring-no-properties
	  (region-beginning)
	  (region-end))
       (substring-no-properties (or (thing-at-point 'symbol) "")))))

  :config
  (progn
    (defalias 'counsel-dash-installed-docsets 'helm-dash-installed-docsets)

    (defun chaffin/dash-activate-package-docsets (path)
      "Add dash docsets from specified PATH."
      (setq counsel-dash-docsets-path path
	    counsel-dash-common-docsets (counsel-dash-installed-docsets))
      (message (format "Activated %d docsets from: %s"
		       (length counsel-dash-common-docsets) path)))

    (setq counsel-dash-docsets-path
	  (expand-file-name "~/Library/Application\sSupport/Dash/DocSets"))

    (chaffin/dash-activate-package-docsets counsel-dash-docsets-path)))

#+END_SRC

***** Counsel Dash Replacement

Counsel Dash is a wrapper around helm-dash. Helm-dash depends on helm,
which defeats the purpose of using a lightweight alternative such as
Ivy. This implementation is much simpler but does not rely on helm as
a dependency.

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar dash-plugin-keywords nil
  "An `alist' of keywords representing the docsets which should searched in the query to Dash.app")

(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    (setq-local dash-plugin-keywords '("elisp"))))

(add-hook 'org-mode-hook
	  (lambda ()
	    (setq-local dash-plugin-keywords '("elisp"))))

(add-hook 'clojure-mode-hook
	  (lambda ()
	    (setq-local dash-plugin-keywords '("clojure"))))

(add-hook 'web-mode-hook
	  (lambda ()
	    (setq-local dash-plugin-keywords '("javascript" "php" "css" "html" "react"))))

(add-hook 'java-mode-hook
	  (lambda ()
	    (setq-local dash-plugin-keywords '("java" "scala" "gradle"))))

(defun dash-at-point ()
  (interactive)
  (let* ((protocol "dash-plugin://")
	 (keywords (if dash-plugin-keywords
		       (join dash-plugin-keywords ",")
		     "")))
    (browse-url
     (concat
      protocol
      (unless (string-empty-p keywords)
	(concat "keys=" keywords "&"))
      "query="
      (if (use-region-p)
	  (buffer-substring-no-properties
	   (region-beginning)
	   (region-end))
	(substring-no-properties (or (thing-at-point 'symbol) "")))))))
#+END_SRC

*** Deft

[[https://jblevins.org/projects/deft/][Deft]] is a notetaking application for Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package deft
  :straight t
  :bind ("C-x C-n" . deft)
  :config
  (progn
    (setq deft-extensions '("org")
          deft-directory "~/Dropbox/org/notes"
          deft-use-filename-as-title t
          deft-default-extension "org")))
#+END_SRC

*** Wakatime

#+NAME: wakatime-mode-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package wakatime-mode
  :if (and *is-mac* (or (string= (downcase computer-name) "hal") (string= (downcase computer-name) "junior")))
  :straight t
  :init
  (add-hook 'prog-mode-hook 'wakatime-mode)
  :config
  (progn
    (setq wakatime-cli-path
	  (expand-file-name "~/.local/lib/python3.6/site-packages/wakatime/cli.py")
	  wakatime-python-bin
	  (expand-file-name "~/.pyenv/shims/python"))

    (defun wakatime-dashboard ()
      (interactive)
      (browse-url "https://wakatime.com/dashboard"))))
#+END_SRC

** User Interface
*** Cursor
**** Vertical Bar

Set the cursor to a bar. The default is too thin for my liking.
Set the width to 4px. Also remove the cursor in inactive windows.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default cursor-type '(bar . 4)
	      cursor-in-non-selected-windows 'nil
	      x-stretch-cursor t
	      line-spacing 2)
#+END_SRC

**** Disable Blink

Ultimately, I'd like to set a longer blink interval, like the "phase"
~caret_style~ setting in Sublime Text.

#+BEGIN_SRC emacs-lisp :tangle yes
(blink-cursor-mode -1)
#+END_SRC

**** Smart Cursor Color

#+BEGIN_SRC emacs-lisp :tangle no
(use-package smart-cursor-color
  :straight t
  :config
  (smart-cursor-color-mode +1))
#+END_SRC

*** Theme
**** Enable Custom Themes

This disables Emacs asking questions about loading a new theme.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq custom-safe-themes t)
#+END_SRC

**** Zenburn Theme

#+NAME: zenburn-theme-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package zenburn-theme
  :straight t
  :config (load-theme 'zenburn))
#+END_SRC

**** TODO Contrasting theme for use with =sunshine.el=.           :ignore:

***** Anti Zenburn Theme


#+BEGIN_SRC emacs-lisp :tangle no
  (use-package anti-zenburn-theme
    :straight t)
#+END_SRC

**** Load Themes

Zenburn theme has to be loaded before [[#org-beautify-theme][Org Beautify Theme]] to preserve compatibility.

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<zenburn-theme-config>>
<<org-prettify-ob-theme>>
 #+END_SRC

*** Modeline
**** Display Time

Show the time in the modeline.

#+BEGIN_SRC emacs-lisp :tangle yes
(display-time-mode 1)
#+END_SRC

**** Spaceline

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package spaceline
  :straight t)
#+END_SRC

***** Spaceline All the Icons

#+NAME: all-the-icons-spaceline
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package spaceline-all-the-icons
  :after spaceline
  :straight t
  :config
  (setq spaceline-all-the-icons-separator-type 'arrow)
  <<spaceline-segment>>
  (spaceline-all-the-icons-theme 'org-pomodoro))
#+END_SRC

***** Spaceline Segments

#+NAME: spaceline-segment
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
(require 'spaceline)
(require 'spaceline-segments)
(require 'spaceline-config)
(require 'all-the-icons)
(require 'spaceline-all-the-icons)
<<spaceline-segment-flycheck>>
<<spaceline-segment-battery>>
#+END_SRC

****** Battery Segment
Spaceline and the all-the-icons spaceline theme support fancy battery
mode. However, this package is not maintained and doesn't appear to be
working on macOS due to an underlying issue with the
=battery-status-function=. Thought it only will work with
=all-the-icons= and =spaceline-all-the-icons-theme=, the following
segment is a pretty good replacement:

#+NAME: spaceline-segment-battery
#+BEGIN_SRC emacs-lisp :tangle no
(eval-when-compile
  (require 'battery))

;; Variables
(defvar battery-macos-echo-area-format "Source %L, Battery: %B (%p% load, remaining time %t)")
(defvar battery-macos-mode-line-format "%p %i")

;; Aliases
(defalias 'battery-pmset 'battery-macos-pmset)
(defalias 'battery-echo-area-format 'battery-macos-echo-area-format)

;; Macros

(defmacro battery-segment (segment)
  `(intern (concat "battery-macos-battery-" `,@(symbol-name (quote ,segment)))))


;; Functions
(defun battery-macos-shell-command ()
  (let* ((battery-status-string (shell-command-to-string "pmset -g batt"))
	 (battery-status-format-string (replace-regexp-in-string "\n" "" battery-status-string)))
    battery-status-format-string))

(defun battery-macos-segments (battery-percent &rest battery-status-functions)
  (let* ((battery-status-string (battery-macos-shell-command))
 	 (battery-status-segment-functions (cons battery-percent battery-status-functions))
 	 (battery-status-segments (mapcar (lambda (f) (funcall f battery-status-string)) battery-status-segment-functions)))
    (destructuring-bind (percent &optional status remaining source)
	battery-status-segments
      (list (cons ?L (or source "N/A"))
	    (cons ?p (or (number-to-string percent) "N/A"))
	    (cons ?B (or status "N/A"))
	    (cons ?t (or remaining "N/A"))))))


;;;###autoload
(defun battery-macos-pmset ()
  (let ((percent (battery-segment percent))
	(source (battery-segment source))
	(status (battery-segment status))
	(remaining (battery-segment remaining)))
    (battery-macos-segments percent status remaining source)))


;; Battery Segment Functions

(defun battery-macos-battery-percent (battery-status-string)
  (let ((battery-percent-string (substring-no-properties battery-status-string
							 (string-match "[0-9]+%" battery-status-string)
							 (match-end 0))))
    (string-to-number (replace-regexp-in-string "%" "" battery-percent-string))))

(defun battery-macos-percent ()
  (battery-macos-battery-percent (battery-macos-shell-command)))


(defun battery-macos-battery-source (battery-status-string)
  (substring-no-properties battery-status-string
			   (+ 1 (string-match "'" battery-status-string))
			   (string-match "'" battery-status-string (match-end 0))))

;; Battery Status Point Helper Functions

(defun battery-macos/status-point-begin (battery-status-string)
  (with-temp-buffer
    (insert battery-status-string)
    (goto-char (point-min))
    (re-search-forward ";")
    (point)))

(defun battery-macos/status-point-end (battery-status-string)
  (with-temp-buffer
    (insert battery-status-string)
    (goto-char (point-min))
    (re-search-forward ";" nil nil 2)
    (point)))


(defun battery-macos-battery-status (battery-status-string)
  (let* ((pointb (battery-macos/status-point-begin battery-status-string))
	 (pointe (battery-macos/status-point-end battery-status-string))
	 (status (substring-no-properties battery-status-string pointb pointe)))
    (replace-regexp-in-string "; " "" status)))

(defun battery-macos-status ()
  (battery-macos-battery-status (battery-macos-shell-command)))


(defun battery-macos-battery-remaining (battery-status-string)
  (substring-no-properties battery-status-string
			   (string-match "[0-9]\\:[0-9]\\{2\\}" battery-status-string)
			   (match-end 0)))

(defun battery-macos-remaining ()
  (battery-macos-battery-remaining (battery-macos-shell-command)))

(defun battery-macos-format (format alist)
  "Substitute %-sequences in FORMAT."
  (replace-regexp-in-string
   "%\\w"
   (lambda (str)
     (let ((char (aref str 1)))
       (if (eq char ?%) "%"
	 (or (cdr (assoc char alist)) ""))))
   format t t))

;; Spaceline
(defvar battery-macos-battery-charge '("battery-charging" . "all-the-icons"))
(defvar battery-macos-battery-full   '("battery-full" . "FontAwesome"))
(defvar battery-macos-battery-high   '("battery-three-quarters" . "FontAwesome"))
(defvar battery-macos-battery-mid    '("battery-half" . "FontAwesome"))
(defvar battery-macos-battery-low    '("battery-quarter" . "FontAwesome"))
(defvar battery-macos-battery-empty  '("battery-empty" . "FontAwesome"))

(defvar battery-macos-battery-status-icons-alist
  '(
    'battery-macos-battery-charge
    'battery-macos-battery-full
    'battery-macos-battery-high
    'battery-macos-battery-mid
    'battery-macos-battery-low
    'battery-macos-battery-empty
    ))

(defvar battery-macos-battery-icon-data-alist
  '(
    ("battery-charging"   . "\xe939" )
    ("battery-empty" . "\xf244")
    ("battery-full" . "\xf240")
    ("battery-three-quarters" . "\xf241")
    ("battery-half" . "\xf242")
    ("battery-quarter" . "\xf243")
    ))

(defun battery-macos-status-icon (battery-icon-name &optional data-alist)
  (let ((alist (or data-alist battery-macos-battery-icon-data-alist)))
    (cdar (seq-filter (lambda (x) (string= battery-icon-name (car x))) alist))))

(defun battery-macos-status-icon-propertize (battery-icon-var)
  (let* ((battery-icon-name (car battery-icon-var))
	 (battery-icon-font-family (cdr battery-icon-var))
	 (battery-icon-unicode (battery-macos-status-icon battery-icon-name)))
    (propertize battery-icon-unicode
		'font-lock-ignore t
		'rear-nonstick t
		'display '(raise 0.01)
		'height 10
		'face
		`(:inherit (powerline-active2) :family ,battery-icon-font-family :height 1))))

(defun battery-macos/add-battery-icon-to-segment-alist (battery-icon-var)
    (let ((battery-segment-alist (battery-pmset)))
      (add-to-list 'battery-segment-alist (cons ?i (battery-macos-status-icon-propertize battery-icon-var)))
      battery-segment-alist))

(defun battery-macos-spaceline-format (battery-icon-var)
  (let ((alist (battery-macos/add-battery-icon-to-segment-alist battery-icon-var))
	(space (propertize " " 'display '(space . (:width 1)))))
    (concat
     space
     (replace-regexp-in-string "\\([0-9]+\\)" "\\1%%" (battery-macos-format battery-macos-mode-line-format alist)))))




;; Spaceline Segment
(spaceline-define-segment battery-macos
  (let ((percent (battery-macos-percent))
	(status (battery-macos-status)))
    (cond ((string= status "charging") (battery-macos-spaceline-format battery-macos-battery-charge))
	  ((= percent 100) (battery-macos-spaceline-format battery-macos-battery-full))
	  ((> percent 75)  (battery-macos-spaceline-format battery-macos-battery-high))
	  ((> percent 50)  (battery-macos-spaceline-format battery-macos-battery-mid))
	  ((> percent 25)  (battery-macos-spaceline-format battery-macos-battery-low))
	  (t (battery-macos-spaceline-format battery-macos-battery-empty))))
  :tight t)

#+END_SRC

****** Flycheck Segment

By default, =spacleine-all-the-icons= theme displays the flycheck
status no matter what. I only want this enabled when =flycheck-mode=
is on.

#+NAME: spaceline-segment-flycheck
#+BEGIN_SRC emacs-lisp :tangle no

(spaceline-toggle-all-the-icons-flycheck-status-off)
(add-hook 'flycheck-mode-hook
	  (lambda ()
	    (spaceline-toggle-all-the-icons-flycheck-status)))

#+END_SRC

**** Mode Icons

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package mode-icons
  :straight t
  :if *is-gui*
  :after smart-mode-line
  :config
  (mode-icons-mode))
#+END_SRC

*** All The Icons

[[https://github.com/domtronn/all-the-icons.el][All The Icons]] is a utility package for icons in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when *is-gui*
  <<all-the-icons-setup>>
  <<all-the-icons-dired>>
  <<all-the-icons-ivy>>
  <<all-the-icons-spaceline>>)
#+END_SRC

#+NAME: all-the-icons-setup
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons
  :if *is-gui*
  :straight t
  :init
  (unless (straight-check-package "all-the-icons")
    (all-the-icons-install-fonts)))
#+END_SRC

**** Ivy All the Icons

#+NAME: all-the-icons-ivy
#+BEGIN_SRC emacs-lisp :tangle no
(use-package all-the-icons-ivy
  :straight t
  :init
  (all-the-icons-ivy-setup))
#+END_SRC

*** Terminal
**** Multi-Term

#+NAME: multi-term-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multi-term
  :straight t
  :bind
  (("C-c M-RET t" . multi-term)
   ("C-c M-RET b" . multi-term-prev)
   ("C-c M-RET n" . multi-term-next)
   ("C-c M-RET o" . multi-term-dedicated-toggle))
  :config
  (progn
    (setq multi-term-program
	  (if (string= shell-file-name "/bin/sh")
	      "/bin/bash"
	    shell-file-name))))
#+END_SRC

*** Frame Font

Use the default monospaced font for each operating system.

#+BEGIN_SRC emacs-lisp :tangle yes
(cond (*is-linux*
       (set-frame-font "Ubuntu Mono 12" nil t))
      (*is-windows*
       (set-frame-font "Lucida Sans Typewriter 12" nil t))
      ((eq system-type 'darwin)
       (set-frame-font "SF Mono 12" nil t))
      (t
       (set-frame-font "Menlo 12" nil t)))
#+END_SRC

*** Sunshine

#+BEGIN_SRC emacs-lisp :tangle no
(use-package sunshine
  :straight t
  :config
  (setq sunshine-location "90024,USA"))
#+END_SRC

*** Emojify

#+NAME: emojify-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package emojify
  :straight t
  :init (global-emojify-mode))
#+END_SRC

** Version Control
*** Magit

[[https://github.com/magit/magit][Magit]] describes itself as one of two git porcelains, the other being
git itself.

A git porcelain is jargon for a program that features a user-friendly
vcs interface, as opposed to lower-level scripting commands.

It's not a vitrified ceramic commonly used for decorative tableware.
Magit would not be very good at that.

As a git client though, magit is awesome.


#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<magit-done-no-prompt>>
<<magit-done>>
#+END_SRC

#+NAME: magit-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :straight t
  :bind
  (("C-c v v" . magit-status)
   ("C-c v m" . magit-merge)
   ("C-c v b" . magit-blame)
   ("C-c v C" . magit-clone)
   ("C-c v i" . magit-init)
   ("C-c v l" . magit-log-buffer-file)
   ("C-c v c" . magit-checkout)
   ("C-c v d" . magit-done)
   ("C-c v D" . magit-done-no-prompt)
   ("C-c v f" . magit-stage-file)
   ("C-c v p" . magit-pull)
   ("C-c v P" . magit-push)
   ("C-c v S" . magit-stash))
  :config
  (setq magit-save-repository-buffers 'dontask))
#+END_SRC

***** =magit-done=

Magit creates a lot of buffers for various git operations. This
function cleans up these buffers upon invocation.

#+NAME: magit-done
#+BEGIN_SRC emacs-lisp :tangle no
(defun magit-done (&optional no-prompt)
  "Kill magit buffers upon completion of various git processe(s).
If called with the interactive prefix argument NO-PROMPT, then
yunmodified magit buffers will be killed without confirming."
  (interactive "P")
  (let* ((buffer-names (buffer-list-names))
	 (magit-regexp-string "^\\*magit")
	 (magit-buffer-names (seq-filter (lambda (b) (string-match magit-regexp-string b)) buffer-names))
	 (magit-buffers (mapcar (lambda (b) (get-buffer b)) magit-buffer-names)))
    (cond (no-prompt
	   (mapcar
	    (lambda (b)
	      (if (> (window-count-unique) 1)
		  (progn
		    (let ((w (get-buffer-window)))
		      (kill-buffer b)
		      (delete-window w)))
		(kill-buffer b)))
	    magit-buffers))
	  (magit-buffers
	   (kill-some-buffers magit-buffers))
	  (t
	   (message "No magit buffer(s) to kill" )))))
#+END_SRC

#+NAME: magit-done-no-prompt
#+BEGIN_SRC emacs-lisp :tangle yes
(defun magit-done-no-prompt ()
  "Close magit buffers without prompting."
    (interactive)
    (magit-done 1))
#+END_SRC


**** Magithub

[[https://github.com/vermiculus/github][Magithub]] offers an interface to github to complement magit.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magithub
  :after magit
  :straight t
  :commands magithub-dispatch-popup
  :bind (:map magit-status-mode-map
	      ("@" . magithub-dispatch-popup))
  :config
  (progn
    (magithub-feature-autoinject t)))
#+END_SRC

*** gist.el

Emacs integration for gist.github.com.

[[https://github.com/defunkt/gist.el][Gist]] requires generating a personal access token with ~gist~ scope, and
optionally ~user~ and ~repo~ scopes.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package gist
  :straight t
  :bind
  (("C-c C-g l" . gist-list)
   ("C-c C-g r" . gist-region)
   ("C-c C-g b" . gist-buffer)
   ("C-c C-g p" . gist-buffer-private)
   ("C-c C-g B" . gist-region-or-buffer)
   ("C-c C-g P" . gist-region-or-buffer-private)))
#+END_SRC

*** git-timemachine

Travel back in time (to your last commit).

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-timemachine
  :straight t
  :bind
  ("C-c v t" . git-timemachine-toggle)
  :config
  (setq git-timemachine-abbreviation-length 7))
#+END_SRC

*** git-messenger

Pop-up feature for viewing the last git commit.

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package git-messenger
  :straight t
  :bind
  (("C-c C-v m" . git-messenger:popup-message)))

#+END_SRC

*** git modes

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-modes
  :straight t)
#+END_SRC

*** TODO Mercurial
**** TODO monky
**** TODO ah
** Web Browsing
*** osx-browse

This library provides several useful commands for using the
Google Chrome, Safari, and Firefox web browsers on macOS.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package osx-browse
  :straight t
  :if *is-mac*
  :init
  (osx-browse-mode 1))
#+END_SRC

*** TODO google-search-query-at-point
*** TODO browse-url-dwim
*** TODO google-this
*** TODO google-translate

** Email
*** Mu

#+NAME: mu-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package mu4e
  :if *is-mac*
  :load-path "/usr/local/Cellar/mu/0.9.18_1/share/emacs/site-lisp/mu/mu4e"
  :config
  (progn
    (setq mu4e-maildir (expand-file-name "~/.mail")
	  mu4e-context-policy 'pick-first
	  mu4e-compose-policy nil
	  mu4e-get-mail-command "offlineimap -q -u quiet"
	  mu4e-show-images t
	  mu4e-show-addresses t)

     ;; smtp settings
     (setq mu4e-send-mail-function 'smtp-mail-send-it
     mu4e-default-smtp-server "smtp.gmail.com"
     smtpmail-smtp-service 587
     smtp-mail-smtp-stream-type 'ssl)


     (setq mu4e-contexts
	   `( ,(make-mu4e-context
		:name "private"
		:match-func (lambda (msg)
			      (when msg
				mu4e-message-contact-field-matches msg
				:to "jchaffin57@gmail.com"))
		:leave-func (lambda ()
			      (mu4e-message "Leaving Gmail Account"))
		:vars '( (mu4e-reply-to-address "jchaffin@ucla.edu")
			 ( user-mail-address . "jchaffin57@gmail.com" )
			 ( user-full-name . "Jacob Chaffin" )
			 ( mu4e-drafts-folder . "/private/[Gmail].Drafts" )
			 ( mu4e-sent-folder . "/private/[Gmail].Trash" )
			 ( mu4e-refile-folder . "/archived")
			 ( mu4e-compose-signature .
						  (concat
						   "Jacob Chaffin\n"
						   "UCLA 19\n"
						   "Linguistics and Computer Science\n"
						   "jchaffin@ucla.edu\n"))))

	      ,(make-mu4e-context
		:name "school"
		:enter-func (lambda () (mu4e-message "Switching to UCLA Mail"))
		:leave-func (lambda () (mu4e-message "Leaving UCLA Mail"))
		:match-func  (lambda (msg)
			       (when msg
				 (mu4e-message-contact-field-matches msg
								     :to (or "jchaffin@ucla.edu" "jchaffin@g.ucla.edu"))))
		:vars '( (user-mail-address . "jchaffin@ucla.edu" )
			 (user-full-name . "Jacob Chaffin" )
			 (mu4e-compose-signature . (concat
						    "Jacob Chaffin\n"
						    "UCLA 19\n"
						    "Linguistics and Computer Science\n"
						    "jchaffin@ucla.edu\n"
						    "(650)-380-3288\n"))))))))

#+END_SRC

** Programming Languages
*** Lisp
**** Parens

- [[https://github.com/Fuco1/smartparens/wiki/Paredit-and-smartparens][Paredit and Smartparens]]

***** Paredit

We could use ~:init~ key to hook the ~enable-paredit-mode~
function to each of the implementing languages like is
done [[https://github.com/tomjakubowski/.emacs.d/blob/master/init.el][here]], but I think adding the hook in the configuration
block of the programming language is easier to follow and
offers more meaningful semantics.

#+NAME: paredit-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package paredit
  :straight t
  :diminish paredit-mode
  :config
  (progn
    (use-package eldoc
      :straight t
      :config
      (eldoc-add-command
       'paredit-backward-delete
       'paredit-close-round))

    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)))
   #+END_SRC

***** Smartparens

Like paredit, [[https://github.com/Fuco1/smartparens][smartparens]] is a minor-mode for managing parens
pairs. However, it also offers support for curly brackets in
JavaScript objects, angle brackets in HTML, and most other major
programming languages. I think I the "delete-on-command" behavior of
paredit for lisp programming, but in languages where locating
unmatched pairs is less comparable to searching for a needle in a
haystack, smartparens are a great productivity tool.

#+NAME: smartparens-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smartparens
  :straight t
  :init
  (require 'smartparens-config))
#+END_SRC

**** Hlsexp

Minor mode to highlight s-expresion.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hl-sexp
  :straight t)
#+END_SRC

*** Emacs Lisp

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    (paredit-mode 1)
	    (hl-sexp-mode 1)))
#+END_SRC

*** Common Lisp

Configuration for common-lisp

#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes
(with-eval-after-load 'paredit
  (add-hook 'lisp-mode-hook #'paredit-mode)
  (add-hook 'lisp-mode-hook #'hl-sexp-mode))
#+END_SRC

**** Slime

[[https://common-lisp.net/project/slime/][SLIME]] is The Superior Lisp Interaction Mode for Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package slime
  :commands slime
  :defines (slime-complete-symbol*-fancy slime-completion-at-point-functions)
  :straight t
  :if *is-mac*
  :init
  (progn
    (setq slime-contribs
            '(slime-asdf
      			  slime-fancy
			        slime-indentation
      			  slime-sbcl-exts
      			  slime-scratch)
	        inferior-lisp-program "sbcl"
      	  ;; enable fuzzy matching in code buffer and SLIME REPL
      	  slime-complete-symbol*-fancy t
      	  slime-completion-at-point-functions 'slime-fuzzy-complete-symbol)

    (defun slime-disable-smartparens ()
      (smartparents-strict-mode -1)
      (turn-off-smartparens-mode))

    (add-hook 'slime-repl-mode-hook #'slime-disable-smartparens)))
#+END_SRC

***** TODO Slime Company
*** Clojure

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<clojure-mode-config>>
<<cljsbuild-config>>
<<elein-config>>
#+END_SRC

**** Clojure Mode ([[https://gihub.com/clojure-emacs/clojure-mode][repository]])

#+NAME: clojure-mode-config
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none
<<clojure-mode-config-base>>

(with-eval-after-load 'clojure-mode
  <<clojure-mode-config-compojure>>
  <<clojure-mode-config-om-next>>)

#+END_SRC

Provides key bindings and font-locking for Clojure.

#+NAME: clojure-mode-config-base
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package clojure-mode
  :straight t
  :mode (("\\.edn$"   . clojure-mode)
	 ("\\.cljs$"  . clojurescript-mode)
	 ("\\.cljx$"  . clojurex-mode)
	 ("\\.cljsc$" . clojurec-mode))
  :config
  (progn
    (setq clojure-indent-style :always-indent)
    (add-hook 'clojure-mode-hook #'enable-paredit-mode)
    (add-hook 'clojure-mode-hook #'prettify-symbols-mode)))
#+END_SRC

***** Emacs Indentation for Clojure(Script) Libraries
****** Compojure

[[https://github.com/weavejester/compojure][Compojure]] is a web framework for Clojure and Clojurescript
applications. This snippet is taken from the [[https://github.com/weavejester/compojure/wiki/Emacs-indentation][Emacs Indentation]] page of
the repository wiki to provide better indentation for compojure macros.

#+NAME: clojure-mode-config-compojure
#+BEGIN_SRC emacs-lisp :tangle no
(define-clojure-indent
  (defroutes 2)
  (GET 2)
  (POST 2)
  (PUT 2)
  (DELETE 2)
  (HEAD 2)
  (ANY 2)
  (OPTIONS 2)
  (PATCH 2)
  (rfn 2)
  (let-routes 1)
  (context 2))
#+END_SRC

****** Om Next

#+NAME: clojure-mode-config-om-next
#+BEGIN_SRC emacs-lisp :tangle no
(put-clojure-indent 'defui '(1 nil nil (1)))
(put-clojure-indent 'dom/div 1)
#+END_SRC

**** ClojureScript
***** Lein Cljsbuild

Minor mode offering ~lein cljsbuild~ commands for the Leiningen [[https://github.com/emezeske/lein-cljsbuild][plugin]].

#+NAME: cljsbuild-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package cljsbuild-mode
  :straight t
  :init
  (add-to-hooks #'cljsbuild-mode
                 '(clojure-mode clojurescript-mode)))
#+END_SRC

***** elein

[[https://github.com/remvee/elein][Elein]] rovides support for leiningen commands in Emacs.

#+NAME: elein-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package elein
  :straight t)
#+END_SRC

**** Clojure Mode Extra Font Locking

Additional syntax highlighting for ~clojure-mode~.


#+BEGIN_SRC emacs-lisp :tangle yes
(use-package clojure-mode-extra-font-locking
  :straight t)
#+END_SRC

**** Cider ([[https://github.com/clojure-emacs/cider][repository]])

Provides integration with a Clojure repl.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cider
  :straight t
  :after company
  :config
  (setq cider-repl-history-file "~/.emacs.d/cider-history"
	cider-repl-use-clojure-font-lock t
	cider-repl-result-prefix ";; => "
	cider-repl-wrap-history t
	cider-repl-history-size 3000
	cider-show-error-buffer nil
	nrepl-hide-special-buffers t)
  (add-hook 'cider-mode-hook #'eldoc-mode)
  (add-hook 'cider-mode-hook #'company-mode)
  (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
  (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion)
  (add-hook 'cider-repl-mode-hook #'company-mode)
  (add-hook 'cider-repl-mode-hook #'subword-mode)
  (add-hook 'cider-repl-mode-hook #'enable-paredit-mode))
#+END_SRC

**** inf-clojure

 ~inf-clojure~ is a third-party package offering basic integration
 with a running Clojure subprocess. This package is necessary for
 running a Figwheel process with Emacs.
 It's not as feature-rich as CIDER, but still offers the ability
 to load files, switch namespaces, evaluate expressions, show documentation,
 and do macro-expansion.

 /Currently disabled due to conflicts with ~cider~/

#+BEGIN_SRC emacs-lisp :tangle no
(use-package inf-clojure
  :straight t
  :init
  (add-hook 'clojure-mode-hook #'inf-clojure-minor-mode))
#+END_SRC

 Now lets write a simple function to run Figwheel as a Clojure
 subprocess.

 #+BEGIN_SRC emacs-lisp :tangle no
(defun figwheel-repl ()
  (interactive)
  (inf-clojure "lein figwheel"))
 #+END_SRC

**** Linting Clojure

The [[https://github.com/clojure-emacs/squiggly-clojure][flycheck-clojure]] package allows syntax checking for Clojure(Script).
It uses [[https://github.com/jonase/eastwood][eastwood]], [[http://typedclojure.org/][core.typed]] and [[https://github.com/jonase/kibit][kibit]] to lint Clojure(Script) through CIDER.


#+BEGIN_SRC emacs-lisp :tangle no
(use-package flycheck-clojure
  :straight t
  :after cider flycheck
  :config
  (flycheck-clojure-setup))
#+END_SRC

Okay. There's been some snares getting this package to work, but with
the help of this [[http://blog.podsnap.com/squiggly.html][blogpost]] from the ~flycheck-clojure~ repo. (note to
self: READMEs are friends), I'm beginning to make progress.

After cloning the project repo from my local file system, my debugging
process has consisted of the following:

1. Navigate to the [[https://github.com/clojure-emacs/squiggly-clojure/tree/master/sample-project][sample-project]] in the ~squiggly-clojure~ project repo.
2. Open ~core.clj~
2. Launch an nrepl with Cider.
3. See ~flycheck-clojure~ being weird.
4. Annoyed Google search.
5. Edit my ~clojure~ configuration based on the last blog post.
6. Restart Emacs.
7. Repeat.

After running into problems documented in issues [[https://github.com/clojure-emacs/squiggly-clojure/issues/45][#45]], [[https://github.com/clojure-emacs/squiggly-clojure/issues/13][#13]], and [[https://github.com/clojure-emacs/squiggly-clojure/issues/46][#46,]]
+I finally was able to get ~flycheck-clojure~ to stop doing weird things+.

+It's now doing nothing at all.+

The project maintainers provide an [[https://github.com/clojure-emacs/example-config][example-config]] for setting up
emacs, cider, flycheck, and friends. I messed around with this config
for about half an hour and the latency issues and general
inconsistency are the same.

I'm guessing I need to actually include the linters in my project's
~project.clj~, but it's weird this package worked at all for bits and
stretches if the dependencies need to be installed manually.

**** Typed Clojure

Let's give this [[https://github.com/typedclojure/typed-clojure-mode][guy]] a try.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package typed-clojure-mode
  :straight t
  :after clojure-mode
  :init
  (add-hook 'clojure-mode-hook 'typed-clojure-mode))
#+END_SRC


~java.lang.GoEFUrself~!

 #+BEGIN_EXAMPLE sh
   # CompilerException java.lang.RuntimeException: Unable to resolve symbol: sym in this context, compiling:(clojure/core/types.clj:1170:5)
 #+END_EXAMPLE

 I've now stumbled upon ~cider--debug-mode~.

 This mode cannot be called manually, but with ~C-u C-M-x~ instead,
 and now =flycheck-clojure= +appears to be sort of working+.

3 months later...

The above strikethrough denotes the point in time where I officially
said [[https://www.si.com/nba/2017/05/16/steve-kerr-sneakers-message][FI]].

**** Flycheck-Pos-Tip

The ~flycheck-clojure~ repository recommendeds to install
[[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]] to keep linting and type errors from clashing with
CIDER eldoc information.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck-pos-tip
  :straight t
  :after flycheck
  :init
  (flycheck-pos-tip-mode)
  :config
  (setq flycheck-display-errors-function
	#'flycheck-pos-tip-error-messages))
#+END_SRC

*** Java
**** Eclim

#+BEGIN_SRC emacs-lisp :tangle no
(use-package eclim
  :straight t
  :if (eq system-type 'darwin)
  ;; load my forked version
  ;; :load-path "site-lisp/emacs-eclim/"
  :config
  (setq eclim-eclipse-dirs '("/Applications/Eclipse.app/Contents/Eclipse")
	eclim-executable "/Applications/Eclipse.app/Contents/Eclipse/eclim"
	eclimd-executable "/Applications/Eclipse.app/Contents/Eclipse/eclimd"
	eclimd-default-workspace "~/Developer/Projects/Java/Workspace"
	eclimd-autostart-with-default-workspace t
	eclim-autostart nil
	eclim-wait-for-process t))
#+END_SRC

*** LaTeX
**** Tex Config

#+NAME: tex-config
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no
(use-package tex
  :straight (auctex
	     :host github
	     :repo "emacsmirror/auctex"
	     :files (:defaults (:exclude "*.el.in")))
  :defines latex-nofill-env
  :functions chaffin/tex-auto-fill-mode
  :init
  (progn
    (setq TeX-command-default "LaTeX"
	  TeX-engine 'xetex
	  TeX-auto-save t
	  TeX-parse-self t
	  TeX-syntactic-comment t
	  TeX-source-correlate-start-server nil
	  LaTeX-fill-break-at-separators nil)
    (defvar latex-nofill-env '("equation"
			       "equation*"
			       "align"
			       "align*"
			       "tabular"
			       "tikzpicture"))
    (defun chaffin//tex-autofill ()
      "Check whether the pointer is currently inside one of
the environments in `latex-nofill-env` and inhibits auto-filling
of the current paragraph."
      (let ((do-auto-fill t)
	    (current-environment "")
	    (level 0))
	(while (and do-auto-fill (not (string- current-environment "document")))
	  (setq level (1+ level)
		current-environment (LaTeX-current-environment level)
		do-auto-fill (not (member current-environment latex-nofill-env)))))
      (when do-auto-fill
	(do-auto-fill)))

    (defun chaffin/tex-auto-fill-mode ()
      (interactive)
      (auto-fill-mode)
      (setq auto-fill-mode 'chaffin/tex-autofill))

    (add-hook 'LaTeX-mode-hook 'chaffin/tex-auto-fill-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
    (add-hook 'LaTeX-mode-hook 'smartparens-mode)
    ;; Company AucTeX
    <<company-auctex-config>>
    ;; RefTeX
    <<reftex-config>>
    (jchaffin/init-reftex)
    ;; Bibtex Config
    <<bibtex-config>>
    ;; Magic Latex Buffer
    <<magic-latex-buffer-config>>
    ;; Latex Preview Pane
    ;; buggy
    ;; <<latex-preview-pane-config>>

    ;; Org Edit Latex Buffer
    <<org-edit-latex-config>>
    ;; Latex Extra
    <<latex-extra-config>>
    ;; Auctex latexmk
    <<auctex-latexmk-config>>))
#+END_SRC

**** Bibtex

#+NAME: bibtex-config
#+BEGIN_SRC emacs-lisp :tangle no
(setq bibtex-autokey-year-length 2
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)
#+END_SRC

**** LaTeX Extra

#+NAME: latex-extra-config
#+BEGIN_SRC emacs-lisp :tangle no
;; See [1] https://github/Malabarba/latex-extra/issues/23
(let ((byte-compile-warnings '(not free-vars)))
  (use-package latex-extra
    :straight t
    :config
    (add-hook 'LaTeX-mode-hook 'latex-extra-mode)))
#+END_SRC

**** LaTeX Preview Pane

#+NAME: latex-preview-pane-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package latex-preview-pane
  :straight t
  :config (latex-preview-pane-enable))
#+END_SRC

**** Company AucTeX

#+NAME: company-auctex-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-auctex
  :straight t
  :init
  (company-auctex-init))
#+END_SRC

**** Org Edit Latex

#+NAME: org-edit-latex-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-edit-latex
  :straight t)
#+END_SRC

**** Magic Latex Buffer

Prettify dedicated org-mode latex buffers.

#+NAME: magic-latex-buffer-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package magic-latex-buffer
  :straight t
  :init
  (progn
    (add-hook 'LaTeX-mode-hook 'magic-latex-buffer)
    (setq magic-latex-enable-block-highlight t
	  magic-latex-enable-suscript t
	  magic-latex-enable-pretty-symbols t
	  magic-latex-enable-block-align nil
	  magic-latex-enable-inline-image t)))
#+END_SRC

**** Auctex Latexmk

#+NAME: auctex-latexmk-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package auctex-latexmk
  :straight t
  :config
  (setq auctex-latexmk-inherit-TeX-PDF-mode t))
#+END_SRC

**** RefTeX


RefTeX is a citation and reference tool maintained by the
AucTeX team.

Since Emacs 24.3, its built in with the Emacs distribution.

#+NAME: reftex-config
#+BEGIN_SRC emacs-lisp :tangle no
  (defun jchaffin/init-reftex ()
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX '(nil nil t t t)
          reftex-use-fonts t
          reftex-default-bibliography '("~/Dropbox/org/papers/references.bib")))
#+END_SRC

**** Texinfo

#+texinfo-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package texinfo
  :straight t
  :defines texinfo-section-list
  :commands texinfo-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.texi$" . texinfo-mode)))
#+END_SRC

*** Javascript
**** JavaScript Preamble

#+NAME: js-config
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes
  <<js2-mode-config>>
  <<coffee-mode-config>>
  <<json-mode-config>>
  <<tern-mode-config>>
#+END_SRC

**** js2-mode

#+NAME: js2-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package js2-mode
  :straight t
  :mode (("\\.js\\'" . js2-mode))
  :config
  (progn
    (setq js-indent-level 2)))
#+END_SRC

**** rjsx-mode

Real jsx support.

#+NAME: rjsx-mode-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rjsx-mode
  :straight t
  :mode "\\.jsx\\'")
#+END_SRC

**** Tern

[[https://github.com/proofit404/company-tern][Tern]] is a code-analysis engine for JavaScript.

#+NAME: tern-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package tern
  :straight t
  :after js2-mode
  :init (add-hook 'js2-mode-hook 'tern-mode))
#+END_SRC

***** Company Tern ([[https://github.com/proofit404/company-tern][repository]])

Tern backend using company.

#+NAME: company-tern-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-tern
  :straight t
  :init
  (add-to-list 'company-backends 'company-tern)
  :config
  (progn
    (setq company-tern-property-marker nil
          company-tern-meta-as-single-line t)))
#+END_SRC

**** JSON

#+NAME: json-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package json-mode
  :defer t
  :straight t
  :mode (("\\.json\\'" . json-mode)))
#+END_SRC

**** React                                                        :ignore:

Based off/shamelessly copied and pasted from Spacemacs
React layer.

#+NAME: react-config
#+BEGIN_SRC emacs-lisp :tangle no
  (progn
    (define-derived-mode react-mode web-mode "react")
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . react-mode))
    (add-to-list 'auto-mode-alist '("\\.react.js\\'" . react-mode))
    (add-to-list 'auto-mode-alist '("\\.index.android.js\\'" . react-mode))
    (add-to-list 'auto-mode-alist '("\\.index.ios.js\\'" . react-mode))
    (add-to-list 'auto-mode-alist '("\\/\\*\\* @jsx .*\\*/\\'" . react-mode)))
#+END_SRC

**** TypeScript

#+NAME: typescript-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package tide
  :defer t
  :straight t
  :after flycheck
  :config
  (progn

    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1))

    ;; Formats buffer before saving
    (add-hook 'before-save-hook 'tide-format-before-save)

    (add-hook 'typescript-mode-hook #'setup-tide-mode)))
#+END_SRC

**** Coffee

#+NAME: coffee-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package coffee-mode
  :straight t
  :mode ("\\.coffee\\'" . coffee-mode))
#+END_SRC

**** Add Node Modules Path ([[https://github.com/codesuki/add-node-modules-path][repository]])

#+NAME: add-node-modules-path-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package add-node-modules-path
  :straight t
  :defer t
  :init
  (add-hook 'js2-mode-hook #'add-node-modules-path))
#+END_SRC

**** Npm Mode

#+NAME: npm-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package npm-mode
  :straight t
  :defer t)
#+END_SRC

**** Enable syntax checking in ~js-mode~ and related mode buffers.

#+NAME: flycheck-js-config
#+BEGIN_SRC emacs-lisp :tangle no
  (dolist (mode '(coffee-mode js2-mode json-mode))
    (push mode flycheck-global-modes))
#+END_SRC


*** Web
**** Web Mode

#+NAME: web-mode-config
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes
(use-package web-mode
  :straight t
  :bind (:map web-mode-map
	      ("M-n" . web-mode-tag-match))
  :mode
  (("\\.phtml\\'"      . web-mode)
   ("\\.tpl\\.php\\'"  . web-mode)
   ("\\.twig\\'"       . web-mode)
   ("\\.html\\'"       . web-mode)
   ("\\.htm\\'"        . web-mode)
   ("\\.[gj]sp\\'"     . web-mode)
   ("\\.as[cp]x?\\'"   . web-mode)
   ("\\.eex\\'"        . web-mode)
   ("\\.erb\\'"        . web-mode)
   ("\\.mustache\\'"   . web-mode)
   ("\\.handlebars\\'" . web-mode)
   ("\\.hbs\\'"        . web-mode)
   ("\\.eco\\'"        . web-mode)
   ("\\.ejs\\'"        . web-mode)
   ("\\.djhtml\\'"     . web-mode))

  :config
  (progn
    (setq web-mode-engines-alist
	'(("php" . "\\.phtml\\'")
	  ("blade" . "\\.blade\\'")))

    (defun jchaffin/web-mode-enable ()
      (setq web-mode-enable-auto-pairing t
	    web-mode-enable-css-colorization t
	    web-mode-enable-block-face t
	    web-mode-enable-part-face t
	    web-mode-enable-comment-keywords t
	    web-mode-enable-heredoc-fontification t
	    web-mode-enable-current-element-highlight t
	    web-mode-enable-current-column-highlight t))

    (add-hook 'web-mode-hook #'jchaffin/web-mode-enable)


    (defun jchaffin/web-mode-indent ()
      (setq web-mode-markup-indent-offset 2
	    web-mode-code-indent-offset 2
	    web-mode-style-padding 1
	    web-mode-script-padding 1
	    web-mode-block-padding 0
	    web-mode-comment-style 2))

    (add-hook 'web-mode-hook #'jchaffin/web-mode-indent)

    <<tagedit-mode-config>>
    <<css-mode-config>>
    <<emmet-mode-config>>
    <<company-web-config>>))
#+END_SRC

**** Emmet

#+NAME: emmet-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package emmet-mode
  :straight t
  :defer t
  :init
  (add-to-hooks 'emmet-mode '(css-mode-hook
			     html-mode-hook
			     web-mode-hook)))
#+END_SRC

**** HTML
***** Tag Edit

#+NAME: tagedit-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package tagedit
  :straight t
  :diminish tagedit-mode
  :config
  (progn
    (tagedit-add-experimental-features)
    (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
#+END_SRC

***** TODO Smart Parens

**** CSS
***** CSS Mode

#+NAME: css-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package css-mode
  :straight t
  :defer t
  :commands css-expand-statement css-contract-statement
  :bind (("C-c c z" . css-contract-statement)
	 ("C-c c o" . css-expand-statement))
  :init
  (progn
    (defun css-expand-statment ()
      (interactive)
      (save-excursion
	(end-of-line)
	(search-backward "{")
	(forward-char 1)
	(while (or (eobp) (not (looking-at "}")))
	  (let ((beg (point)))
	    (newline)
	    (search-forward ";")
	    (indent-region beg (point))))
	(newline)))

    (defun css-contrac-statement ()
      "Contract CSS Block"
      (interactive)
      (end-of-line)
      (search-backward "{")
      (while (not (looking-at "}"))
	(join-line -1))))

  :config
  (setq css-indent-offset 2))
#+END_SRC

***** Less

#+NAME: css-less-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package css-less-mode
  :straight t
  :mode ("\\.less\\'" . less-css-mode))
#+END_SRC

***** SASS

#+NAME: sass-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package sass-mode
  :straight t
  :mode ("\\.sass\\'" . sass-mode))
#+END_SRC

***** SCSS

#+NAME: scss-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package scss-mode
  :straight t
  :mode ("\\.scss\\'" . scss-mode))
#+END_SRC

**** Syntax Checking and Code Completion
***** Company Web ([[https://github.com/osv/company-web][repository]])

Code completion for html-mode, web-mode, jade-mode,
and slim-mode using company.

#+NAME: company-web-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package company-web
  :straight t
  :init
  (progn
    <<company-tern-config>>
    (defun chaffin/company-web-mode-hook ()
      "Autocompletion hook for web-mode"
      (set (make-local-variable 'company-backends)
	   '(company-tern company-web-html company-yasnippet company-files)))

    (add-hook 'web-mode-hook #'chaffin/company-web-mode-hook)

    ;; Enable JavaScript completion between <script>...</script> etc.
    (defadvice company-tern (before web-mode-set-up-ac-sources activate)
      "Set `tern-mode' based on current language before running company-tern."
      (if (equal major-mode 'web-mode)
	  (let ((web-mode-cur-language
		 (web-mode-language-at-pos)))
	    (if (or (string= web-mode-cur-language "javascript")
		    (string= web-mode-cur-language "jsx"))
		(unless tern-mode (tern-mode))
	      (if tern-mode (tern-mode -1))))))))
#+END_SRC

*** Markdown
**** Markdown Mode

- See https://jblevins.org/projects/markdown-mode/

#+NAME markdown-mode-config
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package markdown-mode
  :straight t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init
  (progn
    (setq markdown-command "multimarkdown")
    (when *is-mac*
      ;; FIX ME
      (setq markdown-open-command (lambda () (shell-command "open -a Marked" buffer-file-name)))))
  :config
  (add-to-hooks  (lambda ()
		   (visual-line-mode)
		   (auto-fill-mode))
		 '(markdown-mode-hook gfm-mode-hook)))

#+END_SRC

**** markdown-mode+

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-mode+
  :if *is-mac*
  :straight t)
#+END_SRC

**** TODO markdown-tocontents
**** TODO markdownfmt
*** Ruby
**** ruby-mode

#+NAME: ruby-mode-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ruby-mode
  :mode "\\.rb\\'"
  :interpreter "ruby"
  :functions inf-ruby-keys
  :config
  (progn
    (defun chaffin/ruby-mode-hook ()
      (require 'inf-ruby)
      (inf-ruby-keys))

    (add-hook #'ruby-mode-hook #'chaffin/ruby-mode-hook)))
#+END_SRC

**** TODO rvm
*** Docker

#+NAME: dockerfile-mode-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dockerfile-mode
  :straight t
  :mode ( "Dockerfile\\'" .  dockerfile-mode))
#+END_SRC

** Footnotes

[fn:1] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/General-Variables.html#General-Variables][Emacs Manual - C.4.1 General Variables]]

[fn:2] In lisp, global variables are called /top-level defintions/. By
convention, globals are wrapped in a pair of asterisks called
/earmuffs/. Earmuffs are completely optional -- they have no effect on
how the program is compiled -- its a best practice in all of the many
dialects of Lisp.

[fn:3] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Conditionals.html][Emacs Manual - 10.2 Conditionals]]

[fn:4] [[https://www.emacswiki.org/emacs/EmacsForMacOS][EmacsForMacOS]]

[fn:5] [[https://www.quora.com/Is-Windows-POSIX-compliant][Quora - Is Windows POSIX compliant?]]

[fn:6] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][Emacs Manual - 51.1.4 Saving Customizations]]

[fn:7] See [[https://matt.hackinghistory.ca/2015/11/11/note-taking-with-pdf-tools/][Note taking with pdf-tools]]

[fn:8] [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Mastering Emacs - Keeping Secrets in Emacs GnuPG Auth Sources]]

[fn:9] [[https://www.emacswiki.org/emacs/TabsAreEvil][Emacs Wiki - Tabs Are Evil]]

[fn:10] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html#Library-Headers][Emacs Manual - D.8 Conventional Headers for Emacs Libraries]]


