#+TITLE: Jacob Chaffin's Literate Emacs Configuration
#+LANGUAGE: en
#+OPTIONS: num:nil toc:2 tags:nil todo:nil H:3
#+SETUPFILE: /Users/jacobchaffin/.emacs.d/straight/repos/org-html-themes/setup/theme-readtheorg.setup

* Table Of Contents                                       :TOC_3_gh:noexport:
- [[#preface][Preface]]
  - [[#about-this-document][About this document]]
  - [[#literate-programming][Literate Programming]]
  - [[#influences][Influences]]
- [[#base-configuration][Base Configuration]]
  - [[#package-management][Package Management]]
    - [[#straight][Straight]]
  - [[#user-information][User Information]]
  - [[#core][Core]]
    - [[#constants][Constants]]
    - [[#macros][Macros]]
    - [[#functions][Functions]]
    - [[#extending-the-global-keymap][Extending the Global Keymap]]
    - [[#default-setup][Default Setup]]
    - [[#encryption][Encryption]]
    - [[#alias-yes-or-no][Alias Yes Or No]]
  - [[#system][System]]
    - [[#use-emacs-terminfo][Use Emacs terminfo]]
    - [[#utf-8-encoding][UTF-8 Encoding]]
    - [[#pickup-environment-variables][Pickup environment variables]]
    - [[#system-packages][System Packages]]
    - [[#prodigy][Prodigy]]
  - [[#macos][macOS]]
- [[#latex-and-org-mode][LaTeX and Org Mode]]
  - [[#latex][LaTeX]]
    - [[#tex][Tex]]
    - [[#tex-site][Tex site]]
    - [[#reftex][RefTeX]]
    - [[#bibtex][BibTex]]
    - [[#latex-extra][LaTeX Extra]]
    - [[#latex-preview-pane][LaTeX Preview Pane]]
    - [[#company-auctex][Company AucTeX]]
    - [[#cdlatex][cdlatex]]
    - [[#magic-latex-buffer][Magic Latex Buffer]]
    - [[#auctex-latexmk][Auctex Latexmk]]
    - [[#texinfo][Texinfo]]
  - [[#org-mode][Org Mode]]
    - [[#org-babel][Org Babel]]
    - [[#org-mode-ui][Org Mode UI]]
    - [[#document-management][Document Management]]
    - [[#task-management][Task Management]]
    - [[#idea-management][Idea Management]]
  - [[#org-latex][Org LaTeX]]
    - [[#latex-in-org-buffers][LaTeX in Org Buffers]]
    - [[#edit-latex][Edit Latex]]
    - [[#highlight-inline-latex-fragments][Highlight inline LaTeX fragments]]
    - [[#org-ref][Org Ref]]
    - [[#org-pdf][Org PDF]]
  - [[#org-mode-export][Org Mode Export]]
    - [[#enable-backends][Enable Backends]]
    - [[#ox-latex][Ox LaTeX]]
    - [[#ox-bibtex][Ox Bibtex]]
    - [[#ox-pandoc][Ox Pandoc]]
    - [[#ox-gfm][Ox GFM]]
    - [[#ox-hugo][Ox Hugo]]
    - [[#ox-html][Ox HTML]]
    - [[#ox-extra][Ox Extra]]
    - [[#ox-publish][Ox Publish]]
- [[#customizing-emacs][Customizing Emacs]]
  - [[#search-and-navigation][Search and Navigation]]
    - [[#the-buffer][The buffer]]
    - [[#the-file-system][The file system]]
    - [[#the-project][The project]]
  - [[#startup][Startup]]
    - [[#initial-buffer][Initial Buffer]]
    - [[#initial-scratch][Initial Scratch]]
    - [[#initial-frame][Initial Frame]]
  - [[#keybindings][Keybindings]]
    - [[#hydra][Hydra]]
  - [[#window-manager][Window Manager]]
    - [[#window-resize][Window Resize]]
    - [[#popwin][Popwin]]
    - [[#winner-mode][Winner Mode]]
  - [[#emacs][Emacs+]]
    - [[#help][Help+]]
    - [[#image][Image+]]
  - [[#user-interface][User Interface]]
    - [[#cursor][Cursor]]
    - [[#fonts][Fonts]]
    - [[#modeline][Modeline]]
    - [[#theme][Theme]]
    - [[#all-the-icons][All The Icons]]
    - [[#scrolling][Scrolling]]
    - [[#redisplay][Redisplay]]
    - [[#emojis][Emojis]]
- [[#completion][Completion]]
  - [[#company][Company]]
  - [[#snippets][Snippets]]
    - [[#yasnippet][YASnippet]]
    - [[#code-library][Code Library]]
  - [[#minibuffer][Minibuffer]]
    - [[#prompt-properties][Prompt Properties]]
    - [[#ivy-counsel][Ivy (Counsel)]]
    - [[#smex][Smex]]
- [[#terminal][Terminal]]
  - [[#with-editor][With Editor]]
  - [[#multi-term][Multi-Term]]
  - [[#xterm][xterm]]
  - [[#run-bash-on-windowspc][Run Bash On Windows/PC]]
  - [[#shell][Shell]]
  - [[#tramp][Tramp]]
- [[#web][Web]]
  - [[#browsing][Browsing]]
    - [[#webkit-xwidget][Webkit xwidget]]
    - [[#set-the-default-browser][Set the default browser.]]
    - [[#osx-browse][=osx-browse=]]
    - [[#google-search-at-point][Google search at point]]
    - [[#search-web][Search Web]]
    - [[#advise-org-open-at-point][Advise =org-open-at-point=]]
    - [[#browse-at-remote][Browse at remote]]
    - [[#set-default-browser][Set default browser]]
  - [[#email][Email]]
    - [[#mu][Mu]]
- [[#prose][Prose]]
  - [[#prose-keymap][Prose Keymap]]
  - [[#spelling-and-grammar][Spelling and Grammar]]
    - [[#flyspell][Flyspell]]
    - [[#langtool][Langtool]]
  - [[#text-completion][Text Completion]]
    - [[#company-dict][Company Dict]]
    - [[#dictionaryel][Dictionary.el]]
  - [[#taking-notes][Taking Notes]]
    - [[#deft][Deft]]
    - [[#org-velocity][Org Velocity]]
  - [[#reading-and-viewing-prose][Reading and viewing prose]]
    - [[#nov][Nov]]
    - [[#visual-fill-column][Visual Fill Column]]
  - [[#generating-dummy-text][Generating Dummy Text]]
  - [[#graphics][Graphics]]
    - [[#artist-mode][Artist Mode]]
    - [[#uml-diagrams][UML Diagrams]]
    - [[#graphs][Graphs]]
- [[#code][Code]]
  - [[#error-checking][Error checking]]
    - [[#flycheck][Flycheck]]
    - [[#flycheck-color-mode-line][Flycheck Color Mode Line]]
  - [[#reading-and-viewing-code][Reading and viewing code]]
    - [[#indentation][Indentation]]
    - [[#symbol-highlighting][Symbol Highlighting]]
    - [[#code-folding][Code Folding]]
  - [[#code-completion][Code Completion]]
    - [[#pair-matching][Pair Matching]]
    - [[#gtags][Gtags]]
  - [[#version-control][Version Control]]
    - [[#git][Git]]
    - [[#mercurial][Mercurial]]
  - [[#prog-tools][Prog Tools]]
    - [[#devops][DevOps]]
    - [[#time-tracking][Time Tracking]]
  - [[#prog-lang-api][Prog Lang API]]
  - [[#programming-languages][Programming Languages]]
    - [[#asm][ASM]]
    - [[#c][C++]]
    - [[#common-lisp][Common Lisp]]
    - [[#clojurescript][Clojure(Script)]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#groovy][Groovy]]
    - [[#java][Java]]
    - [[#javascript][JavaScript]]
    - [[#markdown][Markdown]]
    - [[#python][Python]]
    - [[#ruby][Ruby]]
    - [[#scala][Scala]]
    - [[#web-programming][Web Programming]]
- [[#footnotes][Footnotes]]

* Preface
** About this document

This document contains my entire configuration for the GNU Emacs text
editor. It written as some combination of travelogue, technical
notebook, personal journal, and [[https://www.stackoverflow.com][StackOverflow]] pasteboard.

** Literate Programming

[[https://en.wikipedia.org/wiki/literate_programming][Literate Programming]] is a method of writing computer programs where
the composition, logic, and structure of the program are optimized for
human comprehension. Introduced by Donald Knuth in his 1983 eponymous
work, a literate program interoperates source code with macros,
commentary, and documentation written in natural language prose. The
source code is then extracted in a pre-compilation step known as
/tangling/.

Where as a program is traditionally presented in a tree structure, a
programmer implementing literate techniques arranges parts and forms
the relations of these parts in the order of human logic.

A literate program is then structured like an essay or other work of
literature, where ideas are connected in the form of a web rather than
the unidirectional order of interpretation that is characteristic of a
compiler.

** Influences

- [[http://pages.sachachua.com/.emacs.d/sacha.html][Sacha Chua's Emacs Configuration]]
- [[http://aaronbedra.com/emacs.d/][Aaron Bedra's Emacs Configuration]]
- [[https://github.com/Wasamasa/dotemacs/blob/master/init.org][wasamasa/dotemacs]]
- [[http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/][Optimal Emacs Settings For Org Mode For Literal Programming]]
 
* Base Configuration
** Package Management
*** Straight
:PROPERTIES:
:ID:       66FE9466-8249-4F2A-9E45-1F1ABC67E643
:CUSTOM_ID: straight
:END:

[[https://github.com/raxod502/straight.el][Straight.el]] is a drop-in replacement for =package.el=. After reading
the repository description [fn:1], I impetuously refactored my entire
Emacs configuration without reading any of the documentation, because

#+BEGIN_SRC http :pretty :file ./resources/img/documentation-is-for-wimps.png :exports none
GET https://3.bp.blogspot.com/-b3dUlC6AJjI/WE2U_wcJvrI/AAAAAAAAA_4/lciulxFqwrUAZxLol9FVybHCpCdgXSufgCLcB/w1200-h630-p-k-no-nu/documentation-is-for-wimps.png
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
#+END_SRC

#+RESULTS:
[[file:./resources/img/documentation-is-for-wimps.png]]

[[/resources/img/documentation-is-for-wimps.png]]

It took me a while to figure out how straight works and to
conceptualize the way it loads packages  - primarily because
documentation is also for people who understand things - but now that
I've gotten through the substantial learning curve (made substantially
harder due to my misconception regrading the value of reading
documentation), I've come to find it reduces a lot of the weirdness
of the Emacs loading process and increases the rapidity (shall I say
agility? no..) with which I comprehend the way third-party packages are
implemented and modify them as I deem necessary.

** User Information

These values are initialized with the ’name’ and ’email’
environment variables, respectively[fn:2].

Emacs uses these variables to fill the mail header when sending
emails in emacs, and various third-party packages rely on them
for correct behavior.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Jacob Chaffin"
      user-mail-address "jchaffin@ucla.edu")
#+END_SRC

Ensure that programs store emacs information in the cannonical
directory.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-emacs-directory "~/.emacs.d/")
#+END_SRC

** Core
*** Constants                                                      :ignore:

Variables used throughout this file[fn:3]:

#+NAME: define-constants
#+BEGIN_SRC emacs-lisp :tangle yes
(defconst *is-mac* (eq system-type 'darwin))
(defconst *is-linux* (eq system-type 'linux))
(defconst *is-windows* (eq system-type 'windows))
(defconst *is-lnxsrv* (string-prefix-p "lnxsrv" system-name))
#+END_SRC
#+END_SRC

*** Macros
**** With system

This is a simple utility macro that evaluates code depending on
operating system type.

Where as the top level ~system-type~ aliases are intended to simplify
conditionals of the /if-then/ form or /if-else-then/ form, the
~with-system~ macro is intended for use in structures with a single
conditional clause.

In emacs-lisp, this kind of statement can be expressed with the ~when~
macro[fn:4].

Credits to stack overflow user [[https://stackoverflow.com/users/403018/gerstmann][gerstmann]], who provided this solution
in the following stack overflow [[https://stackoverflow.com/a/26137517/6233622][ticket]].

#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro with-system (type &rest body)
  "If TYPE equals `system-type', evaluate BODY."
  (declare (indent defun))
  `(when (eq system-type ',type)
     ,@body))
#+END_SRC

**** If not

Clojure-like =if-not= macro in elisp.

#+NAME: if-not
#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro if-not (condition then-form &rest rest-forms)
  (declare (indent 2))
  `(progn
     (if (not ,condition)
	 ,then-form
       ,@rest-forms)))
#+END_SRC

**** Major Mode
***** =with-major-mode=

#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro with-major-mode (mode &rest body)
  (declare (indent defun))
  `(when (equal major-mode ',mode)
     ,@body))
#+END_SRC

***** =if-major-mode=

#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro if-major-mode (mode then-form &rest rest-forms)
  (declare (indent defun))
  `(progn
     (if (equal major-mode ',mode)
	 ,then-form
       ,@rest-forms)))
#+END_SRC

*** Functions
**** Reload Initialization File

#+NAME: chaffin-reload-init
#+BEGIN_SRC emacs-lisp :tangle yes
(defun chaffin-reload-init ()
  "Reload init.el"
  (interactive)
  (straight-transaction
    (straight-mark-transaction-as-init)
    (message "Reloading initialization file...")
    (load user-init-file nil 'nomessage)
    (message "Reloading initialization file...done.")))

#+END_SRC

**** Eval Buffer using =straight.el= transaction system.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun chaffin-eval-buffer ()
  "Evaluate current buffer using the `straight'
   transaction system."
  (interactive)
  (message "Evaluating %s..." (buffer-name))
  (straight-transaction
    (if (or (null buffer-file-name) 
            (not (file-exists-p buffer-file-name)))
        (eval-buffer)
      (progn 
        (when (string= buffer-file-name user-init-file)
          (straight-mark-transaction-as-init))
        (load-file buffer-file-name))))

  (message "Evaluating %s...done." (buffer-name)))
#+END_SRC

**** Add multiple hooks

See Stack Overflow ticket [[https://stackoverflow.com/a/7400476/6233622][#7398216]]

#+BEGIN_SRC emacs-lisp :tangle yes
(defun add-to-hooks (fun hooks)
  "Add function to hooks"
  (dolist (hook hooks)
    (add-hook hook fun)))
#+END_SRC

**** Join Strings with Separator

#+BEGIN_SRC emacs-lisp :tangle yes
(defun join (lst sep)
  (mapconcat 'identity lst sep))
#+END_SRC

**** Buffer List Names

#+BEGIN_SRC emacs-lisp :tangle yes
(defun buffer-list-names ()
  "Get list of buffer names"
  (let ((f (lambda (b) (buffer-name b)))
	(buffer-alist (buffer-list)))
    (mapcar f buffer-alist)))
#+END_SRC

**** Count Windows

#+NAME: window-count
#+BEGIN_SRC emacs-lisp :tangle yes
(defun window-count ()
  "Count number of windows in the current frame."
  (interactive)
  (length (window-list)))
#+END_SRC

#+NAME: window-count-unique
#+BEGIN_SRC emacs-lisp :tangle yes
(defun window-count-unique ()
  "Count number of unique windows in the current frame"
  (interactive)
  (length (cl-delete-duplicates (mapcar #'window-buffer (window-list)))))
#+END_SRC

**** Copy File Path

A useful utility function for copying the file path to the buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun copy-file-path (func)

  "Copies the file path and applies the result as an argument to
function FUNC. To copy the file path to the kill-ring, use the interactive
function `copy-file-path-as-kill'."

  (destructuring-bind (file dir)
      (if-major-mode dired-mode
        (list (substring-no-properties (thing-at-point 'symbol))
              dired-directory)
        (mapcar (lambda (f)
                  (funcall f buffer-file-name))
                '(file-name-nondirectory file-name-directory )))
    (funcall func (expand-file-name file dir))))
#+END_SRC

***** Copy File Path as New Kill

#+BEGIN_SRC emacs-lisp :tangle yes
(defun copy-file-path-as-kill ()
  "Copies the file path of the current dired directory or file buffer to the kill-ring."
  (interactive)
  (let ((func (lambda (s) (progn
			    (kill-new s)
			    (message "%s" s)))))
    (copy-file-path func)))
#+END_SRC

***** Copy File Path As Region Kill
And just for the fun of it, a function that copies the current file path using a temporary
buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun copy-file-path-as-region-kill (s)
  (interactive)
  (copy-file-path (lambda (s)
		    (with-temp-buffer
		      (insert s)
		      (kill-region (point-min) (point-max))))))
#+END_SRC

**** List Directory Contents without wildcards

#+BEGIN_SRC emacs-lisp :tangle yes
(defun directory-files-no-wildcards (directory &optional full nosort)
  (seq-filter (lambda (x)
		(not
		 (or (string-empty-p (string-trim x))
		     (or (string= "." x)
			 (string= ".." x)))))
	      (directory-files directory full nil nosort)))
#+END_SRC

**** Resolve Path

#+BEGIN_SRC emacs-lisp :tangle yes
(defun resolve-path (&rest paths)
  (let* ((ms-file-path-separator "\\")
         (nix-file-path-separator "/")
         (file-path-separator
          (if (eq system-name 'windows)
              ms-file-path-separator
            nix-file-path-separator))
         (paths* (mapcar #'directory-file-name paths)))
    (mapconcat 'identity paths* file-path-separator)))
#+END_SRC

***** Resolve to Emacs Directory

#+BEGIN_SRC emacs-lisp :tangle yes
(defun emacs-directory-resolve-path (&rest path)
  "Resolve a file path relative to the `user-emacs-directory.'
  PATH is a destructured list of path segments. The file path
  separator is determined based on the current operating system
  in `resolve-path'."
  (let* ((separators (if (eq system-name 'windows)
                         "\\" "/"))
        (emacs-directory-path-segments (split-string user-emacs-directory separators t))
        (path-segments (seq-concatenate 'list emacs-directory-path-segments path)))
    (apply #'resolve-path path-segments)))

#+END_SRC

**** Goto local package repository

Function to jump to a repository installed by [[#straight][straight]].  an
interactive minibuffer completion menu using ivy.

#+BEGIN_SRC emacs-lisp :tangle yes
(with-eval-after-load 'ivy
  (defun goto-repo ()
    (interactive)
    (let ((repo-dir "~/.emacs.d/straight/repos/"))

      (ivy-read
       "Go to Package Directory: "
       (directory-files repo-dir)
       :action (lambda (package)
                 (let ((default-directory (concat  (file-name-as-directory repo-dir) package)))
                   (dired default-directory))))))
  ;; Add to goto-* keymap
  (define-key goto-map "r" #'goto-repo))
#+END_SRC

*** Extending the Global Keymap
**** Personal Keymap

#+NAME: personal-global-keymap
#+BEGIN_SRC emacs-lisp :tangle yes
;; Make personal keymap
(define-prefix-command 'chaffin-keymap)
(global-set-key "\M-m" 'chaffin-keymap)
#+END_SRC

**** Reload Eval Keymap
#+NAME: user-emacs-keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
;; Make `chaffin-reload-eval-keymap'
(define-prefix-command 'reload-eval-keymap)
(define-key 'chaffin-keymap "r" 'reload-eval-keymap)
(define-key 'reload-eval-keymap "i"  #'chaffin-reload-init)
(define-key 'reload-eval-keymap "b"  #'chaffin-eval-buffer)
(define-key 'reload-eval-keymap "r"  #'eval-region)
(define-key 'reload-eval-keymap "f"  #'eval-defun)
#+END_SRC

***** Restart Emacs

The [[https://github.com/iqbalansari/restart-emacs][restart-emacs]] package allows quickly rebooting Emacs
from within Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package restart-emacs
  :straight t
  :bind ((:map reload-eval-keymap
               ("q" . restart-emacs))))
#+END_SRC

**** macOS Keybindings

#+NAME: keybindings-macos
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<macos-modifier-keymap>>
<<macos-prefix-cmd>>
<<macos-mouse-2>>
#+END_SRC

****** Modifier Keys

macOS specific settings[fn:5].

Maps the modifier keys based on personal preferences.
Also sets terminal coding system to "utf-8".

#+NAME: macos-modifier-keymap
#+BEGIN_SRC emacs-lisp :tangle no
(setq mac-command-modifier 'super
      mac-option-modifier  'meta
      ns-control-modifier  'control
      ns-function-modifier 'hyper)

(when *is-mac*
  (global-set-key (kbd "s-=" ) 'text-scale-increase)
  (global-set-key (kbd "s--")  'text-scale-decrease))
#+END_SRC

****** MacOS Prefix Command

#+NAME: macos-prefix-cmd
#+BEGIN_SRC emacs-lisp :tangle no
(define-prefix-command 'macos-keymap)
(define-key 'chaffin-keymap "m" 'macos-keymap)
#+END_SRC

****** Generate =<mouse-2>= on trackpad

As far as I know, there is no trackpad gesture to trigger the
=<mouse-2>= event in Emacs. The following snippet uses
[[elisp-variable::key-translation-map][key-translation-map]] to emulate the =<mouse-2>= event when clicking
the trackpad (=<mouse-1>=) like normal while holding down Command, or
"super", modifier key 

#+NAME: macos-mouse-2
#+BEGIN_SRC emacs-lisp :tangle no
;; From https://emacs.stackexchange.com/questions/20946/generate-mouse-2-event-from-macbook-trackpadTrackpage
(when *is-mac*
  (define-key key-translation-map (kbd "<s-mouse-1>") (kbd "<mouse-2>")))
#+END_SRC

*** Default Setup
**** Garbage Collection

Consider the following from the documentation:

#+BEGIN_QUOTE
By binding this temporarily to a large number, you can effectively
prevent garbage collection during a part of the program.
#+END_QUOTE

When I first read how the default garbage collection interval in Emacs
is notoriously low, I added an arbitrary number of zeros to the
default value and called it a day. However, because I'm writing this
monolithic configuration and making a lot of mistakes in the process,
I've had to start Emacs with essentially its default settings pretty
frequently and I've noticed the lag time I occasionally experience
when searching long documents is essentially nonexistent in vanilla
Emacs. After reading this [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][blogpost]], it seems that jacking up the GC
interval may actually be the /cause/ of the lagtime rather than
contributing to the solution.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun chaffin/rev-up-gc ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun chaffin/rev-down-gc ()
  (setq gc-cons-threshold 800000))

(add-hook 'minibuffer-setup-hook #'chaffin/rev-up-gc)
(add-hook 'minibuffer-exit-hook 'chaffin/rev-down-gc)
#+END_SRC

**** Custom File

By default, Emacs customizations[fn:6] done through the =customize=
interface write to =user-init-file=.

While I usually prefer configuring emacs programmatically, settings
that depend on resources outside of this repository, such as
org-agenda files, will impact portability and potentially break on
other machines.

#+BEGIN_SRC emacs-lisp :tangle yes
(let ((custom-file-directory (file-name-as-directory
			      (concat
			       (file-name-as-directory user-emacs-directory)
			       "custom"))))
  (cond (*is-mac*
         (setq custom-file (concat custom-file-directory "custom-macos.el")))
        ((or *is-linux* *is-lnxsrv*)
         (setq custom-file (concat custom-file-directory "custom-linux.el")))
        (*is-windows*
         (setq custom-file (concat custom-file-directory "custom-windows.el")))
        (t
         (setq custom-file (concat custom-file-directory "custom.el"))))

  ;; Create custom file if it does not exist.
  (if-not (file-exists-p custom-file)
      (with-temp-buffer
        (find-file custom-file)
        (save-buffer)
        (kill-buffer)))

  (load custom-file))
#+END_SRC

**** Backup Files

This might come back to bite me one day but I never use them.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq make-backup-files nil)
#+END_SRC

**** Load Secrets

#+BEGIN_SRC emacs-lisp :tangle yes
(when (and (executable-find "gpg") *is-mac*)
  (if-not (string-empty-p
	   (shell-command-to-string
	    (concat "gpg --list-keys | grep " user-mail-address)))
      (load-library (concat user-emacs-directory "secrets/secrets.el.gpg"))
    (print (format "GPG key(s) for %s not found"
                   (or user-full-name user-mail-address)))))
#+END_SRC

*** Encryption
***** GnuTLS

As GitHub user [[https://github.com/wasamasa][wasamasa]] points out in /h?(er|is)|^\S+/ dotfiles,
[[https://gnutls.org/][GnuTLS]] throws several warnings when using the default 256 minimum
prime bits over a TLS handshake.

#+BEGIN_QUOTE
Minimum number of prime bits accepted by GnuTLS for key exchange.
During a Diffie-Hellman handshake, if the server sends a prime
number with fewer than this number of bits, the handshake is
rejected.  (The smaller the prime number, the less secure the
key exchange is against man-in-the-middle attacks.)
#+END_QUOTE


#+BEGIN_SRC emacs-lisp :tangle yes
(setq gnutls-min-prime-bits 4096)
#+END_SRC

***** Use GPG2
****** Set GPG program to 'gpg2'.

#+BEGIN_SRC emacs-lisp :tangle yes
(when *is-mac*
  (let* ((has-brew (not (string-empty-p
			 (shell-command-to-string
			  "which brew"))))
	 (gpg-path (if has-brew
		       (shell-command-to-string "brew --prefix gpg2")))
	 (has-gpg2 (if gpg-path
		       (file-exists-p (replace-regexp-in-string
				       "\n" ""
				       gpg-path)))))
    (setq epg-gpg-program (if has-gpg2 "gpg2" "gpg"))))
#+END_SRC

****** Disable External Pin Entry

Switching between Emacs and an external tools is annoying.

By default, decrypting gpg files in Emacs will result in the pin entry
window being launched from the terminal session.

By disabling the agent info, we can force Emacs to handle this
internally[fn:7].

#+BEGIN_SRC emacs-lisp :tangle yes
(setenv "GPG_AGENT_INFO" nil)
#+END_SRC

Or so I thought...

****** Internal Pinentry Problem and Solution

While I couldn't figure out how to get Emacs to handle gpg pinentry
internally, I was able to still find a satisfactory solution using the
~pinentry-mac~ tool.

Note that this solution requires macOS and using gpg2 for encryption.

See ticket [[https://github.com/Homebrew/homebrew-core/issues/14737][#1437]] from the [[https://github.com/Homebrew/homebrew-core][Homebrew/homebrew-core]] repository.

#+BEGIN_EXAMPLE sh
brew install pinentry-mac
echo "pinentry-program /usr/local/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
killall gpg-agent
#+END_EXAMPLE

**** Ignore Extensions

#+BEGIN_SRC emacs-lisp :tangle yes
(append completion-ignored-extensions 
        '("o" "~" ".lbin" ".so" ".a"
          ".git/" ".hg/" ".svn" ".svn-base"))
#+END_SRC

*** Alias Yes Or No

#+NAME: yes-or-no-p
#+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** System
*** Use Emacs terminfo

Setting this variable to nil forces Emacs to use internal terminfo,
rather than the system terminfo.

I'm setting it to non-nil because setting this variable to nil causes
issues with build commands in [[#gradle-mode][gradle-mode]]

#+BEGIN_SRC emacs-lisp :tangle yes
(setq system-uses-terminfo t)
#+END_SRC

*** UTF-8 Encoding

UTF-8 is the recommanded coding system on macOS.

#+BEGIN_SRC emacs-lisp :tangle yes
(when *is-mac*
  (set-terminal-coding-system 'utf-8)
  (prefer-coding-system 'utf-8))
#+END_SRC

*** Pickup environment variables

Emacs relies heavily on shell environment variables.

These variables may not be picked up when launching emacs
from a gui on a unix-like operating system.

The [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] package fixes this problem by copying
user environment variables from the shell.

The ~exec-path-from-shell~ package only works with posix-compliant
operating systems. This may or may not include Microsoft Windows[fn:8].

However, the ~exec-path-from-shell~ instructions recommends loading
the package on linux and macOS operating system. I don't use Windows
all that often anyways, so that's fine with me.

The ~:if~ key of ~use-package~ offers us a really concise way for
conditionally loading dependencies.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
  ;; only load `exec-path-from-shell' package on macos and linux.
  :if (memq window-system '(mac ns))
  :straight t
  :config
  (progn
    (exec-path-from-shell-initialize)
    (setq exec-path-from-shell-check-startup-files nil)))
#+END_SRC

*** System Packages

Utilities for managing system packages in Emacs using an external
package manager.

#+NAME: os-sys-packages
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package system-packages
  :straight t
  :config
  (when *is-mac*
    (setq system-packages-package-manager "brew")))
#+END_SRC

*** Prodigy

Interface for controlling external processes in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package prodigy
  :straight t)
#+END_SRC

** macOS

I work on a macbook, so this section is where I'm loading all of my
settings that rely on local file paths, macOS applications, and
external programs.

#+NAME: macos-config
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none

;; MacOS noweb block
(progn
  ;; macos computer name
  <<macos-computer-name>>

  ;; macos finder
  <<macos-finder-config>>

  ;; custom dash commands
  <<macos-dash-config>>

  ;; macos-dev-utils
  <<macos-dev-utils>>

  ;; osx-dictionary
  <<macos-dictionary>>

  ;; osx-trash
  <<macos-trash>>

  ;; osx-app
  <<macos-counsel-osx-app>>)
#+END_SRC

**** MacOS Computer Name

#+NAME: macos-computer-name
#+BEGIN_SRC emacs-lisp :tangle no
(defun chaffin/computer-name-cmd ()
  (let* ((has-scutil (executable-find "scutil"))
	       (scutil-cmd (lambda () (shell-command-to-string "scutil --get ComputerName"))))
    (if has-scutil
	      (replace-regexp-in-string "\n" "" (funcall scutil-cmd))
      nil)))

(defvar computer-name nil)


(when *is-mac*
  (setq computer-name (chaffin/computer-name-cmd))
  (defconst *is-hal* (string= computer-name "hal")))
#+END_SRC

**** MacOS Dev Utils

Small library for opening files and buffers in external text
editors and various other applications on macOS.

#+NAME: macos-dev-utils
#+BEGIN_SRC emacs-lisp :tangle no
(use-package macos-dev-utils
  :straight
  (macos-dev-utils
   :host github
   :repo "jchaffin/macos-dev-utils")
  :demand t
  :config
  (progn
    (define-prefix-command 'macos-open-with-keymap)
    (define-prefix-command 'macos-iterm-keymap)
    (define-key 'macos-keymap "o" 'macos-open-with-keymap)
    (define-key 'macos-keymap "t" 'macos-iterm-keymap)
    ;; macos-open-with keybindings
    (define-key 'macos-open-with-keymap "o" 'macos-open-with-default-app)
    (define-key 'macos-open-with-keymap "s" 'open-with-sublime-text)
    (define-key 'macos-open-with-keymap "a" 'open-with-atom)
    (define-key 'macos-open-with-keymap "v" 'open-with-vscode)
    (define-key 'macos-open-with-keymap "b" 'open-with-bbedit)
    (define-key 'macos-open-with-keymap "c" 'open-with-coda)
    (define-key 'macos-open-with-keymap "t" 'open-with-tower)
    ;; macos-iterm keymap
    (define-key 'macos-iterm-keymap "g" 'iterm-goto-filedir-or-home)
    (define-key 'macos-iterm-keymap "f" 'iterm-focus)
    (define-key 'macos-iterm-keymap "s" 'iterm-shell-command)))
#+END_SRC

**** MacOS Dash
:PROPERTIES:
:ID:       64240356-D983-4422-A359-4F773DD2E946
:CUSTOM_ID: macos-dash
:END:

Dash.app is an application for quickly searching and navigating API
docsets for programming tools and languages.
There are already two Emacs plugins that utilize Dash docsets,
helm-dash and counsel-dash, which is a simple wrapper around helm
dash.

For whatever reason, I can't figure out how to open the docset in an
=eww= frame or in an external browser using =browse-url=.

Because of the OS/licensing restrictions of Dash.app, both these
packages try to solve the problem of creating an interface for users
to navigate, query, and switch between docsets.

Because I've purchased a license and run macOS locally, I'm going to
bypass that problem and define a function that uses the
=dash-plugin://= protocol to launch/switch to the application and
query it with the marked region or symbol at point.

#+NAME: macos-dash-config
#+BEGIN_SRC emacs-lisp :tangle no
(defvar dash-plugin-keywords nil
  "An `alist' of keywords representing the docsets which should
  searched in the query to Dash.app")

(defun macos-dash-at-point ()
  (interactive)
  (let* ((protocol "dash-plugin://")
         (keywords (if dash-plugin-keywords
                       (mapconcat 'identity dash-plugin-keywords ",")
                     "")))
    (browse-url
     (concat
      protocol
      (unless (string-empty-p keywords)
        (concat "keys=" keywords "&"))
      "query="
      (if (use-region-p)
          (buffer-substring-no-properties
           (region-beginning)
           (region-end))
        (substring-no-properties (or (thing-at-point 'symbol) "")))))))
#+END_SRC

**** Reveal in macOS Finder

#+NAME: macos-finder-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package reveal-in-osx-finder
  :straight t
  :if *is-mac*
  :commands (reveal-in-osx-finder)
  :init
  (progn
    (define-key 'macos-keymap "f" #'reveal-in-osx-finder)))
#+END_SRC

**** OSX Dictionary

Provides an interface to /Dictionary.app/ in Emacs. I am using this
package in conjunction with [[#dictionary-el][dictionary.el]] right now. The latter
package uses an open-source dictionary server to access
dictionaries. I haven't tested it on a different OS yet, but it should
provide comparable functionality to [[https://github.com/xuchunyang/osx-dictionary.el][osx-dictionary.el]] on machines not
running macOS.

#+NAME: macos-dictionary
#+BEGIN_SRC emacs-lisp :tangle no
(use-package osx-dictionary
  :straight t
  :if *is-mac*
  :defines (osx-dictionary-open-dictionary-app-at-point)
  :commands (osx-dictionary-search-word-at-point
             osx-dictionary-search-input)
  :init
  (progn
    (defun osx-dictionary-open-dictionary-app-at-point ()
      (interactive)
      "Open `word' at point in Dictionary.app."
      (shell-command (format "open dict://%s" (thing-at-point 'word))))
    (define-prefix-command 'osx-dictionary-keymap)
    (define-key 'macos-keymap "d" 'osx-dictionary-keymap)
    (define-key 'osx-dictionary-keymap "d" 'osx-dictionary-search-word-at-point)
    (define-key 'osx-dictionary-keymap "s" 'osx-dictionary-search-input)
    (define-key 'osx-dictionary-keymap "o" 'osx-dictionary-open-dictionary-app-at-point)))
#+END_SRC

**** OSX Trash

#+NAME: macos-trash
#+BEGIN_SRC emacs-lisp :tangle no
(use-package osx-trash
  :straight t
  :if (and *is-mac* (not (boundp 'mac-system-move-file-to-trash-use-finder)))
  :init
  (progn
    (osx-trash-setup))
  :config
  (progn
    (setq delete-by-moving-to-trash t)))
#+END_SRC

**** Counsel OSX App

 #+NAME: macos-counsel-osx-app
 #+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-osx-app
  :straight t
  :if *is-mac*
  :after (:all ivy counsel)
  :commands (counsel-osx-app)
  :config
  (progn
    (define-key 'macos-keymap "a" 'counsel-osx-app)))

 #+END_SRC

* LaTeX and Org Mode
** LaTeX
:PROPERTIES:
:ID:       C2BC6BE6-0295-4540-8E6F-9C8620FCBE0B
:CUSTOM_ID: latex
:END:

Note that this the code blocks in the [[#latex][LaTeX]] section are tangled in the
[[#org-mode-export][export]] code block, at which point the described packages will be
loaded if the =latex= symbol is an element in the 
[[#user-enable-backends][org-export-enabled-backends]] variable.

#+NAME: latex-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; Tex
<<latex-tex>>

;; Tex Site


;; Reftex
<<latex-reftex>>

;; Bibtex
<<latex-bibtex>>

;; Company backend for latex completion
<<latex-company-auctex>>

;; Prettify latex buffers
<<latex-magic-latex-buffer>>

;; Extra latex utilities
<<latex-latex-extra>>

;; Cdlatex
<<latex-cdlatex>>

;; Auctex Latexmk
<<latex-auctex-latexmk>>

;; Latex Preview
<<laetx-latex-preview>>

;; Texinfo mode
<<latex-texinfo>>
#+END_SRC

Note that LaTeX packages are loaded, configured, and installed when
='latex= is a member of =org-export-enabled-backends=.

*** Tex

#+NAME: latex-tex
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no
  (use-package tex
    :straight auctex
    :demand t
    :init
    (progn
      
      (defvar latex-build-command
        (if (executable-find "latexmk")
            "LatexMk"
          "LaTeX"))
      
      (setq TeX-command-default latex-build-command))
    :config
    (progn
      (setq TeX-auto-save t
            TeX-parse-self t
            TeX-syntactic-comment t
            ;; Synctex support
            TeX-source-correlate-start-server t
            ;; Don't insert line-break at inline math
            LaTeX-fill-break-at-separators nil)


      (defvar latex-nofill-env '("equation"
                                 "equation*"
                                 "align"
                                 "align*"
                                 "forest"
                                 "tabular"
                                 "tikzpicture"))

      (defun chaffin--tex-autofill ()
        "Check whether the pointer is currently inside one of
         the environments in `latex-nofill-env` and inhibits auto-filling
         of the current paragraph."
        (let ((do-auto-fill t)
              (current-environment "")
              (level 0))
          (while (and do-auto-fill
                      (not (string= current-environment "document")))
            (setq level (1+ level)
                  current-environment (LaTeX-current-environment level)
                  do-auto-fill
                  (not (member current-environment latex-nofill-env)))))
        (when do-auto-fill
          (do-auto-fill)))

      (defun tex-auto-fill-mode ()
        (interactive)
        (auto-fill-mode)
        (setq auto-fill-mode 'chaffin--tex-autofill))

      (add-hook 'LaTeX-mode-hook 'tex-auto-fill-mode)
      (add-hook 'LateX-mode-hook 'latex-mode-hook)
      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
      (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
      (add-hook 'LaTeX-mode-hook 'smartparens-mode)))
#+END_SRC

*** Tex site

#+NAME: latex-tex-site
#+BEGIN_SRC emacs-lisp :tangle no
(use-package tex-site
  :straight auctex)
#+END_SRC

*** RefTeX


RefTeX is a citation and reference tool maintained by the
AucTeX team.

Since Emacs 24.3, its built in with the Emacs distribution.

#+NAME: latex-reftex
#+BEGIN_SRC emacs-lisp :tangle no
(defun chaffin--latex-reftex-hook ()
  (turn-on-reftex)
  (setq reftex-plug-into-AUCTeX '(nil nil t t t)
        reftex-use-fonts t
        reftex-default-bibliography '("~/Dropbox/org/papers/references.bib")))

(add-hook 'LaTeX-mode-hook 'chaffin-latex-reftex-hook)
#+END_SRC

*** BibTex

BibTeX mode is built-in with GNU Emacs. Like /super/ built-in. This is
from the author of the online BibTeX mode manual[fn:9]:

#+BEGIN_QUOTE
I am not the author of this file and am only putting it online because, to my knowledge, it is not available anywhere else anymore and I find it a very valuable reference.  I haven't been able to find out who the current maintainer of the BibTex-Mode for GNU emacs is, but am willing to withdraw this text or add any copyright notice that would be deemed relevant.
#+END_QUOTE 

That was from 2009... 

These are the recommended settings in the [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org#bibtex-key-format][org-ref]] documentation.

#+NAME: latex-bibtex
#+BEGIN_SRC emacs-lisp :tangle no
(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)
#+END_SRC

*** LaTeX Extra

#+NAME: latex-latex-extra
#+BEGIN_SRC emacs-lisp :tangle no
;; See [1] https://github/Malabarba/latex-extra/issues/23
(let ((byte-compile-warnings '(not free-vars)))
  (use-package latex-extra
    :straight t
    :config
    (add-hook 'LaTeX-mode-hook 'latex-extra-mode)))
#+END_SRC

*** LaTeX Preview Pane

Not tangling right now because it's creating a new buffer after every
save.

#+NAME: latex-latex-preview-pane
#+BEGIN_SRC emacs-lisp :tangle no
(use-package latex-preview-pane
  :straight t
  :config
  (latex-preview-pane-enable))

(add-hook 'doc-view-mode-hook 'auto-revert-mode)
#+END_SRC

*** Company AucTeX

#+NAME: latex-company-auctex
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-auctex
  :straight t
  :demand t
  :after (:all company tex)
  :init
  (company-auctex-init))
#+END_SRC

*** cdlatex

#+NAME: latex-cdlatex
#+BEGIN_SRC emacs-lisp :tangle no
(use-package cdlatex
  :straight t
  :config
  (progn
    ;; Disable auto label insertion in expanded template.
    ;; Labels conflict when used in conjunction with `org-ref'
    (setq cdlatex-insert-auto-labels-in-env-templates nil)
    ;; with AucTeX LaTeX mode
    (add-hook 'LaTeX-mode-hook
              'turn-on-cdlatex)
    ;; with Emacs latex mode
    (add-hook 'latex-mode-hook
              'turn-on-cdlatex)))
#+END_SRC

*** Magic Latex Buffer

Prettify dedicated org-mode latex buffers.

#+NAME: latex-magic-latex-buffer
#+BEGIN_SRC emacs-lisp :tangle no
(use-package magic-latex-buffer
  :straight t
  :demand t
  :init
  (add-hook 'LaTeX-mode-hook 'magic-latex-buffer)
  :config
  (setq magic-latex-enable-block-highlight t
        magic-latex-enable-suscript t
        magic-latex-enable-pretty-symbols t
        magic-latex-enable-block-align nil
        magic-latex-enable-inline-image nil))
#+END_SRC

*** Auctex Latexmk

#+NAME: latex-auctex-latexmk
#+BEGIN_SRC emacs-lisp :tangle no
(use-package auctex-latexmk
  :straight t
  :after (tex)
  :demand t
  :config
  (progn
    (auctex-latexmk-setup)))

#+END_SRC

*** Texinfo

#+NAME: latex-texinfo
#+BEGIN_SRC emacs-lisp :tangle no
(use-package texinfo
  :straight t
  :defines texinfo-section-list
  :commands texinfo-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.texi$" . texinfo-mode)))
#+END_SRC

** Org Mode

#+NAME: org-mode-settings
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(with-eval-after-load 'org
  <<org-ob>>
  <<org-ui>>
  <<org-docmgr>>
  <<org-taskmgr>>
  <<org-ideamgr>>
  <<org-export>>
)
#+END_SRC

*** Org Babel

#+NAME: org-ob
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-ob-http>>
<<org-ob-cljs>>
<<org-ob-load-langs>>
#+END_SRC

**** Ob Http

#+NAME: org-ob-http
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ob-http
  :straight t
  :after (ob)
  :demand t)
#+END_SRC

**** Ob ClojureScript


[[https://github.com/emacsmirror/ob-clojurescript][ob-clojurescript]] uses [[https://github.com/anmonteiro/lumo][lumo]] to evaluate ClojureScript code blocks in
=org-mode= buffers.

#+NAME: org-ob-cljs
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ob-clojurescript
  :if (executable-find "lumo")
  :straight t
  :after (ob)
  :demand t)
#+END_SRC

**** Load Languages

#+NAME: org-ob-load-langs
#+BEGIN_SRC emacs-lisp :tangle no
 (org-babel-do-load-languages
  'org-babel-load-languages
  '((C . t)
    (clojure . t)
    (clojurescript . t)
    (dot . t)
    (ditaa . t)
    (latex . t)
    (http . t)
    (perl . t)
    (python . t)
    (plantuml . t)
    (java . t)
    (ruby . t)
    (R . t)
    (shell . t)
    (org . t)))
#+END_SRC

*** Org Mode UI

These settings subjectively improve the overall viewable-ness of
org-mode buffers.

#+NAME: org-ui
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; UI Wrap Text Block 
<<org-ui-wraptext>>

;; UI Fixed Width Block
<<org-ui-fixedwidth-image>>

;; UI Org Bullets
<<org-ui-org-bullets>>

;; UI Toc Org
<<org-ui-toc-org>>

;; UI Column View
<<org-ui-column-view>>

;; UI Equation Renumbering
<<org-ui-equation-renumbering>>

#+END_SRC

**** Wrap Text 

#+NAME: org-ui-wraptext
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook #'org-mode-hook (lambda ()
                              (auto-fill-mode)
                              (visual-line-mode)))
#+END_SRC

**** Per-image display width

Specify image width in org buffer on per-image basis.

#+NAME: org-ui-fixedwidth-image
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-image-actual-width nil)
#+END_SRC

**** Org Bullets

Inspired by this [[http://nadeausoftware.com/articles/2007/11/latency_friendly_customized_bullets_using_unicode_characters][article]] on creating latency-friendly unicode bullets,
the [[https://github.com/sabof/org-bullets][org-bullets]] library provides support for displaying org-mode
bullets as UTF-8 characters.

- The default set ::  ◉ ○ ✸ ✿
- Smaller set :: ► • ★ ▸
- Alternative options :: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶

The default set of bullet points can be modified via the
=[[help:org-bullets-bullet-list][org-bullets-bullet-list]]= variable.


#+NAME: org-ui-org-bullets
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-bullets
  :straight t
  :demand t
  :config
  (progn
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode +1)))))
#+END_SRC

**** TOC Org

The [[https://github.com/snosov1/toc-org][toc-org]] package automatically generates a table of contents for
the org-mode document on save.

The org header represented by a TOC entry can be visited via the
=org-open-at-point= command, which is bound to the keystroke =C-c C-o=
by default.

Note that this functionality is provided by =toc-org= modifying the
value of =org-link-translation-function= to the library internal
=toc-org-unhrefify=, so it won't work if this symbol is non-nil at
time of install.

#+NAME: org-ui-toc-org
#+BEGIN_SRC emacs-lisp :tangle no
(use-package toc-org
  :straight t
  :init
  (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

**** Column View

#+NAME: org-ui-column-view
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
#+END_SRC

**** Equation Renumbering

Anotha [[http://kitchingroup.cheme.cmu.edu/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode/][one]] from the kitchin group!

#+NAME: org-ui-equation-renumbering
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-renumber-environment (orig-func &rest args)
  (let ((results '()) 
        (counter -1)
        (numberp))

    (setq results (loop for (begin .  env) in 
                        (org-element-map (org-element-parse-buffer) 'latex-environment
                          (lambda (env)
                            (cons
                             (org-element-property :begin env)
                             (org-element-property :value env))))
                        collect
                        (cond
                         ((and (string-match "\\\\begin{equation}" env)
                               (not (string-match "\\\\tag{" env)))
                          (incf counter)
                          (cons begin counter))
                         ((string-match "\\\\begin{align}" env)
                          (prog2
                              (incf counter)
                              (cons begin counter)                          
                            (with-temp-buffer
                              (insert env)
                              (goto-char (point-min))
                              ;; \\ is used for a new line. Each one leads to a number
                              (incf counter (count-matches "\\\\$"))
                              ;; unless there are nonumbers.
                              (goto-char (point-min))
                              (decf counter (count-matches "\\nonumber")))))
                         (t
                          (cons begin nil)))))

    (when (setq numberp (cdr (assoc (point) results)))
      (setf (car args)
            (concat
             (format "\\setcounter{equation}{%s}\n" numberp)
             (car args)))))
  
  (apply orig-func args))

;; (advice-add 'org-create-formula-image :around #'org-renumber-environment)

#+END_SRC

**** Org radiobutton

The [[https://github.com/Fuco1/org-radiobutton][org-radiobutton]] package a minor mode which automates the property
requirements for radiobutton lists.

See this [[https://fuco1.github.io/2018-03-11-Use-org-radiobutton-to-select-an-option-from-a-list.html][blogpost]] for more information.

#+NAME: org-ui-radiobutton
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-radiobutton
  :straight t
  :init
  (when (fboundp global-org-radiobutton-mode)
    (global-org-radiobutton-mode)))
#+END_SRC

*** Document Management

#+NAME: org-docmgr
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-docmgr-capture>>
<<org-docmgr-journal>>
<<org-docmgr-id>>
<<org-docmgr-download>>
<<org-docmgr-links>>
<<org-docmgr-links>>
#+END_SRC

**** Org Capture

#+NAME: org-docmgr-capture
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-capture-templates>>
<<org-capture-html>>
<<org-capture-contacts>>
#+END_SRC

#+NAME: org-capture-templates
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Dropbox/org/todos/TODOs.org" "Tasks")
         "* TODO %?\n %i\n %a")))

(defvar chaffin:created-property-string "
  :PROPERTIES:
  :CREATED: %U
  :END:")
#+END_SRC

***** Org Protocol Capture HTML

#+NAME: org-capture-html
#+BEGIN_SRC emacs-lisp :tangle no
(straight-use-package
 `(org-protocol-capture-html
   :host github
   :repo "alphapapa/org-protocol-capture-html"
   :local-repo-name org-protocol-capture-html))

(use-package org-protocol-capture-html
  :straight t
  :after (org-capture)
  :init
  (progn
    (add-to-list 'org-capture-templates
                 '("w" "Web site" entry
                   (file "")
                   "* %a :website:\n\n%U %?\n\n%:initial")))
  :config
  (setq opch-shell-script-path  (expand-file-name "bin/org-protocol-capture-html.sh" user-emacs-directory))
  (defun opch-install-shell-script ()
    (interactive)
    (if-not (file-exists-p opch-shell-script-path)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/alphapapa/org-protocol-capture-html/master/org-protocol-capture-html.sh"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (when (re-search-backward "^\\#!/bin/bash" (point-min) t)
            (write-region (point) (point-max) opch-shell-script-path)
            (set-file-modes opch-shell-script-path #o755)
            (message "Installed to %s" opch-shell-script-path))))))

#+END_SRC

***** Org Contacts

#+NAME: org-capture-contacts
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-contacts
  :straight org
  :config
  (push '("c" "Contacts" entry (file "~/Dropbox/org/contacts.org")
           "* %(org-contacts-template-name)
              :PROPERTIES:
              :EMAIL: %(org-contacts-template-email)
              :END:")
        org-capture-templates))
#+END_SRC

**** Org Journal

#+NAME: org-docmgr-journal
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-journal
  :straight t
  :if *is-mac*
  :bind
  (("M-m j" . org-journal-new-entry))
  :config
  (progn
    (setq org-journal-dir (concat (file-name-as-directory org-directory) "journal")
          org-journal-date-prefix "#+TITLE: "
          org-journal-date-format "%A, %B %d %Y"
          org-journal-time-prefix "* "
          org-journal-time-format "")
    (push '("j" "Journal" entry 
            (file+olp+datetree "~/Dropbox/org/journal.org")
            "* %?\nEntered on %U\n %i\n %a")
          org-capture-templates)))
#+END_SRC

**** Org ID

#+NAME: org-docmgr-id
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no :exports none
<<org-id-create-custom>>
<<org-id-custom-id>>
#+END_SRC

#+NAME: org-id-create-custom
#+BEGIN_SRC emacs-lisp :tangle no

(require 'org-id)
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

#+END_SRC

***** Custom ID

Functions shamelessly taken from Lee Hinman's [[https://writequit.org/articles/emacs-org-mode-generate-ids.html][blogpost]] on generating
custom org heading ids.


#+NAME:  org-id-custom-id
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no :exports none
<<org-id-get-custom>>
<<org-id-headline-ids>>
#+END_SRC


****** Get Custom ID

From [[https://writequit.org/articles/emacs-org-mode-generate-ids.html][Emacs Org Mode Generate Ids]] blogpost:

#+NAME: org-id-get-custom
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-custom-id-get (&optional pom create prefix)
  "Get the CUSTOM_ID property of the entry at point-or-marker POM.
   If POM is nil, refer to the entry at point. If the entry does
   not have an CUSTOM_ID, the function returns nil. However, when
   CREATE is non nil, create a CUSTOM_ID if none is present
   already. PREFIX will be passed through to `org-id-new'. In any
   case, the CUSTOM_ID of the entry is returned."
  (interactive)
  (org-with-point-at pom
    (let ((id (org-entry-get nil "CUSTOM_ID")))
      (cond
       ((and id (stringp id) (string-match "\\S-" id))
        id)
       (create
        (setq id (org-id-new (concat prefix "h")))
        (org-entry-put pom "CUSTOM_ID" id)
        (org-id-add-location id (buffer-file-name (buffer-base id))))))))
#+END_SRC

***** Add IDs to Headlines in file

#+NAME: org-id-headline-ids
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-add-ids-to-headlines-in-file ()
  "Add CUSTOM_ID properties to all headlines in the current
  file which do not already have one. Only adds ids if the `auto-id' option is set a non-nil value in the file.

  i.e `#+OPTIONS: auto-id:t`"

  (interactive)
  (save-excursion
    (widen)
    (goto-char (point-min))
    (when (re-search-forward "^\\#+OPTIONS:.*auto-id:t"  (point-max)  t)
      (org-map-entries
       (lambda ()
         (org-custom-id-get (point) 'create))))))

(add-hook 'org-mode-hook
	  (lambda ()
	    (add-hook 'before-save-hook
                (lambda ()
                  (when (and (eq major-mode 'org-mode)
                             (eq buffer-read-only nil))
                    (org-add-ids-to-headlines-in-file))))))
#+END_SRC

**** Org Download

Drag and Drop images directly from a web browser to an org-mode buffer. 

#+NAME: org-docmgr-download
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-download
  :straight t
  :defines (org-download-image-dir)
  :commands (org-download-enable  org-download-yank org-download-screenshot)
  :init
  (progn
    (when *is-mac*
      (setq-default org-download-image-dir "~/Dropbox/org/img/"))
    (add-hook  'org-mode-hook 'org-download-enable)
    (add-hook 'dired-mode-hook 'org-download-enable)))
#+END_SRC

**** Org Links

#+NAME: org-docmgr-links
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-links-youtube>>
<<org-links-manpage>>
<<org-links-mac>>
<<org-links-cliplink>>
<<org-links-elisp-help>>
#+END_SRC

***** Org Man

#+NAME: org-links-manpage
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package org-man
  :straight org)
#+END_SRC

***** Org Elisp Help Links

#+NAME: org-links-elisp-help
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-elisp-help
  :straight t)
#+END_SRC

***** Org Mac Link

#+NAME: org-links-mac
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-mac-link
  :straight org)
#+END_SRC

***** Org Cliplink

Insert org links from the system clipboard.

#+NAME: org-links-cliplink
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-cliplink
  :straight t
  :bind (("C-x p i" . org-cliplink)))
#+END_SRC

***** Org YouTube

From [[http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html][Endless Parentheses]] blogpost:

Embed YouTube Links in iframe.

#+NAME: org-links-youtube
#+BEGIN_SRC emacs-lisp :tangle no
(defvar yt-iframe-format
  ;; You may want to change your width and height.
  (concat "<iframe width=\"440\""
          " height=\"335\""
          " src=\"https://www.youtube.com/embed/%s\""
          " frameborder=\"0\""
          " allowfullscreen>%s</iframe>"))

(org-add-link-type
 "yt"
 (lambda (handle)
   (browse-url
    (concat "https://www.youtube.com/embed/"
            handle)))
 (lambda (path desc backend)
   (cl-case backend
     (html (format yt-iframe-format
                   path (or desc "")))
     (latex (format "\href{%s}{%s}"
                    path (or desc "video"))))))
#+END_SRC


*** Task Management

#+NAME: org-taskmgr
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-taskmgr-agenda>>
<<org-taskmgr-projectile>>
<<org-taskmgr-pomodoro>>
<<org-taskmgr-gcal>>
<<org-taskmgr-coclock>>
<<org-taskmgr-mru-clock>>
#+END_SRC

**** Org Agenda

#+NAME: org-taskmgr-agenda
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-agenda-diary>>
<<org-agenda-global-todos>>
#+END_SRC

***** Global Agenda File

I use per-project agenda files for the most part (now being managed
using [[#org-projectile][org-projectile]]), but I like having a designated global one for
miscellaneous or arbitrary tasks.

#+NAME: org-agenda-global-todos
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-files '("/Users/jacobchaffin/Dropbox/org/todos/TODOs.org"))
#+END_SRC

***** Diary

#+NAME: org-agenda-diary
#+BEGIN_SRC emacs-lisp :tangle no
(setq diary-file "~/Dropbox/org/diary.org")
#+END_SRC

**** Org Projectile
:PROPERTIES:
:ID:       D469E868-7FCB-45FD-AB3E-609018F4BC58
:CUSTOM_ID: org-projectile
:END:

#+NAME: org-taskmgr-projectile
#+BEGIN_SRC emacs-lisp :tangle no 
(use-package org-projectile
  :straight t
  :after (projectile)
  :commands (org-projectile-files-to-agenda)
  :demand t
  :init
  (progn
    (defun org-projectile-files-to-agenda ()
      "Add org-projectile project files to org-agenda."
      (interactive)
      (let* ((todo-filepath (or (bound-and-true-p org-projectile-per-project-filepath) "org/TODOs.org"))
             (active-projects
              (seq-filter (lambda (proj)
                            (file-exists-p
                             (expand-file-name todo-filepath proj)))
                          projectile-known-projects))
             (project-agenda-files (mapcar (lambda (proj)
                                             (expand-file-name todo-filepath proj))
                                           active-projects)))
        (setq org-agenda-files (append org-agenda-files project-agenda-files))))
    (org-projectile-files-to-agenda))
  :config
  (progn
    (setq org-projectile-per-project-filepath "org/TODOs.org")
    (org-projectile-per-project)
    (setq org-projectile-capture-template
          (format "%s%s" "** TODO %?" chaffin:created-property-string))
    (add-to-list 'org-capture-templates
                 (org-projectile-project-todo-entry
                  :capture-character "l"
                  :capture-heading "Linked Project TODO"))
    (add-to-list 'org-capture-templates
                 (org-projectile-project-todo-entry
                  :capture-character "p"))

    (setq org-confirm-elisp-link-function nil)
    (global-set-key (kbd "C-c p n") 'org-projectile-project-todo-completing-read)))

#+END_SRC

**** Org Pomodoro
:PROPERTIES:
:ID:       3600535E-2C20-4E33-8572-E933319E87B3
:CUSTOM_ID: org-pomodoro
:END:

#+NAME: org-taskmgr-pomodoro
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-pomodoro
  :straight t
  :bind (:map org-mode-map
              ("C-c M-RET p" . org-pomodoro))
  :config
  (progn
    (defalias #'org-pomodoro-path
      (apply-partially #'emacs-directory-resolve-path "resources" "wav"))

    (setq org-pomodoro-audio-player "/usr/bin/afplay"
          org-pomodoro-tick-sound (org-pomodoro-path "clock-ticking-2.wav")
          ;; Start Settings
          org-pomodoro-start-sound-p t ;; enable starting sound
          org-pomodoro-start-sound-args "--volume 0.08"
          org-pomodoro-start-sound (org-pomodoro-path "Victory.wav")
        ;; Finished Settings
          org-pomodoro-finished-sound-args "--volume 0.2"
          org-pomodoro-finished-sound (org-pomodoro-path "Waves.wav")
          ;; Short Break Settings
          org-pomodoro-short-break-length 5
          org-pomodoro-short-break-sound-args "--volume 0.2"
          org-pomodoro-short-break-sound org-pomodoro-finished-sound
          ;; Long Break Settings
          org-pomodoro-long-break-length 15
          org-pomodoro-long-break-sound-args "--volume 0.2"
          org-pomodoro-long-break-sound (org-pomodoro-path "Complete.wav"))))
#+END_SRC

**** Org Google Calendar

The [[https://github.com/myuhe/org-gcal.el][org-gcal]] package provides org-mode integration with Google
Calendar.

#+NAME: org-taskmgr-gcal
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-gcal
  :straight t
  :config
  (progn
    (setq org-gcal-file-alist 
          '(("8u01m20o80k2ja1lpp93qa3u98@group.calendar.google.com" . "~/Dropbox/Documents/Courses/cs180/org/cs180-gcal.org")
            ("jchaffin@g.ucla.edu" . "~/Dropbox/org/todos/TODOS.gcal.org")))))
#+END_SRC

**** Counsel Org Clock

#+NAME: org-taskmgr-coclock
#+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-org-clock
  :straight (:host github
                   :repo "akirak/counsel-org-clock")
  :after (:all org-agenda ivy))
#+END_SRC

**** Org Mru Clock

The [[https://github.com/unhammer/org-mru-clock][org-mru-clock]] package prefills clock history with clocks from
org agenda files. 

#+NAME: org-taskmgr-mru-clock
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-mru-clock
  :straight t
  :after (:all org-agenda ivy)
  :demand t
  :bind (("C-c C-x i" . org-mru-clock-in)
         ("C-c C-x C-j" . org-mru-clock-select-recent-task))
  :init
  (progn
    (setq org-mru-clock-how-many 50
          org-mru-completing-read #'ivy-completing-read)))
#+END_SRC

Check out this [[http://mbork.pl/2018-04-28_org-mru-clock][article]] for how these two packages compare.[fn:10].

*** Idea Management

#+NAME: org-ideamgr
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-ideamgr-brain>>
<<org-ideamgr-drill>>
#+END_SRC

**** Org Brain

#+NAME: org-ideamgr-brain
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-brain
  :straight t
  :if *is-mac*
  :defines (org-brain-path)
  :init
  (setq org-brain-path (concat (file-name-as-directory org-directory) "brain"))
  :config
  (progn
    (setq org-id-track-globally t
          org-id-locations-file "~/.emacs.d/.org-id-locations"
          org-brain-visualize-default-choices 'all
          org-brain-title-max-length 12)
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?" :empty-lines 1)
          org-capture-templates)))
#+END_SRC

**** Org Drill

#+NAME: org-ideamgr-drill
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-drill
  :straight org)
#+END_SRC

** Org LaTeX

#+NAME: org-latex-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-latex-editing>>
<<org-latex-org-ref>>
<<org-latex-pdf>>
#+END_SRC

*** LaTeX in Org Buffers

#+NAME: org-latex-editing
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-latex-edit-latex>>
<<org-latex-highlight-tex>>
#+END_SRC

*** Edit Latex

#+NAME: org-latex-edit-latex
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-edit-latex
  :straight t)
#+END_SRC

*** Highlight inline LaTeX fragments

#+NAME: org-latex-highlight-tex
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-highlight-latex-and-related '(latex))
#+END_SRC

*** Org Ref
:PROPERTIES:
:ID:       1038C1B0-F5E1-4246-A360-B29BFBA82AC2
:CUSTOM_ID: org-ref
:END:

#+NAME: org-latex-org-ref
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; Org Ref
<<org-ref-config>>

(with-eval-after-load 'org-ref
  ;; Org ref vref
  <<org-ref-vref>>

  ;; Org ref pdf
  <<org-ref-pdf>>
)
#+END_SRC

#+NAME: org-ref-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-ref
  :if *is-mac*
  :after (ivy)
  :demand t
  :straight t
  :init
  (progn
    ;; https://github.com/jkitchin/org-ref/issues/428
    (require 'doi-utils)
    (require 'org-id)
    (require 'org-ref-wos)
    (require 'org-ref-scopus)
    (require 'org-ref-isbn)
    (require 'org-ref-pubmed)
    (require 'org-ref-arxiv)
    (require 'org-ref-sci-id)
    (require 'x2bib)
    (require 'org-ref-latex)
    (require 'org-ref-pdf))
  :config
  (progn
    (setq org-ref-completion-library 'org-ref-ivy-cite)
    
    (setq reftex-default-bibliography '("~/Dropbox/org/ref/references.bib"))
    
    (setq org-ref-default-bibliography '("~/Dropbox/org/ref/references.bib")
          org-ref-bibliography-notes "~/Dropbox/org/ref/refnotes.org"
          org-ref-pdf-directory "~/Dropbox/org/papers/pdfs/"
          org-ref-show-citation-on-enter t
          org-ref-show-broken-links t)
    
    ;; Org Ref Journal abbreviations
    (setq orbj-extra-abbrevs
      '(("JPS" "Journal of Palestinian Studies")
        ("JHG" "Journal of Historical Geography")
        ("MEAST" "International Journal of Middle East Studies")))

    (dolist (elt orbj-extra-abbrevs)
      (add-to-list 'org-ref-bibtex-journal-abbreviations elt))))

#+END_SRC

**** Support =vref= links

#+NAME: org-ref-vref
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-ref-vref-export (keyword desc format)
  "An export function for vref links."
  (cond
   ((eq format 'html)
    (format "<a href=\"#%s\">%s</a>" keyword (or desc keyword)))
   ((eq format 'latex) (format "\\vref{%s}" keyword))))


(org-ref-link-set-parameters "vref"
   :follow #'org-ref-ref-follow
   :export #'org-ref-vref-export
   :complete #'org-ref-complete-link
   :face 'org-ref-ref-face-fn
   :help-echo #'org-ref-ref-help-echo)

(setq org-ref-ref-types '("ref" "eqref" "pageref" "nameref"
                          "autoref" "cref" "Cref" "vref"))

#+END_SRC

**** Open Pdf at point

See [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org#using-doc-view-or-pdf-tools][Using Doc View or PDF Tools]] section of =org-ref= documentation.

#+NAME: org-ref-pdf
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-ref-open-pdf-at-point ()
  "Open the pdf for bibtex key under point if it exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
         (pdf-file (funcall org-ref-get-pdf-filename-function key)))
    (if (file-exists-p pdf-file)
        (find-file pdf-file)
      (message "No PDF found for %s" key))))

(setq org-ref-open-pdf-function 'org-ref-open-pdf-at-point)
#+END_SRC

*** Org PDF

#+NAME: org-latex-pdf
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
(when (display-graphic-p)
  <<org-pdf-pdftools>>
  <<org-pdf-pdfview>>
)
#+END_SRC

**** PDF Tools

[[https://github.com/politza/pdf-tools][PDF Tools]] adds several features and enhancements for interacting with
PDF documents in Emacs. It serves as a replacement for DocView mode.

Credits to Dr. Ben Maughan over at Pragmatic Emacs for this
[[http://pragmaticemacs.com/category/emacs/][blogpost]] demonstrating how to get the most out of this package.

#+NAME: org-pdf-pdftools
#+BEGIN_SRC emacs-lisp :tangle no
(use-package pdf-tools
  :straight t
  :init
  (progn
    (setq pdf-info-epdfinfo-program "~/.emacs.d/bin/epdfinfo"))
  :config
  (progn
    (pdf-tools-install)))
#+END_SRC

**** Org PDF View

Now we can open pdf files with =org-pdfview= [fn:11]:

#+NAME: org-pdf-pdfview
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-pdfview
  :straight t
  :after (:all pdf-tools)
  :demand t
  :bind (:map pdf-view-mode-map
              ("C-s" . isearch-forward)
              ("h"   . pdf-annot-add-highlight-markup-annotation)
              ("t"   . pdf-annot-add-text-annotation)
              ("D"   . pdf-annot-delete))
  :mode (("\\.pdf\\'" . pdf-view-mode))
  :config
  (progn
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (setq pdf-view-resize-factor 1.1)
    (add-hook 'org-mode-hook
              (lambda ()
                (add-to-list 'org-file-apps
                             '("\\.pdf\\'" .
                               (lambda (file link)
                                 (org-pdfview-open link))))))))
#+END_SRC

** Org Mode Export
:PROPERTIES:
:ID:       46A0BACE-34F1-4547-8EC4-367FD085E1B5
:CUSTOM_ID: org-mode-export
:END:

#+NAME: org-export
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; Export Wrapper Block
<<org-export-wrapper>>

;; Enabled on MacOS block
<<org-export-enable-on-mac>>

;; Enable Extras
<<org-export-ox-extra>>

<<org-export-publish>>

;; LaTeX backend
;; Only evaluate LaTeX package configurations if export dispatcher is enabled
(when (chaffin/org-export-enabled-backend-p 'latex)

  ;; LaTeX Configuration
  <<latex-config>>
  ;; End LaTeX Config
  
  ;; Org LaTeX 
  <<org-latex-config>>
  ;; End Org Latex Expansion
   
  ;; Ox Latex
  <<org-export-latex>>
  ) ;; End LaTeX Backend

;; BibTeX backend
(when (chaffin/org-export-enabled-backend-p 'bibtex)
  <<org-export-bibtex>>)

;; GFM backend
(when (chaffin/org-export-enabled-backend-p 'gfm)
  <<org-export-gfm>>)

;; Pandoc backend
(when (chaffin/org-export-enabled-backend-p 'pandoc)
  <<org-export-pandoc>>)

;; Hugo backend
(when (chaffin/org-export-enabled-backend-p 'hugo)
  <<org-export-hugo>>)

;; HTML Backend
(when (chaffin/org-export-enabled-backend-p 'html)
  <<org-export-html>>
)

#+END_SRC


*** Enable Backends
:PROPERTIES:
:ID:       59AEA962-792E-4AB7-ACDE-3EC61C45D279
:CUSTOM_ID: user-enable-backends
:END:

#+NAME: org-export-wrapper
#+BEGIN_SRC emacs-lisp :tangle no
(defvar org-export-enabled-backends '()
  "alist of symbols representing enabled `org-mode' export backends")

(defun chaffin/org-export-enabled-backend-p (backend)
  (member backend org-export-enabled-backends))
#+END_SRC

And opt-in to all back ends when on local machine.

#+NAME: org-export-enable-on-mac
#+BEGIN_SRC emacs-lisp :tangle no
(when *is-mac*
  (mapcar (lambda (backend)
            (setq org-export-enabled-backends
                  (cons backend org-export-enabled-backends)))
          '(extra gfm latex hugo html pandoc)))
#+END_SRC

*** Ox LaTeX

#+NAME: org-export-latex
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
(require 'ox-latex)

<<org-export-latex-user-labels>>
<<org-export-latex-pdf-process>>
<<org-export-latex-custom-classes>>
<<org-export-latex-numfilter>>
#+END_SRC

**** Set latex pdf process

[[https://ctan.org/pkg/latexmk?lang=en][Latexmk]] automates the proces of building LaTeX documents to pdf.

It can be done through the =org-mode= latex export dispatcher in a single command:

#+NAME: org-export-latex-pdf-process
#+BEGIN_SRC emacs-lisp :tangle no
(eval-and-compile
  (defvar enable-default-minted nil))

(setq org-latex-listings 'minted)

(defun latex-toggle-default-minted ()
  (interactive)
  (if enable-default-minted
      (progn
        (setq org-latex-packages-alist '(("" "minted"))
            org-latex-minted-options
            '(("mathescape" "true")
              ("linenos" "true")
              ("breaklines" "true")
              ("numbersep" "5pt")
              ("frame" "lines")
              ("framesep" "2mm")))
        (setq enable-default-minted nil)
        (message "%s" "Exporting with default minted."))
    (progn
      (setq org-latex-packages-alist '()
            org-latex-minted-options '())
      (setq enable-default-minted t)
      (message "%s" "Disabled default minted."))))

(defvar latex-process-latex
  '("%latex -interaction nonstopmode -output-directory %o %f" "%latex
-interaction nonstopmode -output-directory %o %f" "%latex -interaction
nonstopmode -output-directory %o %f")

  "The default latex command for `org-latex-pdf-process'.")

(defvar latex-process-pdflatex
  '("latexmk -pdflatex='pdflatex -interaction nonstopmode -shell-escape' -synctex=1 -pdf -bibtex -f %f"))

(defvar latex-process-xelatex
  '("latexmk -pdf -synctex=1 -shell-escape -xelatex -f %f"))

(defvar latex-process-lualatex
  '("latexmk -pdf -synctex=1 -shell-escape -lualatex -f %f"))

(defvar latex-process-list
  '(("latex" . latex-process-latex)
    ("lualatex" . latex-process-lualatex)
    ("xelatex" . latex-process-xelatex)
    ("pdflatex" . latex-process-pdflatex)))


(setq org-latex-pdf-process latex-process-xelatex)
(defun org-latex-pdf-process-set (&optional process)
  (interactive)
  (let* ((process (or
                   process
                   (assoc (completing-read "Process: " latex-process-list nil nil)
                          latex-process-list)))
         (cmd-string (cdr process)))
    (setq org-latex-pdf-process (symbol-value cmd-string))))

(add-hook 'org-mode-hook (lambda () (local-set-key (kbd "M-s l") 'org-latex-pdf-process-set)))
#+END_SRC

**** Prefer user provided labeling system

#+NAME: org-export-latex-user-labels
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-latex-prefer-user-labels t)
#+END_SRC

**** Org LaTeX Default Packages                                   :ignore:

#+NAME: org-export-latex-default-packages
#+BEGIN_SRC emacs-lisp :tangle no :exports none
<<org-export-latex-default-packages-natbib>>
#+END_SRC

****** Natbib

Add [[https://ctan.org/pkg/natbib?lang=en][natbib]] package, as it's the easiest way to get BibTeX support
through [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][org-ref]] and other tools for LaTeX in Emacs.

#+NAME: org-export-latex-default-packages-natbib
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
#+END_SRC

**** Async Export

Open exported document in new window on save.

#+NAME: org-export-latex-async
#+BEGIN_SRC emacs-lisp :tangle no
;; https://github.com/jkitchin/scimax/issues/30#issuecomment-271198016
(add-hook 'after-save-hook 
          (lambda ()
            (org-latex-export-to-pdf 't)
            (find-file-other-window
             (concat (file-name-base (buffer-file-name))
                     ".pdf")
             nil t)))
#+END_SRC

**** Hyperref Template

The default cross-referencing and hyperlink styles provided by
=hyperref= are awful. This makes them less awful.

#+NAME: org-export-latex-hyperref
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-latex-hyperref-template "\\hypersetup{\n colorlinks=true, urlcolor=black,linkcolor=black \n}")
#+END_SRC

**** Custom LaTeX Classes

#+NAME: org-export-latex-custom-classes
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-export-latex-per-file-class>>
<<org-export-latex-lingsyn-class>>
<<org-export-latex-uclacs>>
<<org-export-latex-humanities-class>>
#+END_SRC

***** Org Per File Class

Adds a class for exporting to pdf using latex backend without
importing the default =ox-latex= packages. This allows the export
settings of a particular file to be completely insulated from most
external configuration.

#+NAME: org-export-latex-per-file-class
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
             '("per-file-class"
               "\\documentclass{scrartcl}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** Humanities 

My custom mla-style LaTeX class.

#+NAME: org-export-latex-humanities-class
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
             '("humanities"
               "\\documentclass{humanities}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** Lingsyn class

#+NAME: org-export-latex-lingsyn-class
#+BEGIN_SRC emacs-lisp :tangle no
(if (and (executable-find "kpsewhich")
         (shell-command-to-string "kpsewhich orgling.cls"))

    (add-to-list 'org-latex-classes
                 '("orgling"
                   "\\documentclass{orgling}
                    [NO-DEFAULT-PACKAGES]
                    [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

***** UCLA CS Class
#+NAME: org-export-latex-uclacs
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
             '("uclacs"
               "\\documentclass{uclacs}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** Resume

#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
             '("resume"
               "\\documentclass{resume}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("playground"
               "\\documentclass{playground}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

**** Filter Section Numbering by tag

- [[http://bastibe.de/2014-12-03-org-numbering.html][Org Numbering]]

#+NAME: org-export-latex-numfilter
#+BEGIN_SRC emacs-lisp :tangle no 
(defun headline-numbering-filter (data backend info)
  "No numbering in headlines that have a property :numbers: no"
  (let* ((beg (next-property-change 0 data))
         (headline (if beg (get-text-property beg :parent data))))
    (if (string= (org-element-property :NUMBERS headline) "no")
        (cond ((eq backend 'latex)
               (replace-regexp-in-string
                "\\(part\\|chapter\\|\\(?:sub\\)*section\\|\\(?:sub\\)?paragraph\\)"
                "\\1*" data nil nil 1))
              ((eq backend 'html)
               (replace-regexp-in-string
                "\\(<h[1-6]\\)\\([^>]*>\\)"
                "\\1 class=\"nonumber\"\\2" data nil nil)))
      data)))


(defun section-title-filter (data backend info)
  "No numbering in headlines that have a property :title: no"
  (let* ((beg (next-property-change 0 data))
         (headline (if beg (get-text-property beg :parent data))))
    (if (and (eq backend 'latex)
             (string= (org-element-property :SECTITLE headline) "no"))
        (replace-regexp-in-string
         "\\(\\(?:\\(part\\|chapter\\|\\(?:sub\\)*section\\|\\(?:sub\\)?paragraph\\)\\[*]?{\\)\\).*"
         "\\1}" data))))

(setq org-export-filter-headline-functions
      '(headline-numbering-filter
        section-title-filter))
#+END_SRC

*** Ox Bibtex

#+NAME: org-export-bibtex
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
(use-package ox-bibtex
  :straight org
  :mode
  (("\\.org.bib\\'" . org-mode))
  :after (ox)
  :demand t
  :config
  (progn
    (require 'org-bibtex)
    (setq org-bibtex-file "references.org")))
#+END_SRC

*** Ox Pandoc

[[https://pandoc.org/][Pandoc]] is a document conversion tool that can convert pretty much
anything. The [[https://github.com/kawabata/ox-pandoc][ox-pandoc]] package allows us to utiliize this capability
for exporting org-mode documents to various formats.

#+NAME: org-export-pandoc
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-pandoc
  :if (executable-find "pandoc")
  :straight t
  :after (:all ox org-ref)
  :demand t
  :config
  (progn

    (setq org-pandoc-options '((standalone . t)))

    ;; LaTeX-Beamer-PDF
    (defun ox-pandoc--pdf-engine ()
      (let ((syms (mapcar (lambda (x) (cdr x)) latex-process-list))
            (pred (lambda (sym) (eq (symbol-value sym) org-latex-pdf-process)))
            (sep "latex-process-"))
        (cadr (split-string (symbol-name (car (seq-filter pred syms))) sep))))

    (setq org-pandoc-options-for-beamer-pdf `((pdf-engine . ,(ox-pandoc--pdf-engine)))
          org-pandoc-options-for-latex-pdf `((pdf-engine . ,(ox-pandoc--pdf-engine))))

    (defun org-pandoc-pdf-engine-set (&optional process)
      (interactive)
      (let* ((process (or process (assoc (completing-read "Pandoc Process: " latex-process-list nil nil) latex-process-list)))
             (sym (substring-no-properties (car process))))
        (setq org-pandoc-options-for-beamer-pdf `((pdf-engine . ,sym))
              org-pandoc-options-for-latex-pdf `((pdf-engine . ,sym)))))

    ;; Docx
    (when (symbolp 'org-file-apps)
      (add-to-list 'org-file-apps '("\\.docx?\\'" . system)))))
#+END_SRC

*** Ox GFM

#+NAME: org-export-gfm
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-gfm
  :straight t
  :after (ox)
  :demand t)
#+END_SRC

*** Ox Hugo

=[[https://ox-hugo.scripter.co/][ox-hugo]]= is an org exporter for Hugo-compatible markdown.

#+NAME: org-export-hugo
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-hugo
  :straight t
  :after (ox)
  :demand t)
#+END_SRC

*** Ox HTML

#+NAME: org-export-html
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<ox-html-themes>>
#+END_SRC

**** Org HTML Themes

#+NAME: ox-html-themes
#+BEGIN_SRC emacs-lisp :tangle no
(straight-use-package 
 `(org-html-themes
   :host github
   :repo "fniessen/org-html-themes"
   :local-repo-name org-html-themes
   :files ("setup/*" "styles/*")))
#+END_SRC

#+NAME: ox-html-resolve-setupfile
#+BEGIN_SRC emacs-lisp :tangle np
(defun html-resolve-setupfile (data backend info)
  (when (org-export-derived-backend-p 'html)
    (lexical-let ((html-themes--dir (straight--build-dir "org-html-themes")))
      (org-element-map data 'keyword
        (lambda (keyword)
          (let ((kw (org-element-property :key keyword))
                (v (org-element-property :value keyword)))
            (if (string= "SETUPFILE" (upcase kw))
                (org-element-put-property keyword
                                          :value (concat html-themes--dir v)))))))))
(add-to-list 'org-export-filter-parse-tree-functions 'html-resolve-setupfile)

#+END_SRC

*** Ox Extra

Ignores headlines tagged =:ignore:=. Unlike =:noexport:=, the contents
and subtrees of the ignored headlines will be retained.

#+NAME: org-export-ox-extra
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-extra
  :straight org
  :demand t
  :config
  (ox-extras-activate '(ignore-headlines
                        org-export-filter-parse-tree-functions)))
#+END_SRC

*** Ox Publish

#+NAME: org-export-publish
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-publish
  :straight org
  :after (ox)
  :demand t
  :bind (("M-m r p" . org-publish-project)))
#+END_SRC

* Customizing Emacs
** Search and Navigation
*** The buffer
**** Avy
Jump to arbitrary point in Buffer

#+BEGIN_SRC emacs-lisp :tangle no
(use-package avy
  :straight t)
#+END_SRC

**** Undo Tree

Visualize buffer modifications during an Emacs session as an
interactive tree .

#+NAME: undo-tree-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package undo-tree
  :straight t
  :init
  (global-undo-tree-mode))
#+END_SRC

*** The file system
**** Dired
***** Asynchronous Processing

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package async
  :straight t
  :after (dired)
  :commands (dired-async-mode async-smtpmail-send-it)
  :config
  (progn
    (dired-async-mode 1)
    (setq message-send-mail-function 'async-smtpmail-send-it)))
#+END_SRC

***** Reuse dired buffer when moving to parent directory

From [[https://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer][emacswiki.org]]

#+BEGIN_QUOTE
When moving to parent directory by `^´, Dired by default creates a new
buffer for each movement up. The following rebinds `^´ to use the same
buffer.
#+END_QUOTE


#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'dired-mode-hook
	  (lambda ()
	    (define-key dired-mode-map (kbd "^")
	      (lambda () (interactive) (find-alternate-file "..")))))
#+END_SRC

***** Use other dired buffer as default directory

When split frames with two dired buffers, default to the other buffer
as the current directory.

See docstring for =dired-dwim-target=.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq dired-dwim-target t)
#+END_SRC

***** Dired+

Adds extensions and functionality to dired mode.

#+NAME: dired-plus-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dired+
  :straight t
  :init
  (add-hook #'dired-mode-hook #'dired-hide-details-mode))
#+END_SRC

***** Dired Icons

#+NAME: all-the-icons-dired
#+BEGIN_SRC emacs-lisp :tangle no
(use-package all-the-icons-dired
  :straight t
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

*** The project
**** Projectile

#+NAME: projectile-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile
  :straight t
  :init
  (projectile-mode)
  :config
  (progn
    (mapcar
     (lambda (elt)
       (add-to-list 'projectile-globally-ignored-directories elt))
     '("gradle" "target" ".meghanada" ".gradle" "build" "bin"))))
#+END_SRC

**** Neotree

[[https://github.com/jaypei/emacs-neotree][Neotree]][fn:12] is a [[https://github.com/scrooloose/nerdtree][Nerdtree]]-like file explorer for managing projects in Emacs.
 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package neotree
  :straight t
  :after (projectile)
  :demand t
  :commands (neotree-project-dir)
  :bind
  (([f8] . neotree-project-dir))
  :init
  (progn
    (setq neo-theme
          (if (display-graphic-p)
              'icons 'arrow)))
  :config
  (progn
    ;; @source https://www.emacswiki.org/emacs/NeoTree
    (defun neotree-project-dir ()
      "Open NeoTree using the git root"
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                 (progn
                   (neotree-dir project-dir)
                   (neotree-find file-name)))
          (message "Project root not found."))))))
#+END_SRC

**** ack

#+NAME: ack-config
#+BEGIN_SRC emacs-lisp :tangle yes 
(use-package ack
  :if (executable-find "ack")
  :straight t)
#+END_SRC

** Startup
*** Initial Buffer

#+NAME: startup-initial-buffer
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none
<<page-break-lines-config>>
(when (display-graphic-p)
  <<emojify-mode-config>>)
<<dashboard-config>>
#+END_SRC

The default splash screen is great when you're starting out,
but it's more so an annoyance than anything else once you
know you're around.

**** Page Break Lines

Global minor-mode that turns ~^L~ form feed characters into
horizontal line rules.

#+NAME: page-break-lines-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package page-break-lines
  :straight t
  :init
  (global-page-break-lines-mode))
#+END_SRC

**** Emacs Dashboard

[[https://github.com/rakanalh/emacs-dashboard][Dashboard]] is a highly customizable splash screen
replacement library used in the popular [[https://github.com/syl20bnr/spacemacs][spacemacs]] framework.
It's a nice way of consolidating any combination of tasks,
agenda items, bookmarks, and pretty much any other enumerable
list that one may use in the wacky world of Emacs.

#+NAME: dashboard-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package dashboard
  :straight t
  :demand t
  :init
  (if (not (global-page-break-lines-mode))
      (global-page-break-lines-mode))
  :config
  (dashboard-setup-startup-hook))

(add-to-list 'dashboard-items '(agenda) t)

(setq dashboard-banner-logo-title "Welcome Back, MasterChaff"
      dashboard-items '(( agenda . 10)
                        ( projects . 5)
                        ( recents . 5)
                        ( bookmarks . 5)))

#+END_SRC

**** Fireplace

Just for the hell of it.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package fireplace
  :straight t)
#+END_SRC

*** Initial Scratch

#+NAME: startup-initial-scratch
#+BEGIN_SRC emacs-lisp :tangle yes
(setq initial-scratch-message nil
      inhibit-startup-message t
      inhibit-startup-echo-area-message t
      inhibit-startup-screen t)

  #+END_SRC

*** Initial Frame

Disable scroll bars and tool bar on all system types.

On macOS, the menu bar is integrated into the UI.

Disabling it will just empty the menu tab options for Emacs.app,
so we'll leave it there.

#+BEGIN_SRC emacs-lisp :tangle yes
(tool-bar-mode -1)
(scroll-bar-mode -1)
(unless *is-mac*
  (menu-bar-mode -1))
#+END_SRC

**** Default Frame Appearance

Starting in Emacs 26, the =default-frame-alist= variable can be used
create a natural title bar in the GUI. Setting the default frame
properties to the following values has the same effect as the
'--with-natural-title-bar' option provided by the Homebrew [[https://github.com/d12frosted/homebrew-emacs-plus/blob/master/Formula/emacs-plus.rb#L97-L100][formula]]
recommended for Spacemacs users on macOS[fn:13].

#+BEGIN_SRC emacs-lisp :tangle yes
(setq default-frame-alist '((ns-transparent-titlebar . t) (ns-appearance . dark)))
#+END_SRC

** Keybindings 
*** Hydra

[[https://github.com/abo-abo/hydra/wiki/Emacs][Hydra]] is a package used to bind a family of related commands with a
common prefix.

#+NAME: hydra-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hydra
  :straight t)
#+END_SRC

**** Ivy Hydra

#+NAME: ivy-hydra-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-hydra
  :straight t
  :after (:all ivy hydra)
  :demand t)
#+END_SRC

** Window Manager
*** Window Resize

Default keybindings for window resize:

- =C-x ^= :: makes current window taller [[help:enlarge-window][`enlarge-window']]
- =C-x }= :: make it larger [[help:enlarge-window-horizontally][`enlarge-window-horizontally']]
- =C-x {= :: make it narrower [[help:shrink-window-horizontally][`shrin-window-horizontally']]

This following block modifies the keybindings for these commands to
use the arrow keys instead. I use the "C-s" modifier because it just
so happens this prefix can be extended by every key in the arrow pad
without causing a conflict with external keymaps on my system.

The suggested keybindings from the footnoted EmacsWiki page may be more
accessible for you [fn:14].

#+NAME: window-resize-keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-s-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-s-<down>") 'shrink-window)
(global-set-key (kbd "C-s-<up>") 'enlarge-window)
#+END_SRC

*** Popwin

#+NAME: popwin-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package popwin
  :straight t
  :config (popwin-mode 1))
#+END_SRC

*** Winner Mode

[[https://www.emacswiki.org/emacs/WinnerMode][Winner mode]] is a global minor mode that allows easy switching across
different window configurations.

#+NAME: winner-mode-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package winner-mode
  :init
  (when (fboundp 'winner-mode)
    (winner-mode 1)))
#+END_SRC

** Emacs+
*** Help+

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package help+
  :straight t)

(use-package help-macro+
  :straight t)

(use-package help-fns+
  :straight t)

(use-package help-mode+
  :straight t)
#+END_SRC

*** Image+

[[https://github.com/mhayashi1120/Emacs-imagex][Image+]] provides extensions for image file manipulation in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package image+
  :straight t
  :if (display-graphic-p)
  :after (image)
  :config
  (eval-after-load 'image+
    `(when (require 'hydra nil t)
       (defhydra imagex-sticky-binding (global-map "C-x C-l")
         "Manipulating image"
         ("+" imagex-sticky-zoom-in "zoom in")
         ("-" imagex-sticky-zoom-out "zoom out")
         ("M" imagex-sticky-maximize "maximize")
         ("O" imagex-sticky-restore-original "restore orginal")
         ("S" imagex-sticky-save-image "save file")
         ("r" imagex-sticky-rotate-right "rotate right")
         ("l" imagex-sticky-rotate-left "rotate left")))))
#+END_SRC

** User Interface

Credits to [[https://github.com/domtronn][domtronn]] for a solid portion of this stuff. Dude makes
really fantastic Emacs UI libraries and enhancements.

*** Cursor
**** Vertical Bar

Set the cursor to a bar. The default is too thin for my liking.
Set the width to 4px. Also remove the cursor in inactive windows.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default cursor-type '(bar . 2)
              cursor-in-non-selected-windows 'nil
              x-stretch-cursor t
              line-spacing 2)
#+END_SRC

**** Disable Blink

Ultimately, I'd like to set a longer blink interval, like the "phase"
~caret_style~ setting in Sublime Text.

#+BEGIN_SRC emacs-lisp :tangle yes
(blink-cursor-mode -1)
#+END_SRC

**** Smart Cursor Color

#+BEGIN_SRC emacs-lisp :tangle no
(use-package smart-cursor-color
  :straight t
  :config
  (smart-cursor-color-mode +1))
#+END_SRC

**** Multiple Cursors

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multiple-cursors
  :straight t
  :init
  (progn
    (global-unset-key (kbd "M-<down-mouse-1>")))
  :bind
  (("C-S-c C-S-c" . mc/edit-lines)
   ("C->" . mc/mark-next-like-this)
   ("C-c C-<" . mc/mark-all-like-this)
   ("M-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

*** Fonts
**** Font List

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar font-list
  '()
  "An alist of fonts which can be interactively chosen
   using the `set-font' function.

   Each font entry is a cons cell composed of the font-family as a string and
   the associated font weight as an unquoted symbol.

   See `font-weight-table' for a list of available options.

   e.g (\"FONT-FAMILY\" . WEIGHT)"
  )

(when *is-mac*
  (let ((font-weight-xs '(("Andale Mono" . extralight)
                          ("Droid Sans Mono" . normal)
                          ("Fira Code" . light)
                          ("Hack" . normal)
                          ("Inconsolata" . medium)
                          ("Operator Mono" . extralight)
                          ("SF Mono" . normal)
                          ("Programma" . normal))))
  (mapcar (lambda (font-weight-x)
	    (add-to-list 'font-list font-weight-x))
	  font-weight-xs)))


(defun set-font (&optional font)
  "Set the custom FONT with completion"
  (interactive)
  (let* ((font (or font (assoc
			 (completing-read "Font: " font-list nil nil)
			 font-list)))
	 (family (car font))
	 (weight (cdr font)))
    (run-at-time "0.2 sec" nil
		 `(lambda () (when (not (eq (face-attribute 'default :family)
				       ,family))
			  (set-face-attribute 'default nil :family ,family
					      :weight (quote ,weight)
					      :height 120))))))
#+END_SRC

**** Load Fonts

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar macos-default-font
  "SF Mono 12"
  "A fontspec string of the default font to use on macOS.

  To get the fontspec string, use the command 'M-x x-select-font RET'
  to choose the desired font, then 'M-x describe-font RET' and copy-and-paste.")

(if *is-hal*
    (setq macos-default-font
	  "Operator Mono:pixelsize=12:weight=light:slant=normal:width=normal:spacing=100:scalable=true"))

(cond (*is-linux*
       (set-frame-font "Ubuntu Mono 12" nil t))
      (*is-windows*
       (set-frame-font "Lucida Sans Typewriter 12" nil t))
      (*is-mac*
       (set-frame-font macos-default-font nil t))
      (t
       (set-frame-font "Menlo 12" nil t)))
#+END_SRC

***** TODO Write Macro to define =-default-font= vars with templated docstring

*** Modeline
**** Display Time

Show the time in the modeline.

#+BEGIN_SRC emacs-lisp :tangle yes
(display-time-mode 1)
#+END_SRC

**** Spaceline

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package spaceline
  :straight t
 )
#+END_SRC

***** Spaceline All the Icons

#+NAME: all-the-icons-spaceline
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package spaceline-all-the-icons
  :straight t
  :demand t
  :config
  (progn
      (setq spaceline-all-the-icons-separator-type 'arrow)
      (require 'spaceline)
      (require 'spaceline-segments)
      (require 'spaceline-config)
      (require 'all-the-icons)
      (require 'spaceline-all-the-icons)
      (spaceline-all-the-icons-theme 'org-pomodoro)))

#+END_SRC

***** Spaceline Segments
****** Flycheck Segment

By default, =spacleine-all-the-icons= theme displays the flycheck
status no matter what. I only want this enabled when =flycheck-mode=
is on.

#+NAME: spaceline-segment-flycheck
#+BEGIN_SRC emacs-lisp :tangle no

(spaceline-toggle-all-the-icons-flycheck-status-off)
(add-hook 'flycheck-mode-hook
	  (lambda ()
	    (spaceline-toggle-all-the-icons-flycheck-status)))

#+END_SRC

**** Mode Icons

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package mode-icons
  :straight t
  :if (display-graphic-p)
  :after (smart-mode-line)
  :config
  (mode-icons-mode))
#+END_SRC

*** Theme
**** Enable Custom Themes

This disables Emacs asking questions about loading a new theme.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq custom-safe-themes t)
#+END_SRC

**** Org Beautify Theme
:PROPERTIES:
:ID:       4612DA55-904D-44D4-9E3D-98E6D7AF72E2
:CUSTOM_ID: org-beautify-theme
:END:

#+NAME: ob-theme
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-beautify-theme
  :straight t
  :config
  (progn
    (setq org-beautify-theme-use-box-hack nil)
    (add-to-list 'custom-enabled-themes 'org-beautify)))
#+END_SRC

**** Zenburn Theme

#+NAME: zenburn-theme-cfg
#+BEGIN_SRC emacs-lisp :tangle no
(use-package zenburn-theme
  :straight t
  :config
  (progn
    (add-to-list 'custom-enabled-themes 'zenburn-theme)))
#+END_SRC

**** Atom One Dark Theme
:PROPERTIES:
:ID:       F61C9959-2A41-47D9-9D99-04D54098CA90
:CUSTOM_ID: atom-one-dark-theme
:END:

#+NAME: atom-theme-cfg
#+BEGIN_SRC emacs-lisp :tangle no
(use-package atom-one-dark-theme
  :straight t
  :config
  (progn
    (add-to-list 'custom-enabled-themes 'atom-one-dark)))
#+END_SRC

**** Install Themes

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<atom-theme-cfg>>
<<ob-theme>>
<<zenburn-theme-cfg>>
#+END_SRC

**** Load Themes

Primary theme has to be loaded before [[#org-beautify-theme][Org Beautify Theme]] to preserve compatibility.

I find that zenburn looks better when Emacs is
started from the terminal.

#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes
(if (display-graphic-p)
    (progn
      (load-theme 'org-beautify)
      (load-theme 'atom-one-dark)
      (add-hook 'after-init-hook
                (lambda ()
                  (load-theme 'atom-one-dark)
                  (load-theme 'org-beautify)

                  <<atom-one-dark-mods>>)))
  (progn
    (load-theme 'zenburn)))
#+END_SRC


*****  Atom One Dark Modifications

Minor modifications to [[#atom-one-dark-theme][atom one dark theme]]
color scheme. The template is from the modification of monokai-theme
in this [[http://fgiasson.com/blog/index.php/2016/06/14/my-optimal-gnu-emacs-settings-for-developing-clojure-revised/][blogpost]].

- Use default foreground color instead of highlight face for org-mode
  source lines.
- Use italic font (when available) for strings, comments, and keywords
- Modify vertical border foreground color 
- Modify highlight symbol foreground face and colors

#+NAME: atom-one-dark-mods
#+BEGIN_SRC emacs-lisp :tangle no
(deftheme atom-one-dark-mods)

(let ((class '((class color) (min-colors 257)))
      (terminal-class '((class color) (min-colors 89))))

  (custom-theme-set-faces
   'atom-one-dark-mods

   ;; Can also be set using `highlight-symbol-foreground-color' variable
   `(highlight-symbol-face
     ((,class :foreground "#E0E0E0")))

   ;; Org Faces
   `(org-block-begin-line
     ((t :foreground "#ABB2BF"
         :background "#35373E")))

   `(org-block-end-line
     ((t :foreground "#ABB2BF"
         :background "#35373E")))

   `(org-verbatim
     ((t :inherit (shadow fixed-pitch-serif))))

   `(font-lock-comment-face
     ((t :slant italic)))

   `(font-lock-keyword-face
     ((t :slant italic)))

   `(font-lock-string-face
     ((t :slant italic)))

   `(vertical-border
     ((t :foreground "#5C6370")))))

 (setq highlight-symbol-colors
       '("#FFEE58" "#C5E1A5" "#80DEEA"
         "#64B5F6" "#E1BEE7" "#FFCC80")
       highlight-tail-colors
       '(("#F8BBD0" . 0) ("#FF80AB" . 10)
         ("#9575CD" . 30) ("#494949" . 60)
         ("#424242" . 80))
       hl-bg-colors
       '("#DEB542" "#F2804F" "#FF6E64" "#F771AC"
         "#9EA0E5" "#69B7F0" "#69CABF" "#B4C342")
       hl-fg-colors
       '("#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3"
         "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3")
       hl-paren-colors
       '("#B9F" "#B8D" "#B7B" "#B69"
         "#B57" "#B45" "#B33" "#B11")
       nrepl-message-colors
       '("#dc322f" "#cb4b16" "#b58900"))
#+END_SRC

*** All The Icons

[[https://github.com/domtronn/all-the-icons.el][All The Icons]] is a utility package for icons in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (display-graphic-p)
  <<all-the-icons-setup>>
  <<all-the-icons-dired>>
  <<all-the-icons-ivy>>
  <<all-the-icons-spaceline>>)
#+END_SRC

#+NAME: all-the-icons-setup
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons
  :if (display-graphic-p)
  :straight t
  :config
  (progn
    (setq macos-font-directory "~/Library/Fonts")
    (if-not (member "all-the-icons.ttf" (directory-files macos-font-directory))
        (all-the-icons-install-fonts))))

#+END_SRC

**** Ivy All the Icons

#+NAME: all-the-icons-ivy
#+BEGIN_SRC emacs-lisp :tangle no
(use-package all-the-icons-ivy
  :straight t
  :after (ivy)
  :init
  (all-the-icons-ivy-setup))
#+END_SRC

*** Scrolling
**** Scroll to first error on compilation

#+BEGIN_SRC emacs-lisp :tangle yes
(setq compilation-scroll-output 'first-error)
#+END_SRC

**** Smooth Scrolling

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smooth-scrolling
  :straight t
  :init
  (smooth-scrolling-mode 1)
  :config
  (setq scroll-preserve-screen-position t
        scroll-margin 0
        scroll-conservatively 101))
#+END_SRC

*** Redisplay

#+BEGIN_SRC emacs-lisp :tangle yes
(setq redisplay-dont-pause t)
#+END_SRC

*** Emojis

#+NAME: emojify-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package emojify
  :straight t
  :after (:all magit org-mode markdown-mode)
  :init
  (progn
      (add-hook 'org-mode-hook 'emojify-mode-hook)
      (add-hook 'markdown-mode-hook 'emojify-mode-hook)
      (add-hook 'magit-status-mode-hook 'emojify-mode-hook)))
#+END_SRC

* Completion
** Company


#+NAME: company-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<company-company>>
<<company-quick-help>>
<<company-statistics-config>>
<<company-dict-config>>
#+END_SRC

Emacs has two popular packages for code completion --
[[https://github.com/auto-complete/auto-complete][autocomplete]] and [[https://github.com/company-mode/company-mode][company]]. This reddit [[https://www.reddit.com/r/emacs/comments/2ekw22/autocompletemode_vs_companymode_which_is_better/][thread]] was enough for
me to go with company.

If you need more convincing, [[https://github.com/company-mode/company-mode/issues/68][company-mode/company-mode#68]]
offers a comprehensive discussion on the two.

The ticket is from the ‘company-mode‘ repository, so there's
probably some bias there, but company-mode hasn't provided
any reason for me reconsider my choice.

#+NAME: company-company
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company
  :straight t
  :defer t
  :commands (global-company-mode)
  :bind (("TAB" . company-indent-or-complete-common)
         ("C-c /" . company-files)
         ("M-SPC" . company-complete)
          (:map company-mode-map
               ("M-n" . company-select-next-or-abort)
               ("M-p" . company-select-previous-or-abort)))
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (progn
    (setq company-tooltip-limit 20
          company-tooltip-align-annotations t
          company-idle-delay .3
          company-begin-commands '(self-insert-command))))
#+END_SRC

**** Company Quick Help

[[https://github.com/expez/company-quickhelp][Company Quick Help]] emulates =autocomplete= documentation-on-idle behavior, but using the
less-buggy =pos-tip= package rather than =popup-el=.

#+NAME: company-quick-help-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-quickhelp
  :straight t
  :after (company)
  :commands (company-quickhelp-manual-begin)
  :bind
  (:map company-active-map
        ("C-c h" . company-quickhelp-manual-begin))
  :config
  (company-quickhelp-mode 1))
#+END_SRC

**** Company Statistics

[[https://github.com/company-mode/company-statistics][Company statistics]] uses a persisent store of completions to rank the
top candidates for completion.

#+NAME: company-statistics-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-statistics
  :straight t
  :after (company)
  :demand t
  :init
  (company-statistics-mode))
#+END_SRC

** Snippets
*** YASnippet

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system based off the TextMate snippet syntax.

Here, I create a variable for my personal snippets directory.

After installation and enabling the package, add the personal snippets
directory to the list of directories where YASnippet should look for snippets.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :straight t
  :init
  (yas-global-mode 1))
#+END_SRC

YASnippet can also be used as a non-global minor mode on a per-buffer
basis.

Invoking ~yas-reload-all~ will load the snippet tables, and then
calling ~yas-minor-mode~ from the major mode hooks will load the
snippets corresponding to the major mode of the current buffer mode.

#+BEGIN_EXAMPLE emacs-lisp
(yas-reload-all)
(add-hook 'prog-mode-hook #'yas-minor-mode)
#+END_EXAMPLE

*** Code Library

#+NAME: snippets-cl
#+BEGIN_SRC emacs-lisp :tangle no
(use-package code-library
  :straight t
  :after (org)
  :init
  (progn
    (setq code-library-directory (concat user-emacs-directory "codelibrary"))
    (if-not (file-exists-p code-library-directory)
        (if (yes-or-no-p
             (format-message "Directory `%s' doesn't exist. Make directory?" code-library-directory))
            (mkdir code-library-directory))))
  :config
  (progn
    (append 'code-library-mode-file-alist
            '((latex-mode . "latex.org")
              (clojure-mode . "clojure.org")
              (makefile-mode . "makefile.org")
              (makefile-gmake-mode . "makefile.org")))
    (setq code-library-sync-to-gist t)))
#+END_SRC

** Minibuffer

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<minibuffer-prompt>>
<<ivy-config>>
<<counsel-config>>
<<swiper-config>>
<<smex-config>>
#+END_SRC

*** Prompt Properties

Don't let the cursor go into the minibuffer prompt.

From Xah Lee's [[http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html][emacs-stop-cursor-enter-prompt]], found in the [[https://github.com/syl20bnr/spacemacs/blob/bd7ef98e4c35fd87538dd2a81356cc83f5fd02f3/layers/%2Bdistributions/spacemacs-base/config.el#L128-L131][config.el]] file of the spacemacs base layer.

#+NAME: minibuffer-prompt
#+BEGIN_SRC emacs-lisp :tangle no
(setq minibuffer-prompt-properties
      '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
#+END_SRC

*** Ivy (Counsel)

**** Ivy

#+NAME: ivy-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<ivy-base>>
<<ivy-historian-config>>
#+END_SRC

[[https://github.com/abo-abo/swiper][Ivy]] is a completion and selection framework in the same vein
as helm.

It doesn't have the same kind of ecosystem or interopability,
but its easy to configure, offers a minimalistic interface,
and is every bit as good of a completion tool as helm is,
if not better.

I prefer the default regex matcher, but if you want fuzzy matching as
a fallback or replacement checkout this [[https://oremacs.com/2016/01/06/ivy-flx/][article]].

#+NAME: ivy-base
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package ivy
  :straight t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
        ivy-initial-inputs-alist nil
        ivy-re-builders-alist
        '((t . ivy--regex-plus))))
#+END_SRC


***** Ivy Historian

[[https://github.com/PythonNut/historian.el][Historian.el]] uses a persistent store of =completing-read= results
and similar functions to provide completion candidates based on
frequency of use[fn:15].

#+NAME: ivy-historian-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package historian
  :straight t)

(use-package ivy-historian
  :after (ivy)
  :straight historian)
#+END_SRC


**** Counsel

#+NAME: counsel-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<counsel-base>>
<<counsel-osx-app-config>>
<<counsel-projectile-config>>
<<counsel-ggtags-config>>
<<counsel-itunes-config>>
#+END_SRC

#+NAME: counsel-base
#+BEGIN_SRC emacs-lisp :noweb no :tangle no
(use-package counsel
  :straight t
  :bind
  (("C-c C-r" . ivy-resume)
   ("C-`" . ivy-avy)
   ("M-x" . counsel-M-x)
   ("M-y" . counsel-yank-pop)
   ("C-x C-f" . counsel-find-file)
   ("<f1> f" . counsel-describe-function)
   ("<f1> v" . counsel-describe-variable)
   ("<f1> l" . counsel-load-library)
   ("<f2> i" . counsel-info-lookup-symbol)
   ("<f2> u" . counsel-unicode-char)
   ("C-c g" . counsel-git)
   ("C-c j" . counsel-git-grep)
   ("C-c k" . counsel-ag)
   ("C-x l" . counsel-locate)
   ("C-S-o" . counsel-rhythmbox)))
#+END_SRC

***** Counsel OSX App



***** Counsel iTunes

#+NAME: counsel-itunes-config
#+BEGIN_SRC emacs-lisp :tangle no
(when (executable-find "osascript")
  (use-package counsel-itunes
    :after (:all counsel ivy)
    :straight
    (counsel-itunes
     :host github
     :repo "jchaffin/counsel-itunes")
    :demand t
    :config
    (progn
      ;; make prefix command
      (define-prefix-command 'counsel-itunes-keymap)
      (define-key 'chaffin-keymap "i" 'counsel-itunes-keymap)
      ;; define keymap
      (define-key 'counsel-itunes-keymap "-"    #'counsel-itunes-volume-down)
      (define-key 'counsel-itunes-keymap "+"    #'counsel-itunes-volume-up)
      (define-key 'counsel-itunes-keymap "t"    #'counsel-itunes-tracklist)
      (define-key 'counsel-itunes-keymap "p"    #'counsel-itunes-play-pause)
      (define-key 'counsel-itunes-keymap "c"    #'counsel-itunes-current-track)
      (define-key 'counsel-itunes-keymap "P"    #'counsel-itunes-playlist)
      (define-key 'counsel-itunes-keymap "n"    #'counsel-itunes-next-track)
      (define-key 'counsel-itunes-keymap "b"    #'counsel-itunes-previous-track)
      (define-key 'counsel-itunes-keymap "s"    #'counsel-itunes-shuffle))))
#+END_SRC

***** Counsel Projectile

[[https://github.com/ericdanan/counsel-projectile][Counsel Projectile]] provides a project management interface via ivy and
friends.

#+NAME: counsel-projectile-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-projectile
  :straight t
  :after (:all projectile counsel)
  :demand t
  :init
  (counsel-projectile-mode t))
#+END_SRC

***** Counsel Gtags

#+NAME: counsel-ggtags-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-gtags
  :straight t
  :after (:all ggtags counsel)
  :init
  (progn
    (setq counsel-gtags-ignore-case t
          counsel-gtags-auto-update t)))
#+END_SRC

***** Counsel Dash

Counsel dash provides a simple wrapper around [[https://github.com/areina/helm-dash][helm-dash]] bindings to provide
ivy integration with dash docsets. This is not great, as installing
=helm-dash= requires installing =helm= itself. 

See my [[#macos-dash][implementation]] if you are running macOS, have [[https://kapeli.com/dash][Dash]] installed on
your system, and would like to open docsets natively in the Dash
documentation browser.

#+NAME: dash-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel-dash
  :after (:all counsel ivy)
  :demand t
  :if *is-mac*)
#+END_SRC

**** Swiper


#+NAME: swiper-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package swiper
  :after (ivy)
  :bind
  (("\C-s" . swiper)))
#+END_SRC

*** Smex

A smart M-x enhancement for Emacs.
#+NAME: smex-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package smex
  :straight t
  :after (ivy)
  :init
  (setq-default smex-history-length 32))
#+END_SRC

* Terminal
** With Editor

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package with-editor
  :straight t
  :config
  (progn
    (add-to-hooks #'with-editor-export-editor
                  '(shell-mode-hook
                    term-exec-hook
                    eshell-modehook))))
#+END_SRC

** Multi-Term

#+NAME: multi-term-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multi-term
  :straight t
  :bind
  (("C-c M-RET t" . multi-term)
   ("C-c M-RET b" . multi-term-prev)
   ("C-c M-RET n" . multi-term-next)
   ("C-c M-RET o" . multi-term-dedicated-toggle))
  :config
  (progn
    (setq multi-term-program
          (if (string= shell-file-name "/bin/sh")
              "/bin/bash"
            "/bin/zsh"))
    (add-to-list 'term-bind-key-alist
                 '("C-x C-j" . term-line-mode))
    (add-to-list 'term-bind-key-alist
                 '("C-c C-k" . term-char-mode))))

#+END_SRC

** xterm

#+NAME: xterm-config
#+BEGIN_SRC emacs-lisp :tangle yes
(xterm-mouse-mode 1)
#+END_SRC

** Run Bash On Windows/PC
- [[https://www.masteringemacs.org/article/running-shells-in-emacs-overview][Mastering Emacs - Running Shells in Emacs]]

#+BEGIN_SRC emacs-lisp :tangle yes
(when *is-windows*
  (progn
    (setq explicit-shell-file-name "C:/path/to/bash.exe"
          shell-file-name "bash"
          explicit-bash.exe-args '("--noediting" "--login" "-i"))
    (setenv "SHELL" shell-file-name)
    (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)))
#+END_SRC

** Shell

Zsh is whack when running the emacs =shell= function. This fixes that problem.

#+BEGIN_SRC emacs-lisp :tangle yes
(when *is-mac*
  (setq explicit-shell-file-name "/bin/sh"
	shell-file-name "sh")
  (setenv "SHELL" shell-file-name))
#+END_SRC

** Tramp

Connect Remotely.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq tramp-default-method "ssh")
#+END_SRC

* Web
** Browsing
*** Webkit xwidget

See [[https://github.com/veshboo/emacs#example-customization-using-xwidget-webkit][veshboo/emacs]].

#+NAME: browse-webkit-xwidget
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package xwidget
  :if (> emacs-major-version 26)
  :init
  (progn
    (defvar xwidget-webkit-bookmark-jump-new-session) ;; xwidget.el
    (defvar xwidget-webkit-last-session-buffer) ;; xwidget.el
    (require 'bookmark)
    (add-hook 'pre-command-hook
              (lambda ()
                (if (eq this-command #'bookmark-bmenu-list)
                    (if-not (eq major-mode 'xwidget-webkit-mode)
                        (setq xwidget-webkit-bookmark-jump-new-session t)
                      (setq xwidget-webkit-bookmark-jump-new-session nil)
                      (setq xwidget-webkit-last-session-buffer (current-buffer)))))))
  :config
  (progn
    (defun xwidget-webkit-open-file (&optional file)
      "Render FILE using xwidget-webkit"
      (interactive "fFile: ")
      (xwidget-webkit-browse-url (concat "file://"
                                         (and (memq system-type '(windows-nt ms-dos)) "/")
                                         (expand-file-name (or file (buffer-file-name))))))
    (defun xwidget-webkit-open-file-at-point ()
      (interactive)
      (funcall #'xwidget-webkit-open-file))))

#+END_SRC

*** Set the default browser.

- [[https://emacs.stackexchange.com/a/7332][Stack Exchange - How to make eww default browser in emacs]]

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package browse-url
  :config
  (progn
    (cond ((> emacs-major-version 26)
           (setq browse-url-browser-function 'xwidget-webkit-browse-url))
          ((*is-lnxsrv*
            (setq browse-url-browser-function 'eww-browse-url))))))
#+END_SRC

*** =osx-browse=

This library provides several useful commands for using the
Google Chrome, Safari, and Firefox web browsers on macOS.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package osx-browse
  :straight t
  :if *is-mac*
  :defines (osx-browse-mode osx-browse-mode-map)
  :demand t
  :init
  (progn
    (osx-browse-mode 1)))
#+END_SRC

*** Google search at point

#+BEGIN_SRC emacs-lisp :tangle yes
(defun google-search-query-at-point (&optional edit-query)
  "Search for the expression at point in the default web browser.
If the optional prefix EDIT-QUERY is specified,
the user will be prompted to edit the search string first."
  (interactive "P")
  (let* ((search-prefix "https://google.com/search?q=")
         (thing (if (thing-at-point 'url)
                    (thing-at-point-url-at-point)
                  (concat
                   search-prefix
                   (if (use-region-p)
                       (buffer-substring-no-properties
                        (region-beginning) (region-end))
                     (thing-at-point 'word)))))
         (search (if (or edit-query
                         (and (>= (length thing) (length search-prefix))
                              (string= (substring thing (length search-prefix)) "")))
                     (concat search-prefix
                             (read-from-minibuffer "Search Query: "))
                   thing)))
    (browse-url search)))
#+END_SRC

*** Search Web

#+NAME: search-web-xwidget
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package search-web
  :straight t
  :bind (("C-c w" . search-web))
  ;; :init
  ;; (progn
  ;;   (if (and (> emacs-major-version 26) (display-graphic-p))
  ;;       (defun browse-url-default-browser (url &rest args)
  ;;         "Override `browse-url-default-browser' to use `xwidget-webkit' URL ARGS." 
  ;;         (xwidget-webkit-browse-url url args))))
  )
#+END_SRC

*** Advise =org-open-at-point=
:PROPERTIES:
:ID:       69b03145-629e-4593-ae4c-6cbd5404ff3e
:CUSTOM_ID: org-open-at-point-browser
:END:

This [[https://www.emacswiki.org/emacs/BrowseUrl#toc28][function]] advises =org-open-at-point= to allow choosing different browsers. 

#+NAME: org-open-at-point-advise
#+BEGIN_SRC emacs-lisp :tangle yes
(defadvice org-open-at-point (around org-open-at-point-choose-browser activate)
  (let ((browse-url-browser-function
         (cond ((equal (ad-get-arg 0) '(4))
                'browse-url-generic)
               ((equal (ad-get-arg 0) '(16))
                'choose-browser)
               (t
                (lambda (url &optional new)
                  (if (and (> emacs-major-version 26)
                           (display-graphic-p))
                      (xwidget-webkit-browse-url url t)
                    (eww-browse-url url t)))))))
    ad-do-it))
#+END_SRC

*** Browse at remote

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package browse-at-remote
  :straight t
  :init
  (progn
    (if *is-mac*
        (when (fboundp 'osx-browse-url-chrome)
          (setq browse-url-browser-function 'osx-browse-url-chrome)))))
#+END_SRC

*** Set default browser 

Interactively.

#+NAME: browse-set-default-browser
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar browse-url-browser-alist
      '(("chrome" . browse-url-chrome)
        ("firefox" . browse-url-firefox)
        ("eww" . eww-browse-url)
        ("xwidget-webkit" . xwidget-webkit-browse-url)))

(if *is-mac*
    (progn 
      (setf (cdr (assoc "chrome" browse-url-browser-alist)) #'osx-browse-url-chrome)
      (setf (cdr (assoc "firefox" browse-url-browser-alist)) #'osx-browse-url-firefox)
      (add-to-list 'browse-url-browser-alist '("safari" . osx-browse-url-safari))))


(defun chaffin-set-browser-function ()
  (interactive)
  (let ((browser (assoc (completing-read "Browser: " browse-url-browser-alist)
                        browse-url-browser-alist)))
    (setq browse-url-browser-function (cdr browser) )))
#+END_SRC

** Email
*** Mu

#+NAME: mu-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package mu4e
  :if *is-mac*
  :load-path "/usr/local/Cellar/mu/0.9.18_1/share/emacs/site-lisp/mu/mu4e"
  :config
  (progn
    (setq mu4e-maildir (expand-file-name "~/.mail")
          mu4e-context-policy 'pick-first
          mu4e-compose-policy nil
          mu4e-get-mail-command "offlineimap -q -u quiet"
          mu4e-show-images t
          mu4e-show-addresses t)

     ;; smtp settings
     (setq mu4e-send-mail-function 'smtp-mail-send-it
           mu4e-default-smtp-server "smtp.gmail.com"
           smtpmail-smtp-service 587
           smtp-mail-smtp-stream-type 'ssl)


     (setq mu4e-contexts
           `( ,(make-mu4e-context
                :name "private"
                :match-func (lambda (msg)
                              (when msg
                                mu4e-message-contact-field-matches msg
                                :to "jchaffin57@gmail.com"))
                :leave-func (lambda ()
                              (mu4e-message "Leaving Gmail Account"))
                :vars '( (mu4e-reply-to-address "jchaffin@ucla.edu")
                         ( user-mail-address . "jchaffin57@gmail.com" )
                         ( user-full-name . "Jacob Chaffin" )
                         ( mu4e-drafts-folder . "/private/[Gmail].Drafts" )
                         ( mu4e-sent-folder . "/private/[Gmail].Trash" )
                         ( mu4e-refile-folder . "/archived")
                         ( mu4e-compose-signature .
                                                  (concat
                                                   "Jacob Chaffin\n"
                                                   "UCLA 19\n"
                                                   "Linguistics and Computer Science\n"
                                                   "jchaffin@ucla.edu\n"))))

              ,(make-mu4e-context
                :name "school"
                :enter-func (lambda () (mu4e-message "Switching to UCLA Mail"))
                :leave-func (lambda () (mu4e-message "Leaving UCLA Mail"))
                :match-func  (lambda (msg)
                               (when msg
                                 (mu4e-message-contact-field-matches msg :to (or
                                                                              "jchaffin@ucla.edu"
                                                                              "jchaffin@g.ucla.edu"))))
                :vars '( (user-mail-address . "jchaffin@ucla.edu" )
                         (user-full-name . "Jacob Chaffin" )
                         (mu4e-compose-signature . (concat
                                                    "Jacob Chaffin\n"
                                                    "UCLA 19\n"
                                                    "Linguistics and Computer Science\n"
                                                    "jchaffin@ucla.edu\n"
                                                    "(650)-380-3288\n"))))))))
#+END_SRC

* Prose

#+NAME: prose-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<prose-define-keymap>>
<<prose-spellcheck>>
<<prose-completion>>
<<prose-notes>>
<<prose-readview>>
<<prose-dummy>>
#+END_SRC

** Prose Keymap

#+NAME: prose-define-keymap
#+BEGIN_SRC emacs-lisp :tangle no
(define-prefix-command 'prose-keymap)
(define-key 'chaffin-keymap "p" 'prose-keymap)
#+END_SRC

** Spelling and Grammar

#+NAME: prose-spellcheck
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<sc-flyspell>>
<<sc-langtool>>
#+END_SRC

Tools for checking lexical and grammatical errors in text buffers[fn:16].

*** Flyspell

#+NAME: sc-flyspell
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package flyspell
    :straight t
    :init
    (with-eval-after-load 'org
      (add-hook 'org-mode-hook 'flyspell-mode))
    :config
    (progn
      (when (executable-find "hunspell")
        (setq-default ispell-program-name "hunspell")
        (setq-default ispell-dictionary "en_US")
        (setq ispell-really-hunspell t))))
#+END_SRC

*** Langtool

LanguageTool is a Java plugin which provides style and grammar
checking for natural language.

#+NAME: sc-langtool
#+BEGIN_SRC emacs-lisp :tangle no
(use-package langtool
  :straight t
  :if *is-mac*
  :after (flyspell)
  :demand t
  :config
  (progn
    (setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.1/libexec/languagetool-commandline.jar"
          langtool-mother-tongue "en"
          langtool-disabled-rules '("WHITESPACE_RULE"))))
#+END_SRC

** Text Completion

#+NAME: prose-completion
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<completion-company-dict>>
<<completion-dictionary-el>>
#+END_SRC

*** Company Dict

#+NAME: completion-company-dict
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-dict
  :straight t
  :after (company)
  :demand t
  :init
  (add-to-list 'company-backends 'company-dict)
  :config
  (setq company-dict-enable-fuzzy t
        company-dict-enable-yasnippet t))
#+END_SRC

*** Dictionary.el
:PROPERTIES:
:ID:       98EF59F6-66E8-47B3-A437-B1D53A74832A
:CUSTOM_ID: dictionary-el
:END:

The [[https://github.com/myrkr/dictionary-el][dictionary.el]] package provides an Emacs client which uses an open source
dictionary server to lookup words. What it lacks in bells and
whistles, it makes up for in compatibility and hackability [fn:17].

#+NAME: completion-dictionary-el
#+BEGIN_SRC emacs-lisp :tangle no
(use-package dictionary
  :straight t
  :commands (dictionary-lookup-definition)
  :init
  (progn
    (define-prefix-command 'dictionary-keymap)
    (define-key 'prose-keymap "d" 'dictionary-keymap)
    (define-key 'dictionary-keymap "i" 'dictionary-lookup-definition)))
#+END_SRC   

** Taking Notes

#+NAME: prose-notes
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<notes-deft>>
<<notes-velocity>>
#+END_SRC

*** Deft

[[https://jblevins.org/projects/deft/][Deft]] is a notetaking application for Emacs.

#+NAME: notes-deft
#+BEGIN_SRC emacs-lisp :tangle no
(use-package deft
  :if *is-mac*
  :straight t
  :bind ("C-x C-n" . deft)
  :config
  (progn
    (setq deft-extensions '("org")
          deft-directory "~/Dropbox/org/notes"
          deft-use-filename-as-title t
          deft-default-extension "org")))
#+END_SRC

*** Org Velocity

#+NAME: notes-velocity
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-velocity
  :straight org
  :bind
  (("C-c n" . org-velocity))
  :demand t
  :init
  (progn
    (setq org-velocity-bucket (expand-file-name "bucket.org" org-directory))))
#+END_SRC

** Reading and viewing prose

#+NAME: prose-readview
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<readview-epub>>
<<readview-text>>
#+END_SRC

*** Nov

[[https://github.com/wasamasa/nov.el][Nov.el]] is a major mode for reading EPUB documents in Emacs.

#+NAME: readview-epub
#+BEGIN_SRC emacs-lisp :tangle no
(use-package nov
  :straight t
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (progn
    (setq nov-text-width 80
          visual-fill-column-center-text t)
    (defun chaffin--nov-font-setup ()
      (face-remap-add-relative 'variable-pitch
                               :family "Bookmania"
                               :weight 'light
                               :height 1.0))
    (when *is-mac*
      (add-hook 'nov-mode-hook 'chaffin--nov-font-setup))
    (add-hook 'nov-mode-hook 'visual-line-mode)
    (add-hook 'nov-mode-hook 'visual-fill-column-mode)))
#+END_SRC

*** Visual Fill Column

Mimics behavior of =fill-column= in =visual-line-mode=.

#+NAME: readview-text
#+BEGIN_SRC emacs-lisp :tangle no
(use-package visual-fill-column
  :straight t
  :config
  (advice-add 'text-scale-adjust
              :after #'visual-fill-column-adjust))
#+END_SRC

** Generating Dummy Text

#+NAME: prose-dummy
#+BEGIN_SRC emacs-lisp :tangle no
(use-package lorem-ipsum
  :straight t)
#+END_SRC

** Graphics
*** Artist Mode

Artist mode is a built-in Emacs package. I'm hoping to expand this
configuration block as I learn how to use it.

#+NAME: artist-mode-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package artist-mode
  :bind ((:map artist-mode-map
               ("C-c C-a p" . artist-select-op-pen-line))))
#+END_SRC

*** UML Diagrams
**** Ditaa

#+NAME: ditaa-config
#+BEGIN_SRC emacs-lisp :tangle no
(when (and *is-mac*
           (executable-find "brew")
           (executable-find "ditaa"))
  (let ((ditaa-path  (replace-regexp-in-string
                      "\n"  ""
                      (shell-command-to-string
                       "realpath $(brew --prefix ditaa)/libexec/*.jar"))))
    (setq org-ditaa-jar-path ditaa-path)))

#+END_SRC

**** PlantUML
#+NAME: plantuml-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package plantuml-mode
  :if (executable-find "plantuml")
  :straight t
  :defines (org-plantuml-jar-path plantuml-jar-path)
  :config
  (progn
    (defun chaffin/plantuml-resolve-jar-path ()
      (when (executable-find "plantuml")
        (replace-regexp-in-string "\n" ""
                                  (shell-command-to-string
                                   "realpath $(brew --prefix plantuml)/libexec/plantuml.jar"))))
      (when *is-mac*
        (setq org-plantuml-jar-path (chaffin/plantuml-resolve-jar-path))
        (setq plantuml-jar-path (chaffin/plantuml-resolve-jar-path)))))
#+END_SRC

*** Graphs
**** Graphviz

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package graphviz-dot-mode
  :straight t
  :if (executable-find "dot")
  :mode (("\\.dot\\'" . graphviz-dot-mode))
  :defines (graphiz-dot-program-set)
  :bind ((:map graphviz-dot-mode-map
               ("M-s g" . graphviz-dot-program-set)))
  :config
  (progn
    (defun graphviz-dot-program-set (&optional program)
      (interactive)
      (let ((dot-program (or program (completing-read "Process: " graphviz-dot-layout-programs))))
        (setq graphviz-dot-dot-program dot-program)))))

(with-eval-after-load 'graphviz-dot-mode
  ;; https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/graphviz/packages.el
  (define-key graphviz-dot-mode-map "{" nil)
  (define-key graphviz-dot-mode-map "}" nil)
  (add-hook 'graphviz-dot-mode-hook 'smartparens-mode)
  (add-to-list 'org-babel-load-languages '(dot . t))
  (setq org-src-lang-modes
        (append '(("dot" . graphviz-dot))
                 (delete '("dot" . fundamental) org-src-lang-modes))))
#+END_SRC

* Code
** Error checking
*** Flycheck

#+NAME: flycheck-config
#+BEGIN_SRC :tangle yes :noweb yes :exports none
<<flycheck-settings>>
<<flycheck-color-mode-line-config>>
#+END_SRC

[[https://github.com/Flycheck/Flycheck][On the fly]] syntax highlighting.

#+NAME: flycheck-settings
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
  (use-package flycheck
    :straight t
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)
                  flycheck-emacs-lisp-load-path 'inherit))
#+END_SRC

*** Flycheck Color Mode Line

Colors the modeline according to current Flycheck state of buffer.

#+NAME: flycheck-color-modeline-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flycheck-color-mode-line
  :straight t
  :init
  (add-hook 'flycheck-mode 'flycheck-color-mode-line-mode))
     #+END_SRC

** Reading and viewing code
*** Indentation

Tabs are the bane of humanity[fn:18]. [[http://www.urbandictionary.com/define.php?term=dont%20%40%20me][Don't @ me]].

#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default tab-width 2
              indent-tabs-mode nil)
#+END_SRC

*** Symbol Highlighting

#+NAME: symbol-hl
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<hl-hl-sexp>>
<<hl-highlight-symbol>>
<<hl-prettify-symbol>>
#+END_SRC

**** Hlsexp

Minor mode to highlight sexp.

#+NAME: hl-hl-sexp
#+BEGIN_SRC emacs-lisp :tangle no
(use-package highlight-sexp
  :straight t)
#+END_SRC

**** Highlight Symbol

#+NAME: hl-highlight-symbol
#+BEGIN_SRC emacs-lisp :tangle no
(use-package highlight-symbol
  :straight t)
#+END_SRC

**** Prettify Symbols

Seems to be problems rendering symbols on Debian. Not sure if this is
because the necessary fonts are not installed or if it's because of
the absence of a window system. I'll check for the latter for now.

#+NAME: hl-prettify-symbol
#+BEGIN_SRC emacs-lisp :tangle no
(when (display-graphic-p)
  (add-hook 'prog-mode-hook 'prettify-symbols-mode))
#+END_SRC

*** Code Folding
**** Origami.el

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package origami
  :straight t
  :after (:all dash s)
  :bind ((:map origami-mode-map
               ([C-tab] . origami-toggle-node)))
  :demand t
  :init
  (progn
    (global-origami-mode t)))
#+END_SRC

** Code Completion
*** Pair Matching
**** Paredit

We could use ~:init~ key to hook the ~enable-paredit-mode~
function to each of the implementing languages like is
done [[https://github.com/tomjakubowski/.emacs.d/blob/master/init.el][here]], but I think adding the hook in the configuration
block of the programming language is easier to follow and
offers more meaningful semantics.

#+NAME: paredit-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package paredit
  :straight t
  :diminish paredit-mode
  :config
  (progn
    (use-package eldoc
      :straight t
      :config
      (eldoc-add-command
       'paredit-backward-delete
       'paredit-close-round))

    (autoload 'enable-paredit-mode "paredit"
      "Turn on pseudo-structural editing of Lisp code." t)))
   #+END_SRC

**** Smartparens

Like paredit, [[https://github.com/Fuco1/smartparens][smartparens]] is a minor-mode for managing parens
pairs. However, it also offers support for curly brackets in
JavaScript objects, angle brackets in HTML, and most other major
programming languages. I think I the "delete-on-command" behavior of
paredit for lisp programming, but in languages where locating
unmatched pairs is less comparable to searching for a needle in a
haystack, smartparens are a great productivity tool.

#+NAME: smartparens-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smartparens
  :straight t
  :init
  (require 'smartparens-config)
  (add-hook 'progmode-hook
            (lambda ()
              (smartparens-mode))))
#+END_SRC

**** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :straight t
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

**** Parinfer

Disabling for now.

#+NAME: parinfer-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<lispy-config>>
<<parinfer-base>>
#+END_SRC

#+NAME: parinfer-base
#+BEGIN_SRC emacs-lisp :tangle no
(use-package parinfer
  :straight t
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
             pretty-parens  ; different paren styles for different modes.
             ;; evil           ; If you use Evil.
             lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
             paredit        ; Introduce some paredit commands.
             smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
             smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC

***** Lispy

#+NAME: lispy-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package lispy
  :straight t
  :defer t)
#+END_SRC

*** Gtags

#+NAME: ggtags
#+BEGIN_SRC emacs-lisp :tangle yes
(if (getenv "GTAGSLABEL")
(use-package ggtags
  :straight t
  :init
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                (ggtags-mode 1))))))
#+END_SRC

** Version Control

#+NAME: vc-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<vcs-svn-alist>>

(when (and (member 'hg chaffin-vcs-svn-alist)
           (executable-find "hg"))
  <<vcs-hg>>)

(when (and (member 'git chaffin-vcs-svn-alist)
           (executable-find "git"))
  <<vcs-git>>)
#+END_SRC

#+NAME: vcs-svn-alist
#+BEGIN_SRC emacs-lisp :tangle no
(defvar chaffin-vcs-svn-alist '(git)
  "List of VCS-SVNs for which libraries and tooling should be installed.
   Currently supports only `git' and `hg' as alist alues.")
#+END_SRC

*** Git

#+NAME: vcs-git
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<git-magit>>
<<git-gist>>
<<git-git-timemachine>>
<<git-git-messenger>>
<<git-git-modes>>
#+END_SRC

**** Magit
:PROPERTIES:
:ID:       AE7AB6CA-A097-4CB0-9B13-2B131CC2F5D9
:CUSTOM_ID: magit
:END:

#+NAME: git-magit
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<magit-kill-buffers>>
<<magit-config>>
<<magit-magithub>>
<<magit-orgit>>
#+END_SRC

[[https://github.com/magit/magit][Magit]] describes itself as one of two git porcelains, the other being
git itself.

A git porcelain is jargon for a program that features a user-friendly
vcs interface, as opposed to lower-level scripting commands.

It's not a vitrified ceramic commonly used for decorative tableware.
Magit would not be very good at that.

As a git client though, magit is awesome.


#+NAME: magit-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package magit
  :straight t
  :bind
  (("C-c v v" . magit-status)
   ("C-c v m" . magit-merge)
   ("C-c v b" . magit-blame)
   ("C-c v C" . magit-clone)
   ("C-c v i" . magit-init)
   ("C-c v l" . magit-log-buffer-file)
   ("C-c v c" . magit-checkout)
   ("C-c v d" . magit-done)
   ("C-c v D" . magit-done-no-prompt)
   ("C-c v f" . magit-stage-file)
   ("C-c v p" . magit-pull)
   ("C-c v P" . magit-push)
   ("C-c v S" . magit-stash))
  :config
  (setq magit-save-repository-buffers 'dontask))
#+END_SRC

***** Killing Magit Buffers

#+NAME: magit-kill-buffers
#+BEGIN_SRC emacs-lisp :tangle yes :exports none :noweb yes
<<magit-done>>
<<magit-done-no-prompt>>
#+END_SRC

Magit creates a lot of buffers for various git operations. This
function cleans up these buffers upon invocation.

#+NAME: magit-done
#+BEGIN_SRC emacs-lisp :tangle no
(defun magit-done (&optional no-prompt)
  "Kill magit buffers upon completion of various git processe(s).
If called with the interactive prefix argument NO-PROMPT, then
yunmodified magit buffers will be killed without confirming."
  (interactive "P")
  (let* ((buffer-names (buffer-list-names))
	 (magit-regexp-string "^\\*magit")
	 (magit-buffer-names (seq-filter (lambda (b) (string-match magit-regexp-string b)) buffer-names))
	 (magit-buffers (mapcar (lambda (b) (get-buffer b)) magit-buffer-names)))
    (cond (no-prompt
	   (mapcar
	    (lambda (b)
	      (if (> (window-count-unique) 1)
		  (progn
		    (let ((w (get-buffer-window)))
		      (kill-buffer b)
		      (delete-window w)))
		(kill-buffer b)))
	    magit-buffers))
	  (magit-buffers
	   (kill-some-buffers magit-buffers))
	  (t
	   (message "No magit buffer(s) to kill" )))))
#+END_SRC

#+NAME: magit-done-no-prompt
#+BEGIN_SRC emacs-lisp :tangle yes
(defun magit-done-no-prompt ()
  "Close magit buffers without prompting."
    (interactive)
    (magit-done 1))
#+END_SRC

***** Magithub

[[https://github.com/vermiculus/github][Magithub]] offers an interface to github to complement magit.

#+NAME: magit-magithub
#+BEGIN_SRC emacs-lisp :tangle no
(use-package magithub
  :after (magit)
  :straight t
  :commands magithub-dispatch-popup
  :bind (:map magit-status-mode-map
	      ("@" . magithub-dispatch-popup))
  :config
  (progn
    (magithub-feature-autoinject t)))
#+END_SRC

***** Orggit

Insert Org links to magit buffers.

#+NAME: magit-orgit
#+BEGIN_SRC emacs-lisp :tangle no
(use-package orgit
  :straight t)
#+END_SRC

**** gist.el

Emacs integration for gist.github.com.

[[https://github.com/defunkt/gist.el][Gist]] requires generating a personal access token with ~gist~ scope, and
optionally ~user~ and ~repo~ scopes.

#+NAME: git-gist
#+BEGIN_SRC emacs-lisp :tangle no
(use-package gist
  :straight t
  :bind
  (("C-c C-g l" . gist-list)
   ("C-c C-g r" . gist-region)
   ("C-c C-g b" . gist-buffer)
   ("C-c C-g p" . gist-buffer-private)
   ("C-c C-g B" . gist-region-or-buffer)
   ("C-c C-g P" . gist-region-or-buffer-private)))
#+END_SRC

**** git-timemachine

Travel back in time (to your last commit).

#+NAME: git-git-timemachine
#+BEGIN_SRC emacs-lisp :tangle no
(use-package git-timemachine
  :straight t
  :bind
  ("C-c v t" . git-timemachine-toggle)
  :config
  (setq git-timemachine-abbreviation-length 7))
#+END_SRC

**** git-messenger

Pop-up feature for viewing the last git commit.

#+NAME: git-git-messenger
#+BEGIN_SRC emacs-lisp :tangle no
(use-package git-messenger
  :straight t
  :bind
  (("C-c C-v m" . git-messenger:popup-message)))
#+END_SRC

**** git modes

#+NAME: git-git-modes
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-modes
  :straight t)
#+END_SRC

*** Mercurial

#+NAME: vcs-hg
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<hg-monky>>
<<hg-ahg>>
#+END_SRC

**** Monky
Monky provides an interactive interface for mercurial. It's
essentially to ~hg~ what [[#magit][magit]] is for ~git~.

#+NAME: hg-monky
#+BEGIN_SRC emacs-lisp :tangle no
(use-package monky
  :straight t
  :config
  (setq monky-process-type 'cmdserver))
#+END_SRC

**** ahg

#+NAME: hg-ahg
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ahg
  :straight t)
#+END_SRC

** Prog Tools
*** DevOps

#+NAME: devops-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
;; Docker
<<devops-docker>>

;; AWS
<<devops-aws>>
#+END_SRC

**** Docker

#+NAME: devops-docker
#+BEGIN_SRC emacs-lisp :tangle no
(use-package dockerfile-mode
  :straight t
  :mode ( "Dockerfile\\'" .  dockerfile-mode))
#+END_SRC

**** Amazon Web Services

#+NAME: devops-aws
#+BEGIN_SRC emacs-lisp :tangle no
(use-package aws
  :straight t
  :config
  (progn
    (autoload 'ec2-desribe-instances "aws")
    (autoload 'ec2-describe-volumes "aws")
    (autoload 'ec2-describe-snapshots "aws")
    (autoload 'ec2-describe-group "aws")
    (autoload 'ec2-get-console "aws")))
#+END_SRC

*** Time Tracking

Automate time tracking with [[https://github.com/wakatime/wakatime-mode][wakatime]].

#+NAME: wakatime-mode-config
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package wakatime-mode
    :straight t
    :if (executable-find "wakatime")
    :init
    (add-hook 'prog-mode-hook 'wakatime-mode)
    :config
    (progn
      (setq wakatime-cli-path
            (expand-file-name
            "~/.local/lib/python3.6/site-packages/wakatime/cli.py")
            wakatime-python-bin
            (expand-file-name "~/.pyenv/shims/python"))
       ;; from spacemacs wakatime layer
      (defun wakatime-dashboard ()
        (interactive)
        (browse-url "https://wakatime.com/dashboard"))))
#+END_SRC

** Prog Lang API

Opt-in to programming languages. A very simplified version of
Spacemacs =dotspacemacs-configuration-layers=.

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar proglang-enabled-list '()
  "List of languages for which straight should install respective tooling,
   syntax-highlighting, and peripherals.")


(defun proglang-enabled-p (lang)
  (member lang proglang-enabled-list))

(defun add-to-list-proglang-enabled (&rest langs)
  (mapcar (lambda (lang)
            (setq proglang-enabled-list (cons lang proglang-enabled-list)))
          langs))

(when *is-mac*
  (add-to-list-proglang-enabled 'asm 'c-c++ 'common-lisp 'clojure 'groovy 'java
                                'javascript 'markdown 'scala 'python 'ruby
                                'web))
#+END_SRC

** Programming Languages
*** ASM

- See Spacemacs [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/asm/][ASM layer]].

#+NAME: asm-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'asm)
  <<asm-asm-hooks>>
  <<asm-asm-mode>>
  <<asm-asm-init-x86-lookup>>)
#+END_SRC

**** ASM Hook Functions

#+NAME: asm-asm-hooks
#+BEGIN_SRC emacs-lisp :tangle no
(defun chaffin-asm-setup ()
  (setq indent-tabs-mode nil)
  (setq tab-stopp-list (number-sequence 2 60 2)))

(defvar asm-colon-has-space nil)

(defun chaffin-asm-colon-check-space ()
  (setq asm-colon-has-space nil)
  (when (and (not (null (char-after)))
             (member (string (char-after)) '(" " "\t")))
    (setq asm-colon-has-space t)))

(defun chaffin-asm-colon-delete-space () 
  (unless asm-colon-has-space
    (call-interactively 'delete-horizontal-space)))

(advice-add 'asm-colon :before 'chaffin-asm-colon-check-space)
(advice-add 'asm-colon :after  'chaffin-asm-colon-delete-space)
#+END_SRC

**** ASM Mode

#+NAME: asm-asm-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package asm-mode
  :straight t
  :mode (("\\.64sa\\'" . asm-mode)
         ("\\.64da\\'" . asm-mode)
         ("\\.32sa\\'" . asm-mode)
         ("\\.32da\\'" . asm-mode))
  :config
  (progn
    (define-key asm-mode-map (kbd "C-j") 'newline)))
#+END_SRC

**** NASM mode

#+NAME: asm-nasm-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package nasm-mode
  :straight t
  :mode
  (("\\.[n]*\\(asm\\|s\\)\\'" . nasm-mode))
  :init
  (progn
    (add-hook 'nasm-mode-hook #'chaffin-asm-setup))
  :config
  (progn
    (define-key nasm-mode-map (kbd "C-j") 'newline)
    (define-key nasm-mode-map (kbd ":") 'asm-colon)))

#+END_SRC

**** ASM Init x86 Lookup

#+NAME: asm-asm-init-x86-lookup
#+BEGIN_SRC emacs-lisp :tangle no
(use-package x86-lookup
  :straight t
  :init
  (progn
    (when (straight-check-package "pdf-tools")
      (setq x86-lookup-browse-pdf-function 'x86-lookup-browse-pdf-pdf-tools)))
  :config
  (setq x86-lookup-pdf
        "~/Dropbox/Documents/Books/ASM/x86-manual/325462-sdm-vol-1-2abcd-3abcd.pdf"))

#+END_SRC

*** C++

#+NAME: c-cxx-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'c-c++)
  <<cc-function-args>>
  (when (executable-find "cmake")
    <<cc-irony-mode>>
    <<cc-cmake-mode>>)
  <<cc-hooks>>)
#+END_SRC

**** C/C++ Mode Hooks

#+NAME: cc-hooks
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<cc-hooks-compile-command>>
<<cc-hooks-flycheck-include-headers>>
<<cc-hooks-smartparens>>
#+END_SRC

***** Per-File Compile Command

#+NAME: cc-hooks-compile-command
#+BEGIN_SRC emacs-lisp :tangle no
(defun chaffin--compile-hook (compiler)
  (unless (file-exists-p "Makefile")
    (set (make-local-variable 'compile-command)
         (let ((file (file-name-sans-extension buffer-file-name)))
           (format "%s %s -o %s" compiler buffer-file-name file)))))

#+END_SRC

****** Use on UCLA Servers                                      :ignore:

The UCLA servers don't have llvm or libclang, so [[#irony-mode][irony-mode]] provided
by adding 'c-c++ to =proglang-enabled= in the [[#proglang-api][Proglang API section]] won't compile.

That blows but loading this this hook regardless corrects the per-file
=compile-command= at least.

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
(when (and (not (proglang-enabled-p 'c-c++))
           ,*is-lnxsrv*)
  <<cc-hooks-compile-command>>)
#+END_SRC

***** Enable Smartparens 

#+NAME: cc-hooks-smartparens
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'c-mode-hook (lambda ()
                         (smartparens-mode t)))

(add-hook 'c++-mode-hook (lambda ()
                         (smartparens-mode t)))
#+END_SRC

***** Add Project Headers to Flycheck Clang Include Path

#+NAME: cc-hooks-flycheck-include-headers
#+BEGIN_SRC emacs-lisp :tangle no
(defun c-cxx-project-header-files ()
  (funcall #'c-cxx-locate-makefile #'c-cxx-makefile-include-directive))

(defun c-cxx-locate-makefile (&optional func)
  (let ((has-makefile (file-exists-p "Makefile")))
    (if has-makefile
        (let ((buf (or (get-buffer "Makefile")
                       (find-file-noselect
                        (expand-file-name "Makefile" default-directory)))))
          (if func
              (funcall func buf)
            (buffer-file-name buf))))))

(defun c-cxx-makefile-include-directive (buffer)
  (expand-file-name "include" default-directory))



(defun c-cxx-flycheck-include-headers-hook ()
  (let ((f (lambda (elt) (not (eq elt 'nil)))))
    (set (make-local-variable 'flycheck-clang-include-path)
         (seq-filter f `(,(c-cxx-project-header-files))))))


(add-to-hooks #'flycheck-mode '(c-mode-hook
                                c++-mode-hook))


(add-to-hooks #'c-cxx-flycheck-include-headers-hook
              '(c-mode-hook
                c++-mode-hook))


#+END_SRC

**** Function Args

CDET enhancements for showing inline function arguments.

#+NAME: cc-function-args
#+BEGIN_SRC emacs-lisp :tangle no
(use-package function-args
  :straight t
  :init
  (fa-config-default)
  :commands (fa-config-default)
  :mode ("\\.hpp\\'" . c++-mode)
  :config
  (add-hook 'c++-mode-hook
	    (lambda ()
	      (setq semantic-case-fold t))))
#+END_SRC

**** Irony Mode
:PROPERTIES:
:ID:       A8CD300F-F34E-4628-98F0-883109589168
:CUSTOM_ID: irony-mode
:END:

Using Irony Mode on macOS is a bitch, not so much because Irony Mode
is a bitch but because macOS doesn't include clang-c header files by
default, and successfully compiling [[http://llvm.org/][llvm]] without conflicting with the
system compiler is non-trivial. I tried to build llvm via
homebrew using the =--with-toolchain= compiler flag. After an hour
with the same "make" dialog I said eff it and =^Z='d on out of there.


/#applefanboyproblems/


#+NAME: cc-irony-mode
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<cc-irony-mode-config>>
<<cc-irony-company-irony>>
<<cc-irony-flycheck-irony>>
#+END_SRC


- [[https://oremacs.com/2017/03/28/emacs-cpp-ide/][oremacs.com - Using Emacs as a C++ IDE]]

#+NAME: cc-irony-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package irony
  :straight t
  :init
  (progn
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode))
  :commands (irony-cdb-autosetup-compile-options irony-install-server)
  :config
  (progn
    (setq irony-additional-clang-options
          '("-std=c++11"
            "-Isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/"
            "-stdlib=libc++"))

    (defun irony-mode-map-hook ()
      (define-key irony-mode-map
	    [remap completion-at-point] 'counsel-irony)
      (define-key irony-mode-map
	    [remap complete-symbol] 'counsel-irony))

    (add-hook 'irony-mode-hook 'irony-mode-map-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)))
#+END_SRC

***** Company Irony

Company backend for C/C++ files using irony mode.

#+NAME: cc-irony-company-irony
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<cc-irony-company-irony-c-cxx>>
<<cc-irony-company-irony-c-headers>>
#+END_SRC

#+NAME: cc-irony-company-irony-c-cxx
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-irony
  :straight t
  :after (:all company irony)
  :defines (company-irony)
  :demand t
  :init
  (progn
    (add-to-list 'company-backends 'company-irony)
    (setq company-backends (delete 'company-semantic company-backends))
    (set 'company-clang-arguments (list "-std=c++11"))))
#+END_SRC

****** Company Irony C Headers

#+NAME: cc-irony-company-irony-c-headers
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-irony-c-headers
  :straight t
  :after (:all company irony company-irony)
  :defines (company-irony-c-headers)
  :demand t
  :init
  (add-to-list 'company-backends 'company-irony-c-headers))
#+END_SRC

***** Flycheck Irony

#+NAME: cc-irony-flycheck-irony
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flycheck-irony
  :straight t
  :after (:all flycheck irony)
  :demand t
  :commands (flycheck-irony-setup)
  :init
  (with-eval-after-load 'flycheck
    '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)))
#+END_SRC

**** Cmake Mode

#+NAME: cc-cmake-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package cmake-mode
  :straight t
  :mode (("CMakeLists\\.txt\\'" . cmake-mode)
         ("\\.cmake\\'" . cmake-mode))

  :config
  (progn
    (add-hook 'cmake-mode-hook
              (lambda ()
                (smartparens-mode t)))))
#+END_SRC

*** Common Lisp

#+NAME: common-lisp
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'common-lisp)
  <<common-lisp-hooks>>
  <<common-lisp-slime>>
)
#+END_SRC

Configuration for common-lisp

#+NAME: common-lisp-hooks
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes
(with-eval-after-load 'paredit
  (add-hook 'lisp-mode-hook #'paredit-mode)
  (add-hook 'lisp-mode-hook #'highlight-symbol-mode)
  (when *is-mac*
    (add-hook 'lisp-mode-hook
              (setq-local dash-plugin-keywords '("lisp")))))
#+END_SRC

**** Slime

[[https://common-lisp.net/project/slime/][SLIME]] is The Superior Lisp Interaction Mode for Emacs.

#+NAME: common-lisp-slime
#+BEGIN_SRC emacs-lisp :tangle no
(use-package slime
  :commands slime
  :defines (slime-complete-symbol*-fancy slime-completion-at-point-functions)
  :straight t
  :init
  (progn
    (setq slime-contribs
            '(slime-asdf
      			  slime-fancy
			        slime-indentation
      			  slime-sbcl-exts
      			  slime-scratch)
	        inferior-lisp-program "sbcl"
      	  ;; enable fuzzy matching in code buffer and SLIME REPL
      	  slime-complete-symbol*-fancy t
      	  slime-completion-at-point-functions 'slime-fuzzy-complete-symbol)

    (defun slime-disable-smartparens ()
      (smartparens-strict-mode -1)
      (turn-off-smartparens-mode))

    (add-hook 'slime-repl-mode-hook #'slime-disable-smartparens)))
#+END_SRC

***** TODO Slime Company
*** Clojure(Script)

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'clojure)
  <<clojure-mode>>
  <<clojure-leiningen>>
  <<clojure-interactive>>)
#+END_SRC

**** Clojure Mode

Everything about [[https://gihub.com/clojure-emacs/clojure-mode][clojure]], is awesome. That's
before we even get to [[#cider][CIDER]]...:beer::raised_hands_tone3:

[INSERT GIF HERE]

#+NAME: clojure-mode
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none
<<clojure-mode-config-base>>
<<clojure-mode-extra-font-locking>>

(with-eval-after-load 'clojure-mode
  <<clojure-mode-config-compojure>>
  <<clojure-mode-config-om-next>>
  (add-hook 'clojure-mode-hook
            (lambda ()
              (setq-local dash-plugin-keywords '("clojure")))))
#+END_SRC

Provides key bindings and font-locking for Clojure.

#+NAME: clojure-mode-config-base
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package clojure-mode
  :straight t
  :mode (("\\.edn$"   . clojure-mode)
         ("\\.cljs$"  . clojurescript-mode)
         ("\\.cljx$"  . clojurex-mode)
         ("\\.cljsc$" . clojurec-mode))
  :config
  (progn
    (setq clojure-indent-style :always-indent)
    (add-hook 'clojure-mode-hook #'enable-paredit-mode)
    (add-hook 'clojure-mode-hook #'show-paren-mode)))
#+END_SRC

***** Clojure Mode Extra Font Locking

Additional syntax highlighting for ~clojure-mode~.

#+NAME: clojure-mode-extra-font-locking
#+BEGIN_SRC emacs-lisp :tangle no
(use-package clojure-mode-extra-font-locking
  :straight t)
#+END_SRC

***** Emacs Indentation for Popular Libraries
****** Compojure

[[https://github.com/weavejester/compojure][Compojure]] is a web framework for Clojure and Clojurescript
applications. This snippet is taken from the [[https://github.com/weavejester/compojure/wiki/Emacs-indentation][Emacs Indentation]] page of
the repository wiki to provide better indentation for compojure macros.

#+NAME: clojure-mode-config-compojure
#+BEGIN_SRC emacs-lisp :tangle no
(define-clojure-indent
  (defroutes 'defun)
  (GET 2)
  (POST 2)
  (PUT 2)
  (DELETE 2)
  (HEAD 2)
  (ANY 2)
  (OPTIONS 2)
  (PATCH 2)
  (rfn 2)
  (let-routes 1)
  (context 2))
#+END_SRC

****** Om Next

#+NAME: clojure-mode-config-om-next
#+BEGIN_SRC emacs-lisp :tangle no
(put-clojure-indent 'defui '(1 nil nil (1)))
(put-clojure-indent 'dom/div 1)
#+END_SRC

**** Clojure Interactive Development Environments

#+NAME: clojure-interactive
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<clojure-interactive-ide>>
(cond ((eq clojure-ide 'cider)
       <<clojure-interactive-cider>>)
      ((eq clojure-ide 'inf-clojure)
       <<clojure-interactive-inf-clojure>>)
      (t (message (concat "Clojure IDE not set. "
			  "Set `clojure-ide' to an appropriate value "
			  "to activate"))))
#+END_SRC

*****  Select Clojure IDE

Two options:
- [[#cider][CIDER]]
- [[#inf-clojure][inf-clojure]]

#+NAME: clojure-interactive-ide
#+BEGIN_SRC emacs-lisp :tangle no
(defcustom clojure-ide 'cider
  "Select the interactive development environment to use
   in clojure mode. Note that Emacs must be restarted when
   the value of this variable is modified for the change
   to take effect."
  :type '(symbol)
  :options '(cider inf-clojure)
  :group 'clojure)
#+END_SRC

***** CIDER
:PROPERTIES:
:ID:       324C7B10-8B92-4C49-8FAC-702C65C7A2EE
:CUSTOM_ID: cider
:END:

[[https://github.com/clojure-emacs/cider][Clojure Interactive Development Environment that Rocks for Emacs]]

#+NAME: clojure-interactive-cider
#+BEGIN_SRC emacs-lisp :tangle no
(use-package cider
  :straight t
  :after (company)
  :config
  (progn
    (setq cider-repl-history-file "~/.emacs.d/cider-history"
          cider-repl-use-clojure-font-lock t
          cider-repl-result-prefix ";; => "
          cider-repl-wrap-history t
          cider-repl-history-size 3000
          cider-show-error-buffer nil
          nrepl-hide-special-buffers t)
    (add-hook 'cider-mode-hook #'eldoc-mode)
    (add-hook 'cider-mode-hook #'company-mode)
    (add-hook 'cider-repl-mode-hook #'company-mode)
    (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
    (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion)
    (add-hook 'cider-repl-mode-hook #'subword-mode)
    (add-hook 'cider-repl-mode-hook #'smartparens-mode)
    (add-to-hooks (lambda () (run-hooks 'prog-mode-hook))
                  '(cider-mode-hook cider-repl-mode-hook))))
#+END_SRC

***** Inf Clojure
:PROPERTIES:
:ID:       D1642BA7-3A2F-40CA-8B80-D28927627A91
:CUSTOM_ID: inf-clojure
:END:

#+NAME: clojure-interactive-inf-clojure
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<inf-clojure-config>>
(with-eval-after-load 'inf-clojure
  <<inf-clojure-figwheel>>)
#+END_SRC


 [[https://github.com/clojure-emacs/inf-clojure][inf-clojure]] is a drop-in replacement for CIDER that provides basic
 integration with a running Clojure subprocess. This package is
 necessary for running an inferior Figwheel process with Emacs.
 It's not as feature-rich as CIDER, but still offers the ability
 to load files, switch namespaces, evaluate expressions, show
 documentation, and do macro-expansion.


#+NAME: inf-clojure-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package inf-clojure
  :straight t
  :init
  (add-hook 'clojure-mode-hook #'inf-clojure-minor-mode))
#+END_SRC

 Now lets write a simple function to run Figwheel as a Clojure
 subprocess.

 #+NAME: inf-clojure-figwheel
 #+BEGIN_SRC emacs-lisp :tangle no
(defun figwheel-repl ()
  (interactive)
  (inf-clojure "lein figwheel"))
 #+END_SRC

**** Leiningen

#+NAME: clojure-leiningen
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<lein-cljsbuild-config>>
<<elein-config>>
#+END_SRC

***** Lein Cljsbuild

Minor mode offering ~lein cljsbuild~ commands for the Leiningen [[https://github.com/emezeske/lein-cljsbuild][plugin]].

#+NAME: lein-cljsbuild-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package cljsbuild-mode
  :straight t
  :init
  (add-to-hooks #'cljsbuild-mode
                 '(clojure-mode clojurescript-mode)))
#+END_SRC

***** elein

[[https://github.com/remvee/elein][Elein]] rovides support for leiningen commands in Emacs.

#+NAME: elein-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package elein
  :straight t)
#+END_SRC

**** Clojure Syntax Checking

#+NAME: clojure-syntax-checking
#+BEGIN_SRC emacs-lisp :tangle no :exports none
<<flycheck-pos-tip>>
#+END_SRC

***** Flycheck Clojure
The [[https://github.com/clojure-emacs/squiggly-clojure][flycheck-clojure]] package allows syntax checking for Clojure(Script).
It uses [[https://github.com/jonase/eastwood][eastwood]], [[http://typedclojure.org/][core.typed]] and [[https://github.com/jonase/kibit][kibit]] to lint Clojure(Script) through CIDER.

#+NAME: flycheck-clojure
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flycheck-clojure
  :straight t
  :after (cider flycheck)
  :config
  (flycheck-clojure-setup))
#+END_SRC

Okay. There's been some snares getting this package to work, but with
the help of this [[http://blog.podsnap.com/squiggly.html][blogpost]] from the ~flycheck-clojure~ repo. (note to
self: READMEs are friends), I'm beginning to make progress.

After cloning the project repo from my local file system, my debugging
process has consisted of the following:

1. Navigate to the [[https://github.com/clojure-emacs/squiggly-clojure/tree/master/sample-project][sample-project]] in the ~squiggly-clojure~ project repo.
2. Open ~core.clj~
2. Launch an nrepl with Cider.
3. See ~flycheck-clojure~ being weird.
4. Annoyed Google search.
5. Edit my ~clojure~ configuration based on the last blog post.
6. Restart Emacs.
7. Repeat.

After running into problems documented in issues [[https://github.com/clojure-emacs/squiggly-clojure/issues/45][#45]], [[https://github.com/clojure-emacs/squiggly-clojure/issues/13][#13]], and [[https://github.com/clojure-emacs/squiggly-clojure/issues/46][#46,]]
+I finally was able to get ~flycheck-clojure~ to stop doing weird things+.

+It's now doing nothing at all.+

The project maintainers provide an [[https://github.com/clojure-emacs/example-config][example-config]] for setting up
emacs, cider, flycheck, and friends. I messed around with this config
for about half an hour and the latency issues and general
inconsistency are the same.

I'm guessing I need to actually include the linters in my project's
~project.clj~, but it's weird this package worked at all for bits and
stretches if the dependencies need to be installed manually.

***** Typed Clojure

Let's give this [[https://github.com/typedclojure/typed-clojure-mode][guy]] a try.

#+NAME: typed-clojure-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package typed-clojure-mode
  :straight t
  :after (clojure-mode)
  :init
  (add-hook 'clojure-mode-hook 'typed-clojure-mode))
#+END_SRC


~java.lang.GoEFUrself~!

 #+BEGIN_EXAMPLE sh
   # CompilerException java.lang.RuntimeException: Unable to resolve symbol: sym in this context, compiling:(clojure/core/types.clj:1170:5)
 #+END_EXAMPLE

 I've now stumbled upon ~cider--debug-mode~.

 This mode cannot be called manually, but with ~C-u C-M-x~ instead,
 and now =flycheck-clojure= +appears to be sort of working+.

3 months later...

The above strikethrough denotes the point in time where I officially
said [[https://www.si.com/nba/2017/05/16/steve-kerr-sneakers-message][FI]].

***** Flycheck-Pos-Tip

The ~flycheck-clojure~ repository recommendeds to install
[[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]] to keep linting and type errors from clashing with
CIDER eldoc information.

#+NAME: flycheck-pos-tip
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flycheck-pos-tip
  :straight t
  :after (flycheck)
  :init
  (flycheck-pos-tip-mode)
  :config
  (setq flycheck-display-errors-function
	#'flycheck-pos-tip-error-messages))
#+END_SRC

*** Emacs Lisp

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    (paredit-mode 1)
      (highlight-symbol-mode 1)
      (when *is-mac*
        (setq-local dash-plugin-keywords '("elisp")))))
#+END_SRC

**** CL Bindings

***** =cl-lib=

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cl-lib
  :straight t)
#+END_SRC

***** =cl-lib-highlight= 

#+BEGIN_SRC emacs-lisp :tangle yes 
(use-package cl-lib-highlight
  :after (cl-lib)
  :straight t)
#+END_SRC

**** Dash 

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dash
  :straight t)
#+END_SRC

**** String manipulation library

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package s
  :straight t)
#+END_SRC

*** Groovy

#+NAME: java-groovy
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package groovy-mode
  :straight t
  :mode ("\\.gradle\\'" . groovy-mode)
  :config
  (progn
    (add-hook 'groovy-mode-hook
              (lambda ()
                (smartparens-mode)
                (setq groovy-indent-offset 2
                      tab-width 4
                      indent-tabs-mode nil
                      c-indent-comments-syntactically-p t)))))
#+END_SRC

*** Java

#+NAME: chaffin-java-backend
#+BEGIN_SRC emacs-lisp :tangle no
(defcustom chaffin--java-backend 'meghanada
  "Select a backend to use when opening a *.java file."
  :type '(symbol)
  :options '(meghanada ensime eclim)
  :group 'programming)
#+END_SRC

#+NAME: java-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'java)
  <<chaffin-java-backend>>
  <<java-hooks>>
  <<java-autodisass-java-bytecode>>
  <<java-gradle>>
  <<java-google-c-style>>
  (cond ((eq chaffin--java-backend 'meghanada)
         (progn
           <<java-meghanada>>
           <<java-realgud>>))
        ((eq chaffin--java-backend 'ensime)
         <<java-ensime>>)
        ((eq chaffin--java-backend 'eclim)
         <<java-eclim>>)))
#+END_SRC

#+NAME: java-hooks
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
(defun java-mode-indent-hook ()
  (c-set-offset 'arglist-close '0)
  (setq indent-tabs-mode nil
        tab-width 2
        c-basic-offset 2))

(defun java-mode-minor-modes-hook ()
  (when (symbolp 'smartparens-mode)
    (smartparens-mode t))
  (when (symbolp 'rainbow-delimiters-mode)
    (raindbow-delimiters-mode t))
  (when (symbolp 'highlight-symbol-mode)
    (highlight-symbol-mode t)))

(defun java-mode-dash-docsets-hook ()
  (setq-local dash-plugin-keywords '("java" "gradle" "groovy")))

;; Enable Hooks
(add-hook 'java-mode-hook 'java-mode-indent-hook)
(add-hook 'java-mode-hook 'java-mode-minor-modes-hook)
(with-system darwin
  (add-hook 'java-mode-hook 'java-mode-dash-docsets-hook))
#+END_SRC

**** Eclim
#+NAME: java-eclim
#+BEGIN_SRC emacs-lisp :tangle no

(use-package eclim
  :straight t
  :if *is-mac*
  ;; load my forked version
  ;; :load-path "site-lisp/emacs-eclim/"
  :config
  (setq eclim-eclipse-dirs '("/Applications/Eclipse.app/Contents/Eclipse")
        eclim-executable "/Applications/Eclipse.app/Contents/Eclipse/eclim"
        eclimd-executable "/Applications/Eclipse.app/Contents/Eclipse/eclimd"
        eclimd-default-workspace "~/Developer/Projects/Java/Workspace"
        eclimd-autostart-with-default-workspace t
        eclim-autostart nil
        eclim-wait-for-process t))

#+END_SRC

**** Gradle Mode
:PROPERTIES:
:ID:       0D4DEC79-5E2D-48D0-A8B1-38E2432565C8
:CUSTOM_ID: gradle-mode
:END:


Gradle is a build tool for Java. It's awesome.

#+NAME: java-gradle
#+BEGIN_SRC emacs-lisp :tangle no
(use-package gradle-mode
  :straight t
  :if (executable-find "gradle")
  :init
  (add-hook 'java-mode-hook
            (lambda ()
              (gradle-mode 1))))
#+END_SRC

**** Meghanada

#+NAME: java-meghanada
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package meghanada
  :straight t
  :commands (meghanada-mode meghanada-code-beautify-before-save)
  :init
  (add-hook 'java-mode-hook
	    (lambda ()
	      ;; enable meghanada mode
	      (meghanada-mode t)))
  (add-hook 'java-mode-hook 'flycheck-mode)
  :config
  (progn
    (setq meghanada-server-remote-debug t
          meghanada-javac-xlint "-Xlint:all,-processing"))
  :bind
  (:map meghanada-mode-map
	("C-S-t" . meghanada-switch-testcase)
	("M-RET" . meghanada-local-variable)
	("M-r"   . meghanada-reference)
	("M-t"   . meghanada-typeinfo)
	("C-z"   . hydra-meghanada/body)))

(defhydra hydra-meghanada (:hint nil :exit t)
  "
  ^Edit^                          ^Tast or Task^
  ^^^^^^---------------------------------------------
  _f_: meghanada-compile-file     _m_: meghanada-restart
  _c_: meghanada-compile-project  _t_: meghanada-run-task
  _o_: meghanada-optimize-import  _j_: meghanada-run-junit-test-case
  _s_: meghanada-switch-test-case _J_: meghanada-run-junit-class
  _v_: meghanada-local-variable   _R_: meghanada-run-junit-recent
  _i_: meghanada-import-all       _r_: meghanada-reference
  _q_: exit                       _T_: meghanada-typeinfo
  "
  ("f" meghanada-compile-file)
  ("m" meghanada-restart)

  ("c"  meghanada-compile-project)
  ("o"  meghanada-optimize-import)
  ("s"  meghanada-switch-test-case)
  ("v"  meghanada-local-variable)
  ("i"  meghanada-import-all)


  ("t"  meghanada-run-task)
  ("T"  meghanada-typeinfo)
  ("j"  meghanada-run-junit-test-case)
  ("J"  meghanada-run-junit-class)
  ("R"  meghanada-run-junit-recent)
  ("r"  meghanada-reference)

  ("q" exit)
  ("z" nil "leave"))
#+END_SRC

***** RealGUD

A front-end for interacting with external debuggers in Emacs.

#+NAME: java-realgud
#+BEGIN_SRC emacs-lisp :tangle no
(use-package realgud
  :straight t
  :after (meghanada))
#+END_SRC

**** Ensime

#+NAME: java-ensime
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ensime
  :straight
  (ensime
   :host github
   :repo "ensime/ensime-emacs"
   :branch "2.0"))
#+END_SRC

**** Autodisass Java Bytecode

The [[https://github.com/gbalats/autodisass-java-bytecode][autodisass-java-bytecode]] package enables automatic disassembly of
Java bytecode inside Emacs buffers.

#+NAME: java-autodisass-java-bytecode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package autodisass-java-bytecode
  :straight t
  :defer t)
#+END_SRC

**** Google C Style

Use Google's Java [[https://google.github.io/styleguide/javaguide.html][styleguide]].

#+NAME: java-google-c-style
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package google-c-style
  :straight
  (google-c-style
   :host github
   :repo "google/styleguide"
   :branch "gh-pages")
   :config
   (add-hook 'java-mode-hook
            (lambda ()
              (google-set-c-style)
              (google-make-newline-indent))))
#+END_SRC

*** JavaScript

#+NAME: js-config
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none
(when (or (proglang-enabled-p 'javascript)
          (proglang-enabled-p 'web-mode))
    <<js-js2>>
    <<js-json-mode>>
)


(when (proglang-enabled-p 'javascript)
  <<js-rjx>>
  <<js-npm-mode>>
  <<js-nvm>>
  <<js-js-comint>>
  <<js-coffee-mode>>
  <<js-typescript>>
  <<js-tern>>
  <<js-company-tern>>)

#+END_SRC

**** js2-mode

#+NAME: js-js2
#+BEGIN_SRC emacs-lisp :tangle no
(use-package js2-mode
  :straight t
  :mode (("\\.js\\'" . js2-mode))
  :config
  (progn
    (setq js-indent-level 2)
    (add-hook 'js2-mode-hook
              (lambda ()
                (flycheck-mode +1)
                (smartparens-mode t)))
    (when *is-mac*
      (add-hook 'js2-mode-hook
                (lambda ()
                  (setq-local dash-plugin-keywords
                              '("javascript" "react" "jquery"
                                "jqueryui" "jquerym" "angularjs"
                                "backbone" "bootstrap" "moo" "prototype"
                                "marionette" "meteor" "sproutcore"
                                "foundation" "lodash" "underscore"
                                "ember" "sencha" "extjs" "titanium"
                                "knockdown" "zepto" "yui" "d3"
                                "svg" "dojo" "coffee" "nodejs" "express"
                                "nodejs" "express" "grunt" "mongoos"
                                "moment" "require" "awsjs" "jasmine"
                                "sails" "sinon" "chai" "html" "cordova"
                                "css" "cordova" "phonegap" "unity3d"
                                "webpack")))))))
#+END_SRC

**** Js Comint
Run an inferior Node process using =comint-mode=

#+NAME: js-js-comint
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package js-comint
  :straight t
  :bind ("C-c M-j" . run-js))
  #+END_SRC

**** rjsx-mode

Real jsx support.

#+NAME: js-rjsx
#+BEGIN_SRC emacs-lisp :tangle no
(use-package rjsx-mode
  :straight t
  :mode "\\.jsx\\'")
#+END_SRC

**** Tern

[[https://github.com/proofit404/company-tern][Tern]] is a code-analysis engine for JavaScript.

Before install, make sure the =tern= executable can be found on your
local file system.


#+NAME: js-tern
#+BEGIN_SRC emacs-lisp :tangle no
(use-package tern
  :if (executable-find "tern")
  :straight t
  :init 
  (progn
    (add-hook 'js2-mode-hook 'tern-mode)))
#+END_SRC

***** Company Tern

[[https://github.com/proofit404/company-tern][Company Tern]] provides code completion using tern company backed.

#+NAME: js-company-tern
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-tern
  :straight t
  :after (:all tern company)
  :demand t
  :init
  (progn
    (add-to-list 'company-backends 'company-tern))
  :config
  (progn
    (setq company-tern-property-marker nil
          company-tern-meta-as-single-line t)))
#+END_SRC

**** JSON

#+NAME: js-json-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package json-mode
  :straight t
  :demand t
  :mode (("\\.json\\'" . json-mode))
  :config
  (progn
    (add-hook 'json-mode-hook 'smartparens-mode)
    (add-hook 'json-mode-hook
          (lambda ()
            (make-local-variable 'js-indent-level)
            (setq js-indent-level 2)))))
#+END_SRC

**** TypeScript

#+NAME: js-typescript
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package tide
  :defer t
  :straight t
  :after (flycheck)
  :config
  (progn
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically
            '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (when *is-mac*
        (setq-local dash-plugin-keywords '("typescript"))))

    ;; Formats buffer before saving
    (add-hook 'before-save-hook 'tide-format-before-save)

    (add-hook 'typescript-mode-hook #'setup-tide-mode)))
#+END_SRC

**** Coffee

#+NAME: js-coffee-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package coffee-mode
  :straight t
  :mode ("\\.coffee\\'" . coffee-mode))
#+END_SRC

**** Add Node Modules Path 

#+NAME: js-add-node-modules-path
#+BEGIN_SRC emacs-lisp :tangle no
(use-package add-node-modules-path
  :if (executable-find "node")
  :straight t
  :init
  (add-hook 'js2-mode-hook #'add-node-modules-path))
#+END_SRC

**** NPM Mode


#+NAME: js-npm-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package npm-mode
  :straight t
  :init
  (progn
  (add-hook 'js2-mode-hook 'npm-mode)
  (add-hook 'json-mode-hook 'npm-mode)))
#+END_SRC

**** Yarn mode

#+NAME: js-yarn-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package yarn-mode
  :straight t)
#+END_SRC

**** NVM

#+NAME: js-nvm
#+BEGIN_SRC emacs-lisp :tangle no
(use-package nvm
  :if (executable-find "nvm")
  :straight t
  :demand t)
#+END_SRC

*** Markdown

#+NAME: markdown-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'markdown)
  <<markdown-mode-config>>
  <<markdown-mode-plus-config>>
  <<markdown-toc-config>>
  <<markdownfmt-config>>
)
#+END_SRC

**** Markdown Mode

- See https://jblevins.org/projects/markdown-mode/

#+NAME markdown-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package markdown-mode
  :straight t
  :commands (markdown-mode gfm-mode)
  :mode
  (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init
  (progn
    (setq markdown-command "multimarkdown")
    (if *is-mac*
        (setq markdown-open-command #'macos-open-with-default-app)))
  :config
  (add-to-hooks  (lambda ()
                   (visual-line-mode t)
                   (auto-fill-mode t))
                 '(markdown-mode-hook gfm-mode-hook)))
#+END_SRC

**** markdown-mode+

#+NAME: markdown-mode-plus-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package markdown-mode+
  :straight t)
#+END_SRC

**** markdown-toc

#+NAME: markdown-toc-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package markdown-toc
  :straight t
  :defer t)
#+END_SRC

**** markdownfmt

#+NAME: markdownfmt-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package markdownfmt
  :straight t
  :defer t
  :commands (markdown-format-buffer markdownfmt-enable-on-save)
  :bind (:map markdown-mode-map
	      ("C-c C-f" . markdown-format-buffer))
  :config
  (add-hook 'markdown-mode-hook #'markdownfmt-enable-on-save))
#+END_SRC

*** Python

#+NAME: py-python
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'python)
  <<py-python-settings>>
  <<py-pyenv>>
  <<py-anaconda>>)
#+END_SRC

**** Python Settings

#+NAME: py-python-settings
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<py-python-settings-keymap>>
<<python-settings-sh-interpreter>>
<<python-settings-dash>>
#+END_SRC

***** Python Prefix Command

#+NAME: py-python-settings-keymap
#+BEGIN_SRC emacs-lisp :tangle no
(define-prefix-command 'python-keymap)
#+END_SRC

***** Python Shell Interpreter

#+NAME: python-settings-sh-interpreter
#+BEGIN_SRC emacs-lisp :tangle no
(when (executable-find "ipython3")
  (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
  (setq python-shell-interpreter "ipython3"
        python-shell-interpreter-args "-i"))

(add-hook 'inferior-python-mode
          (lambda ()
            (smartparens-mode t)))
#+END_SRC

***** Add Dash Docsets

#+NAME: python-settings-dash
#+BEGIN_SRC emacs-lisp :tangle no
(when *is-mac*
  (add-hook 'python-mode-hook
            (lambda ()
              (setq-local dash-plugin-keywords
                          '("python" "django" "twisted" "sphinx"
                            "flask" "tornado" "sqlalchemy" "numpy"
                            "scipy" "salt" "pandas" "matplotlib"
                            "cvp")))))
#+END_SRC

**** Pyenv Mode

#+NAME: py-pyenv
#+BEGIN_SRC emacs-lisp :tangle no
(when (executable-find "pyenv")
  (use-package pyenv-mode
    :straight t
    :init
    (pyenv-mode)
    :commands (pyenv-mode-set pyenv-mode-unset pyenv-mode-versions)
    :config
    (progn
      (with-eval-after-load 'projectile
        (defun projectile-pyenv-mode-set ()
          "Set pyenv version matching project name."
          (let ((project (projectile-project-name)))
            (if (member project (pyenv-mode-versions))
                (pyenv-mode-set project)
              (pyenv-mode-unset)))))

      (add-hook 'projectile-after-switch-project-hook
                'projectile-pyenv-mode-set))))
#+END_SRC

**** Anaconda

#+NAME: py-anaconda>>
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<python-anaconda-mode>>
<<python-anaconda-company>>
#+END_SRC

***** Anaconda Mode

#+NAME: python-anaconda-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package anaconda-mode
  :straight t
  :init
  (progn
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode)))
#+END_SRC

***** Company Anaconda

#+NAME: python-anaconda-company
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-anaconda
  :demand t
  :after (:all anaconda-mode company)
  :straight t
  :init
  (with-eval-after-load 'company
    `(add-to-list company-backends 'company-anaconda)))
#+END_SRC

*** Ruby

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'ruby)
  <<ruby-mode-config>>
  <<rvm-config>>)
#+END_SRC

**** ruby-mode

#+NAME: ruby-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ruby-mode
  :mode "\\.rb\\'"
  :interpreter "ruby"
  :functions inf-ruby-keys
  :config
  (progn
    (defun chaffin/ruby-mode-hook ()
      (require 'inf-ruby)
      (inf-ruby-keys))

    (add-hook #'ruby-mode-hook #'chaffin/ruby-mode-hook)
    (when *is-mac*
      (add-hook 'ruby-mode-hook
                (setq-local dash-plugin-keywords
                            ("ruby" "rails"))))))
#+END_SRC

**** rvm

#+NAME: rvm-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package rvm
  :straight t
  :commands (rvm-use-default)
  :config
  (rvm-use-default))
#+END_SRC

**** TODO enhanced ruby mode

*** Scala

#+NAME: scala-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'scala)
  <<scala-mode-config>>
  <<scala-sbt-mode-config>>)
#+END_SRC

**** Scala Mode
#+NAME: scala-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package scala-mode
  :straight t
  :interpreter
  ("scala" . scala-mode))
#+END_SRC

**** Sbt

#+NAME: scala-sbt-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package sbt-mode
  :commands (sbt-start sbt-command)
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map))
#+END_SRC

*** Web Programming

#+NAME: web-config
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none
(when (proglang-enabled-p 'web)
   <<web-mode-config>>
   <<tagedit-mode-config>>
   <<css-mode-config>>
   <<emmet-mode-config>>
   <<company-web-config>>
   <<htmlize-config>>)
#+END_SRC

**** Web Mode

#+NAME: web-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package web-mode
  :straight t
  :bind (:map web-mode-map
              ;; I should rebind this because it conficts
              ;; with `company-select-next-or-abort'
              ("M-n" . web-mode-tag-match))
  :mode
  (("\\.phtml\\'"      . web-mode)
   ("\\.tpl\\.php\\'"  . web-mode)
   ("\\.twig\\'"       . web-mode)
   ("\\.html\\'"       . web-mode)
   ("\\.htm\\'"        . web-mode)
   ("\\.[gj]sp\\'"     . web-mode)
   ("\\.as[cp]x?\\'"   . web-mode)
   ("\\.eex\\'"        . web-mode)
   ("\\.erb\\'"        . web-mode)
   ("\\.mustache\\'"   . web-mode)
   ("\\.handlebars\\'" . web-mode)
   ("\\.hbs\\'"        . web-mode)
   ("\\.eco\\'"        . web-mode)
   ("\\.ejs\\'"        . web-mode)
   ("\\.djhtml\\'"     . web-mode))

  :config
  (progn
    (setq web-mode-engines-alist
          '(("php" . "\\.phtml\\'")
            ("blade" . "\\.blade\\'")))

    (defun chaffin--web-mode-enable ()
      (setq web-mode-enable-auto-pairing t
            web-mode-enable-css-colorization t
            web-mode-enable-block-face t
            web-mode-enable-part-face t
            web-mode-enable-comment-keywords t
            web-mode-enable-heredoc-fontification t
            web-mode-enable-current-element-highlight t
            web-mode-enable-current-column-highlight t))

    (add-hook 'web-mode-hook #'chaffin--web-mode-enable)


    (defun chaffin--web-mode-indent ()
      (setq web-mode-markup-indent-offset 2
            web-mode-code-indent-offset 2
            web-mode-style-padding 1
            web-mode-script-padding 1
            web-mode-block-padding 0
            web-mode-comment-style 2))

    (add-hook 'web-mode-hook #'chaffin--web-mode-indent)

    (when *is-mac*
      (add-hook 'web-mode-hook
                (lambda ()
                  (setq-local dash-plugin-keywords
                              '("css" "html" "javascript"
                                "react")))))))
#+END_SRC

**** Emmet

#+NAME: emmet-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package emmet-mode
  :straight t
  :defer t
  :init
  (add-to-hooks 'emmet-mode
   '(css-mode-hook
     html-mode-hook
     web-mode-hook)))
#+END_SRC

**** HTML
***** Tag Edit

#+NAME: tagedit-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package tagedit
  :straight t
  :diminish tagedit-mode
  :config
  (progn
    (tagedit-add-experimental-features)
    (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
#+END_SRC

***** TODO Smart Parens

***** Htmlize
#+NAME: htmlize-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package htmlize
  :straight t)
#+END_SRC

**** CSS
***** CSS Mode

#+NAME: css-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package css-mode
  :after (web-mode)
  :straight t
  :commands (css-expand-statment css-contrac-statement)
  :init
  (progn
    (defun css-expand-statment ()
      (interactive)
      (save-excursion
        (end-of-line)
        (search-backward "{")
        (forward-char 1)
        (while (or (eobp) (not (looking-at "}")))
          (let ((beg (point)))
            (newline)
            (search-forward ";")
            (indent-region beg (point))))
        (newline)))

    (defun css-contrac-statement ()
      "Contract CSS Block"
      (interactive)
      (end-of-line)
      (search-backward "{")
      (while (not (looking-at "}"))
        (join-line -1))))
  :config
  (progn
    (setq css-indent-offset 2)
    (add-hook 'css-mode-hook (lambda ()
                                (smartparens-mode +1)))))

#+END_SRC

***** Less

#+NAME: css-less-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package css-less-mode
  :straight t
  :mode ("\\.less\\'" . less-css-mode))
#+END_SRC

***** SASS

#+NAME: sass-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package sass-mode
  :straight t
  :mode ("\\.sass\\'" . sass-mode))
#+END_SRC

***** SCSS

#+NAME: scss-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package scss-mode
  :straight t
  :mode ("\\.scss\\'" . scss-mode))
#+END_SRC

**** Company Web

[[https://github.com/osv/company-web][Company Web]] provides code completion for html-mode, web-mode, jade-mode,
and slim-mode using company.

#+NAME: company-web-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package company-web
  :straight t
  :demand t
  :after (:all company web-mode tern company-tern)
  :init
  (progn
    (defun chaffin--company-web-mode-hook ()
      "Autocompletion hook for web-mode"
      (set (make-local-variable 'company-backends)
           '(company-tern company-web-html company-yasnippet company-files)))

    (add-hook 'web-mode-hook #'chaffin--company-web-mode-hook)
    
    ;; Enable JavaScript completion between <script>...</script> etc.
    (defadvice company-tern (before web-mode-set-up-ac-sources activate)
      "Set `tern-mode' based on current language before running company-tern."
      (if (equal major-mode 'web-mode)
          (let ((web-mode-cur-language
                 (web-mode-language-at-pos)))
            (if (or (string= web-mode-cur-language "javascript")
                    (string= web-mode-cur-language "jsx"))
                (unless tern-mode (tern-mode))
              (if tern-mode (tern-mode -1))))))))
#+END_SRC

* Footnotes

[fn:1]  "Next-generation, purely functional package manager for the
Emacs hacker."

[fn:2] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/General-Variables.html#General-Variables][Emacs Manual - C.4.1 General Variables]]

[fn:3] In lisp, global variables are called /top-level defintions/. By
convention, globals are wrapped in a pair of asterisks called
/earmuffs/. Earmuffs are completely optional -- they have no effect on
how the program is compiled -- its a best practice in all of the many
dialects of Lisp.

[fn:4] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Conditionals.html][Emacs Manual - 10.2 Conditionals]]

[fn:5] [[https://www.emacswiki.org/emacs/EmacsForMacOS][Emacs Wiki - Emacs For MacOS]]

[fn:6] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][Emacs Manual - 51.1.4 Saving Customizations]]

[fn:7] [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Mastering Emacs - Keeping Secrets in Emacs GnuPG Auth Sources]]

[fn:8] [[https://www.quora.com/Is-Windows-POSIX-compliant][Quora - Is Windows POSIX compliant?]]

[fn:9] http://www.jonathanleroux.org/bibtex-mode.html

[fn:10] http://mbork.pl/2018-04-28_org-mru-clock

[fn:11] [[https://matt.hackinghistory.ca/2015/11/11/note-taking-with-pdf-tools/][Note taking with pdf-tools]]

[fn:13] [[https://github.com/d12frosted/homebrew-emacs-plus][d12frosted/homebrew-emacs-plus]]

[fn:12] [[https://www.emacswiki.org/emacs/NeoTree][Emacs Wiki - NeoTree]]

[fn:14] [[https://www.emacswiki.org/emacs/WindowResize][Emacs Wiki - Window Resize]]

[fn:15] =ivy-historian= is provided by the =historian= package.

[fn:16] https://joelkuiper.eu/spellcheck_emacs

[fn:17] [[http://ergoemacs.org/emacs/dictionary_lookup.html][Ergo Emacs - Dictionary Lookup]]

[fn:18] [[https://www.emacswiki.org/emacs/TabsAreEvil][Emacs Wiki - Tabs Are Evil]]

[fn:19] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html#Library-Headers][Emacs Manual - D.8 Conventional Headers for Emacs Libraries]]

