#+title: Jacob Chaffin's Literate Emacs Configuration
#+language: en
#+OPTIONS: num:nil toc:2 tags:nil todo:nil H:3
#+SETUPFILE: /Users/jacobchaffin/.emacs.d/straight/repos/org-html-themes/setup/theme-readtheorg.setup

* Table Of Contents :TOC_3_gh:noexport:
- [[#preface][Preface]]
  - [[#about-this-document][About this document]]
  - [[#literate-programming][Literate Programming]]
  - [[#influences][Influences]]
- [[#base-configuration][Base Configuration]]
  - [[#package-management][Package Management]]
    - [[#straight][Straight]]
  - [[#user-information][User Information]]
  - [[#customization-group][Customization Group]]
  - [[#keybindings][Keybindings]]
    - [[#hydra][Hydra]]
    - [[#smartrep][Smartrep]]
    - [[#personal-keymap][Personal Keymap]]
    - [[#reload-eval-keymap][Reload Eval Keymap]]
  - [[#core][Core]]
    - [[#libraries][Libraries]]
    - [[#constants][Constants]]
    - [[#macros][Macros]]
    - [[#functions][Functions]]
    - [[#extending-the-global-keymap][Extending the Global Keymap]]
    - [[#default-setup][Default Setup]]
    - [[#encryption][Encryption]]
    - [[#alias-yes-or-no][Alias Yes Or No]]
  - [[#system][System]]
    - [[#use-emacs-terminfo][Use Emacs terminfo]]
    - [[#utf-8-encoding][UTF-8 Encoding]]
    - [[#pickup-environment-variables][Pickup environment variables]]
    - [[#system-packages][System Packages]]
    - [[#prodigy][Prodigy]]
  - [[#macos][macOS]]
- [[#latex-and-org-mode][LaTeX and Org Mode]]
  - [[#latex][LaTeX]]
    - [[#auctex][AucTeX]]
    - [[#tex][Tex]]
    - [[#reftex][RefTeX]]
    - [[#bibtex][BibTex]]
    - [[#latex-extra][LaTeX Extra]]
    - [[#latex-preview][LaTeX Preview]]
    - [[#company-auctex][Company AucTeX]]
    - [[#cdlatex][cdlatex]]
    - [[#magic-latex-buffer][Magic Latex Buffer]]
    - [[#auctex-latexmk][Auctex Latexmk]]
    - [[#texinfo][Texinfo]]
    - [[#math][Math]]
  - [[#org-mode][Org Mode]]
    - [[#org-babel][Org Babel]]
    - [[#org-mode-ui][Org Mode UI]]
    - [[#document-management][Document Management]]
    - [[#task-management][Task Management]]
    - [[#idea-management][Idea Management]]
    - [[#org-hacks][Org Hacks]]
  - [[#org-latex][Org LaTeX]]
    - [[#latex-in-org-buffers][LaTeX in Org Buffers]]
    - [[#edit-latex][Edit Latex]]
    - [[#highlight-inline-latex-fragments][Highlight inline LaTeX fragments]]
    - [[#org-ref][Org Ref]]
    - [[#org-pdf][Org PDF]]
    - [[#miscellany][Miscellany]]
  - [[#org-mode-export][Org Mode Export]]
    - [[#enable-backends][Enable Backends]]
    - [[#ox-org][Ox Org]]
    - [[#ox-latex][Ox LaTeX]]
    - [[#ox-bibtex][Ox Bibtex]]
    - [[#ox-pandoc][Ox Pandoc]]
    - [[#ox-gfm][Ox GFM]]
    - [[#ox-hugo][Ox Hugo]]
    - [[#ox-html][Ox HTML]]
    - [[#ox-linguistics][OX Linguistics]]
    - [[#ox-extra][Ox Extra]]
    - [[#ox-publish][Ox Publish]]
- [[#customizing-emacs][Customizing Emacs]]
  - [[#search-and-navigation][Search and Navigation]]
    - [[#the-buffer][The buffer]]
    - [[#the-project][The project]]
    - [[#the-file-system][The file system]]
    - [[#searching][Searching]]
  - [[#initial-display][Initial Display]]
    - [[#initial-buffer][Initial Buffer]]
    - [[#initial-scratch][Initial Scratch]]
    - [[#initial-frame][Initial Frame]]
  - [[#window-manager][Window Manager]]
    - [[#window-resize][Window Resize]]
    - [[#popwin][Popwin]]
    - [[#winner-mode][Winner Mode]]
    - [[#golden-ratio][Golden Ratio]]
    - [[#purpose][Purpose]]
  - [[#copy-and-paste][Copy and Paste]]
  - [[#emacs][Emacs+]]
    - [[#help][Help+]]
    - [[#image][Image+]]
    - [[#info][Info+]]
    - [[#fontlock][FontLock+]]
    - [[#color][Color+]]
    - [[#frame-fns][Frame-fns]]
    - [[#posframe][posframe]]
    - [[#visual-replace][Visual Replace]]
    - [[#other-improvements][Other improvements]]
  - [[#bug-tracking][Bug Tracking]]
  - [[#user-interface][User Interface]]
    - [[#cursor][Cursor]]
    - [[#fonts][Fonts]]
    - [[#modeline][Modeline]]
    - [[#theme][Theme]]
    - [[#icons][Icons]]
    - [[#scrolling][Scrolling]]
    - [[#redisplay][Redisplay]]
    - [[#emojis][Emojis]]
  - [[#multimedia][Multimedia]]
    - [[#emms][emms]]
    - [[#soundcloud][soundcloud]]
- [[#completion][Completion]]
  - [[#company][Company]]
  - [[#snippets][Snippets]]
    - [[#yasnippet][YASnippet]]
    - [[#code-library][Code Library]]
  - [[#minibuffer][Minibuffer]]
    - [[#prompt-properties][Prompt Properties]]
    - [[#ivy-counsel][Ivy (Counsel)]]
    - [[#smex][Smex]]
    - [[#omnibox][Omnibox]]
- [[#terminal][Terminal]]
  - [[#with-editor][With Editor]]
  - [[#multi-term][Multi-Term]]
  - [[#xterm][xterm]]
  - [[#run-bash-on-windowspc][Run Bash On Windows/PC]]
  - [[#eshell][Eshell]]
    - [[#eshell-bookmark][Eshell Bookmark]]
    - [[#eshell-z][Eshell Z]]
    - [[#eshell-prompt-extras][Eshell Prompt Extras]]
  - [[#shell][Shell]]
  - [[#tramp][Tramp]]
    - [[#default-method][Default Method]]
    - [[#anything-tramp][Anything Tramp]]
- [[#web][Web]]
  - [[#web-servers-and-utilities][Web Servers and Utilities]]
  - [[#browsing][Browsing]]
    - [[#webkit-xwidget][Webkit xwidget]]
    - [[#browse-url][Browse url]]
    - [[#browser-utilities-on-macos][Browser utilities on macOS]]
    - [[#google-search-at-point][Google search at point]]
    - [[#search-web][Search Web]]
    - [[#advise-org-open-at-point][Advise =org-open-at-point=]]
    - [[#browse-at-remote][Browse at remote]]
    - [[#set-default-browser][Set default browser]]
    - [[#engine-mode][Engine Mode]]
  - [[#email][Email]]
    - [[#mu][Mu]]
  - [[#cloud-integration][Cloud Integration]]
    - [[#org-onenote][Org OneNote]]
- [[#prose][Prose]]
  - [[#prose-keymap][Prose Keymap]]
  - [[#spelling-and-grammar][Spelling and Grammar]]
    - [[#flyspell][Flyspell]]
    - [[#langtool][Langtool]]
    - [[#academic-phrases][Academic Phrases]]
    - [[#proselint][Proselint]]
  - [[#text-completion][Text Completion]]
    - [[#company-dict][Company Dict]]
    - [[#dictionaryela][Dictionary.ela]]
  - [[#taking-notes][Taking Notes]]
    - [[#deft][Deft]]
    - [[#org-velocity][Org Velocity]]
    - [[#generating-dummy-text][Generating Dummy Text]]
  - [[#writing-mode][Writing mode]]
    - [[#variable-pitch][Variable Pitch]]
    - [[#centered-cursor-mode][Centered Cursor Mode]]
    - [[#olivetti][Olivetti]]
    - [[#writeroom][Writeroom]]
  - [[#reading-and-viewing-prose][Reading and viewing prose]]
    - [[#justify-kp][Justify Kp]]
    - [[#nov][Nov]]
    - [[#adaptive-wrap][Adaptive Wrap]]
    - [[#visual-fill-column][Visual Fill Column]]
    - [[#fill-column-indicator][Fill Column Indicator]]
  - [[#graphics][Graphics]]
    - [[#artist-mode][Artist Mode]]
    - [[#uml-diagrams][UML Diagrams]]
    - [[#graphs][Graphs]]
    - [[#thesaurus][Thesaurus]]
- [[#code][Code]]
  - [[#error-checking][Error checking]]
    - [[#flycheck][Flycheck]]
    - [[#flycheck-color-mode-line][Flycheck Color Mode Line]]
  - [[#code-style][Code Style]]
    - [[#indentation][Indentation]]
    - [[#symbol-highlighting][Symbol Highlighting]]
    - [[#code-folding][Code Folding]]
    - [[#editorconfig][Editorconfig]]
  - [[#code-completion][Code Completion]]
    - [[#pair-matching][Pair Matching]]
    - [[#gtags][Gtags]]
  - [[#version-control][Version Control]]
    - [[#git][Git]]
    - [[#mercurial][Mercurial]]
  - [[#prog-tools][Prog Tools]]
    - [[#devops][DevOps]]
    - [[#time-tracking][Time Tracking]]
    - [[#debugging][Debugging]]
  - [[#prog-lang-api][Prog Lang API]]
  - [[#programming-languages][Programming Languages]]
    - [[#asm][ASM]]
    - [[#cc][C/C++]]
    - [[#common-lisp][Common Lisp]]
    - [[#clojurescript][Clojure(Script)]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#groovy][Groovy]]
    - [[#java][Java]]
    - [[#javascript][JavaScript]]
    - [[#python][Python]]
    - [[#ruby][Ruby]]
    - [[#scala][Scala]]
    - [[#web-programming][Web Programming]]
    - [[#markdown][Markdown]]
  - [[#lsp-mode][Lsp Mode]]
- [[#footnotes][Footnotes]]

* Preface
** About this document

This document contains my entire configuration for the GNU Emacs text editor. It written as some combination of travelogue, technical notebook, personal journal, and [[https://www.stackoverflow.com][StackOverflow]] pasteboard.

** Literate Programming

[[https://en.wikipedia.org/wiki/literate_programming][Literate Programming]] is a method of writing computer programs where the composition, logic, and structure of the program are optimized for human comprehension. Introduced by Donald Knuth in his 1983 eponymous work, a literate program interoperates source code with macros, commentary, and documentation written in natural language prose. The source code is then extracted in a pre-compilation step known as /tangling/.

Where as a program is traditionally presented in a tree structure, a programmer implementing literate techniques arranges parts and forms the relations of these parts in the order of human logic.

A literate program is then structured like an essay or other work of literature, where ideas are connected in the form of a web rather than the unidirectional order of interpretation that is characteristic of a
compiler.

** Influences

- [[http://pages.sachachua.com/.emacs.d/sacha.html][Sacha Chua's Emacs Configuration]]
- [[http://aaronbedra.com/emacs.d/][Aaron Bedra's Emacs Configuration]]
- [[https://github.com/Wasamasa/dotemacs/blob/master/init.org][wasamasa/dotemacs]]
- [[http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/][Optimal Emacs Settings For Org Mode For Literal Programming]]

* Base Configuration
** Package Management
*** Straight
:PROPERTIES:
:ID:       66FE9466-8249-4F2A-9E45-1F1ABC67E643
:CUSTOM_ID: straight
:END:

[[https://github.com/raxod502/straight.el][Straight.el]] is a drop-in replacement for =package.el=. After reading the repository description [fn:1], I impetuously refactored my entire Emacs configuration without reading any of the documentation, because

#+BEGIN_SRC http :pretty :file ./resources/img/documentation-is-for-wimps.png :exports none
GET https://3.bp.blogspot.com/-b3dUlC6AJjI/WE2U_wcJvrI/AAAAAAAAA_4/lciulxFqwrUAZxLol9FVybHCpCdgXSufgCLcB/w1200-h630-p-k-no-nu/documentation-is-for-wimps.png
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
#+END_SRC

#+RESULTS:
[[file:./resources/img/documentation-is-for-wimps.png]]

[[/resources/img/documentation-is-for-wimps.png]]

It took me a while to figure out how straight works and to
conceptualize the way it loads packages  - primarily because documentation is also for people who understand things - but now that I've gotten through the substantial learning curve (made substantially harder due to my misconception regrading the value of reading documentation), I've come to find it reduces a lot of the weirdness of the Emacs loading process and increases the rapidity (shall I say agility? no..) with which I comprehend the way third-party packages are implemented and modify them as I deem necessary.

**** Goto local package repository

Function to jump to a repository installed by [[#straight][straight]]. An
interactive minibuffer completion menu using ivy.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun goto-repo (&optional build-dir)
  "Go to a straight repository directory. If BUILD-DIR, then go to
the build directory for that repository instead."
  (interactive "P")
  (let* ((dir (-> user-emacs-directory
                  (f-join "straight"
                          (if build-dir "build" "repos"))))
         (msg (format "(%s) Goto recipe: " (upcase-initials (f-base dir)))))
    (ivy-read
     msg
     (directory-files dir)
     :action (lambda (package)
               (dired (f-join dir package))))))

  ;; Add to goto-* keymap
  (define-key goto-map "r" #'goto-repo)
#+END_SRC

**** Browse straight repository at GitHub

#+BEGIN_SRC emacs-lisp :tangle yes
(defun straight-browse-on-github (&optional package)
  "Open a straight recipe on GitHub in the `browse-url-default-browser.'"
  (interactive "P")
  (let* ((pkg (if (interactive-p)
                  (completing-read
                   "Which recipe? "
                   (straight-recipes-list straight-recipe-repositories)
                   nil 'require-match)))
         (recipe (cdr (straight-recipes-retrieve (intern pkg)))))
    (destructuring-bind (repo host)
        `(,(plist-get recipe :repo)
          ,(plist-get recipe :host))
      (if (eq host 'github)
          (browse-url (concat "https://github.com/" repo))
        (message "%s is not a GitHub repository :(" pkg)))))
#+END_SRC

** User Information

These values are initialized with the ’name’ and ’email’
environment variables, respectively[fn:2].

Emacs uses these variables to fill the mail header when sending
emails in emacs, and various third-party packages rely on them
for correct behavior.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Jacob Chaffin"
      user-mail-address "jchaffin@ucla.edu")
#+END_SRC

Ensure that programs store emacs information in the cannonical
directory.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-emacs-directory "~/.emacs.d/")
#+END_SRC

** Customization Group

#+NAME: customization-spec
#+BEGIN_SRC emacs-lisp :tangle yes
;; Customization Group
(defgroup halidom nil
  "Customization group for the `halidom' Emacs configuration."
  :group 'applications
  :prefix "halidom-")

(defcustom halidom-prefix-leader "M-m"
  "The prefix map leader key.")
#+END_SRC

** Keybindings
*** Hydra

[[https://github.com/abo-abo/hydra/wiki/Emacs][Hydra]] is a package used to bind a family of related commands with a
common prefix.

#+NAME: hydra-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hydra
  :straight t)
#+END_SRC

**** Ivy Hydra

#+NAME: ivy-hydra-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-hydra
  :after (:all ivy hydra)
  :demand t)
#+END_SRC

**** Perspective

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package perspective
  :straight t)

(use-package persp-projectile
  :after (:all projectile counsel-projectile perspective)
  :bind ((:map projectile-mode-map
               ("s-S" . projectile-persp-switch-project))))
#+END_SRC

*** Smartrep

#+NAME: smartrep-spec
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smartrep
    :straight t)
#+END_SRC

*** Personal Keymap

#+NAME: personal-global-keymap
#+BEGIN_SRC emacs-lisp :tangle yes

;; Make personal keymap
(define-prefix-command 'chaffin-keymap)
(global-set-key "\M-m" 'chaffin-keymap)

#+END_SRC

*** Reload Eval Keymap



#+NAME: user-emacs-keybindings
#+BEGIN_SRC emacs-lisp :tangle yes

;; Make `chaffin-reload-eval-keymap'
(define-prefix-command 'reload-eval-keymap)
(define-key 'chaffin-keymap "r" 'reload-eval-keymap)
(define-key 'reload-eval-keymap "i"  #'straight-reload-init)
(define-key 'reload-eval-keymap "b"  #'straight-eval-buffer)
(define-key 'reload-eval-keymap "r"  #'eval-region)
(define-key 'reload-eval-keymap "f"  #'eval-defun)

#+END_SRC

***** Restart Emacs

The [[https://github.com/iqbalansari/restart-emacs][restart-emacs]] package allows quickly rebooting Emacs
from within Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package restart-emacs
  :bind ((:map reload-eval-keymap
               ("q" . restart-emacs))))
#+END_SRC

** Core
*** Libraries
**** Dash

Functional bindings i.e thread =->= macro.

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package dash
  :config
  (eval-after-load 'dash
    '(dash-enable-font-lock)))

#+END_SRC

**** Cl-lib

Common Lisp extensions.

#+BEGIN_SRC emacs-lisp :tangle eys

(use-package cl-lib
  :straight t)

#+END_SRC

***** cl-highlight

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package cl-lib-highlight
  :demand t
  :after (cl-lib))

#+END_SRC

**** =f=

Declarative file and directory utilities.

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package f
  :straight t)

#+END_SRC

**** =s=

The string manipulation library.

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package s
  :straight t)

#+END_SRC

*** Constants

Variables used throughout this file[fn:3]:

#+NAME: define-constants
#+BEGIN_SRC emacs-lisp :tangle yes
(defconst *is-mac* (eq system-type 'darwin))
(defconst *is-linux* (eq system-type 'gnu/linux))
(defconst *is-windows* (eq system-type 'windows))
#+END_SRC

*** Macros
**** With system

This is a simple utility macro that evaluates code depending on
operating system type.

Where as the top level ~system-type~ aliases are intended to simplify
conditionals of the /if-then/ form or /if-else-then/ form, the
~with-system~ macro is intended for use in structures with a single
conditional clause.

In emacs-lisp, this kind of statement can be expressed with the ~when~
macro[fn:4].

Credits to stack overflow user [[https://stackoverflow.com/users/403018/gerstmann][gerstmann]], who provided this solution
in the following stack overflow [[https://stackoverflow.com/a/26137517/6233622][ticket]].

#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro with-system (type &rest body)
  "If TYPE equals `system-type', evaluate BODY."
  (declare (indent defun))
  `(when (eq system-type ',type)
     ,@body))
#+END_SRC

**** If not

Clojure-like =if-not= macro in elisp.

#+NAME: if-not
#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro if-not (condition then-form &rest rest-forms)
  (declare (indent 2))
  `(progn
     (if (not ,condition)
	 ,then-form
       ,@rest-forms)))
#+END_SRC

**** Major Mode
***** With major mode macro

#+NAME: with-major-mod
#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro with-major-mode (mode &rest body)
  "If the current major-mode is MODE, then execute BODY."
  (declare (indent defun))
  `(when (equal major-mode ',mode)
     ,@body))
#+END_SRC

***** If-Else Major Mode Macro

#+NAME: if-major-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro if-major-mode (mode then-form &rest rest-forms)
  "If MODE, then execute THEN-FORM, else execute REST-FORMS."
  (declare (indent defun))
  `(progn
     (if (equal major-mode ',mode)
	 ,then-form
       ,@rest-forms)))
#+END_SRC

*** Functions
**** Straight-compatible reload init file.

#+NAME: straight-reload-init
#+BEGIN_SRC emacs-lisp :tangle yes

(defun straight-reload-init (&optional debug)
  "Reload init file using straight transaction system."
  (interactive "P")
  (straight-transaction
    (straight-mark-transaction-as-init)
    (message "Reloading initialization file...")
    (when debug
      (set (make-local-variable 'use-literate-p) nil)
      (set (make-local-variable 'user-init-file)
	   (expand-file-name "init.el" user-emacs-directory)))
    (load user-init-file nil 'nomessage)
    (message "Reloading initialization file...done.")))


#+END_SRC

**** Eval Buffer using =straight.el= transaction system.

#+NAME: straight-eval-buffer
#+BEGIN_SRC emacs-lisp :tangle yes
(defun straight-eval-buffer ()
  "Evaluate current buffer using the straight transaction system."
  (interactive)
  (message "Evaluating %s..." (buffer-name))
  (straight-transaction
    (if (or (null buffer-file-name)
            (not (file-exists-p buffer-file-name)))
        (eval-buffer)
      (progn
        (when (string= buffer-file-name user-init-file)
          (straight-mark-transaction-as-init))
        (load-file buffer-file-name))))

  (message "Evaluating %s...done." (buffer-name)))
#+END_SRC

**** Add multiple hooks

See Stack Overflow ticket [[https://stackoverflow.com/a/7400476/6233622][#7398216]]

#+NAME: add-to-hooks-spec
#+BEGIN_SRC emacs-lisp :tangle yes

(defun add-to-hooks (fun hooks)
  "Add function FUN to HOOKS."
  (dolist (hook hooks)
    (add-hook hook fun)))

#+END_SRC

**** Join Strings with Separator

#+NAME: join-strings
#+BEGIN_SRC emacs-lisp :tangle yes

(defun join (seq sep)
  "Concatenate SEQ with SEP as combinator."
  (mapconcat 'identity seq sep))

#+END_SRC


**** Buffers
***** Buffer 
***** Buffer List Names

#+NAME: buffer-list-names-spec
#+BEGIN_SRC emacs-lisp :tangle yes

(defun buffer-list-names ()
  "Get list of buffer names."
  (let ((f (lambda (b) (buffer-name b)))
	(buffer-alist (buffer-list)))
    (mapcar f buffer-alist)))

#+END_SRC

**** Windows

#+NAME: window-count
#+BEGIN_SRC emacs-lisp :tangle yes

(defun window-count ()
  "Count number of windows in the current frame."
  (interactive)
  (length (window-list)))
#+END_SRC


#+NAME: window-count-unique
#+BEGIN_SRC emacs-lisp :tangle yes

(defun window-count-unique ()
  "Count number of unique windows in the current frame"
  (interactive)
  (length (cl-delete-duplicates (mapcar #'window-buffer (window-list)))))

#+END_SRC

#+NAME: window-buffer-list
#+BEGIN_SRC emacs-lisp :tangle yes
(defun window-buffer-list ()
  "Get list of buffers in an open window."
  (let ((windows))
    (dolist (frame (frame-list) windows)
      (with-selected-frame frame
        (setq windows (append (window-list) windows))))
    (map 'seq-uniq (lambda (w) (window-buffer w)) windows)))
#+END_SRC

#+NAME: window-buffer-list-modes
#+BEGIN_SRC emacs-lisp :tangle yes
(defun buffer-list-modes ()
  "Restart org-mode in all org buffers in open windows."
  (let ((modes))
    (dolist (buf (window-buffer-list) modes)
      (with-current-buffer buf
        (setq modes (push major-mode modes))))
    (seq-uniq modes)))
#+END_SRC

**** Copy File Path

A useful utility function for copying the file path to the buffer.

#+NAME: copy-file-path
#+BEGIN_SRC emacs-lisp :tangle yes
(defun copy-file-path (func)

  "Copies the file path and applies the result as an argument to
function FUNC. To copy the file path to the kill-ring, use the interactive
function `copy-file-path-as-kill'."

  (destructuring-bind (file dir)
      (cond ((eq major-mode 'dired-mode)
             (list (substring-no-properties (thingp-at-point 'symbol))
                   dired-directory))
            ((stringp buffer-file-name)
             (mapcar (lambda (f) (funcall f buffer-file-name))
                     '(file-name-nondirectory file-name-directory)))
            (t  (list (buffer-name (current-buffer)) default-directory)))
    (funcall func (expand-file-name file dir))))
#+END_SRC

***** Copy File Path as New Kill

#+NAME: copy-file-path-as-kill
#+BEGIN_SRC emacs-lisp :tangle yes

(defun copy-file-path-as-kill ()
  "Copies the file path of the current dired directory or file buffer to the kill-ring."
  (interactive)
  (let ((func (lambda (s)
                (progn
			            (kill-new s)
			            (message "%s" s)))))
    (copy-file-path func)))
#+END_SRC


**** Remove wildcards from directory files list

#+NAME: directory-files-no-wildcards
#+BEGIN_SRC emacs-lisp :tangle yes
(defun directory-files-no-wildcards (directory &optional full nosort)
   "List directory contents without wildcards"
  (seq-filter (lambda (x)
		(not
		 (or (string-empty-p (string-trim x))
		     (or (string= "." x)
			 (string= ".." x)))))
	      (directory-files directory full nil nosort)))
#+END_SRC

**** Resolve Path

#+BEGIN_SRC emacs-lisp :tangle yes
(defun resolve-path (&rest paths)
  "Concatenate path segments."
  (let ((paths- (mapcar #'directory-file-name paths)))
    (mapconcat 'identity paths- "/")))
#+END_SRC

***** Resolve to User Home Directory

#+NAME: user-home-spec
#+BEGIN_SRC emacs-lisp :tangle yes
(defun user-home (&rest path-segments)
  (let ((root-separator "/"))
    (--> (getenv "HOME")
         (f-split it)
         (append it path-segments)
         (cdr it)
         (cons (concat root-separator (car it) )(cdr it))
         (apply #'resolve-path it))))
#+END_SRC

***** Resolve to Emacs Directory

#+BEGIN_SRC emacs-lisp :tangle yes

(defun emacs-directory (&rest path)
  "Resolve a file path relative to the `user-emacs-directory.'
  PATH is a destructured list of path segments."
  (let* ((initial-path-segments (split-string user-emacs-directory "/" t))
         (path-segments (seq-concatenate 'list initial-path-segments path)))
    (apply #'resolve-path path-segments)))

#+END_SRC

**** Check if HTTPS is supports

From the melpa installation:

#+NAME: ssl-p
#+BEGIN_SRC emacs-lisp :tangle yes

(defun ssl-p ()
  "Determine whether https protocol is supported."
  (and (not (memq system-type '(windows-nt ms-dos)))
       (gnutls-available-p)))

#+END_SRC

*** Extending the Global Keymap
**** Personal Keymap

#+NAME: personal-global-keymap
#+BEGIN_SRC emacs-lisp :tangle yes
;; Make personal keymap
;; (define-prefix-command 'chaffin-keymap)
#+END_SRC

**** macOS Keybindings

#+NAME: keybindings-macos
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<macos-modifier-keymap>>
<<macos-prefix-cmd>>
<<macos-mouse-2>>
#+END_SRC

****** Modifier Keys

macOS specific settings[fn:5].

Maps the modifier keys based on personal preferences.
Also sets terminal coding system to "utf-8".

#+NAME: macos-modifier-keymap
#+BEGIN_SRC emacs-lisp :tangle no
(setq mac-command-modifier 'super
      mac-option-modifier  'meta
      ns-control-modifier  'control
      ns-function-modifier 'hyper)

(when *is-mac*
  (global-set-key (kbd "s-=" ) 'text-scale-increase)
  (global-set-key (kbd "s--")  'text-scale-decrease)
  ;; Default is <XF86Back> .. C-x <right>
  (global-set-key (kbd "s-[")  'previous-buffer)
  (global-set-key (kbd "s-]")  'next-buffer)
  (global-set-key (kbd "s-}")  'ns-next-frame)
  (global-set-key (kbd "s-{")  'ns-prev-frame)
  (global-set-key (kbd "s-L")   'mark-sexp))

#+END_SRC

****** MacOS Prefix Command

#+NAME: macos-prefix-cmd
#+BEGIN_SRC emacs-lisp :tangle no
(define-prefix-command 'macos-keymap)
(define-key 'chaffin-keymap "m" 'macos-keymap)
#+END_SRC

****** Generate =<mouse-2>= on trackpad

As far as I know, there is no trackpad gesture to trigger the
=<mouse-2>= event in Emacs. The following snippet uses
[[elisp-variable::key-translation-map][key-translation-map]] to emulate the =<mouse-2>= event when clicking
the trackpad (=<mouse-1>=) like normal while holding down Command, or
"super", modifier key

#+NAME: macos-mouse-2
#+BEGIN_SRC emacs-lisp :tangle no
;; From https://emacs.stackexchange.com/questions/20946/generate-mouse-2-event-from-macbook-trackpadTrackpage
(when *is-mac*
  (define-key key-translation-map (kbd "<s-mouse-1>") (kbd "<mouse-2>")))
#+END_SRC

**** Unadvise
:PROPERTIES:
:ID:       5699F8BF-4FBD-4CA0-8191-693197553DCC
:END:

- [[https://emacs.stackexchange.com/questions/24657/unadvise-a-function-remove-all-advice-from-it][Remove advice]]

#+NAME: unadvise-spec
#+BEGIN_SRC emacs-lisp :tangle yes

(defun unadvise (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))

#+END_SRC

*** Default Setup
**** Garbage Collection


Consider the following from the documentation:

#+BEGIN_QUOTE
By binding this temporarily to a large number, you can effectively
prevent garbage collection during a part of the program.
#+END_QUOTE

When I first read how the default garbage collection interval in Emacs
is notoriously low, I added an arbitrary number of zeros to the
default value and called it a day. However, because I'm writing this
monolithic configuration and making a lot of mistakes in the process,
I've had to start Emacs with essentially its default settings pretty
frequently and I've noticed the lag time I occasionally experience
when searching long documents is essentially nonexistent in vanilla
Emacs. After reading this [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][blogpost]], it seems that jacking up the GC
interval may actually be the /cause/ of the lagtime rather than
contributing to the solution.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun chaffin/rev-up-gc ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun chaffin/rev-down-gc ()
  (setq gc-cons-threshold 800000))

(add-hook 'minibuffer-setup-hook #'chaffin/rev-up-gc)
(add-hook 'minibuffer-exit-hook 'chaffin/rev-down-gc)
#+END_SRC

**** Files
***** Custom File

By default, Emacs customizations[fn:6] done through the =customize=
interface write to =user-init-file=.

While I usually prefer configuring emacs programmatically, settings
that depend on resources outside of this repository, such as
org-agenda files, will impact portability and potentially break on
other machines.

#+BEGIN_SRC emacs-lisp :tangle yes
(let ((custom-file-directory (file-name-as-directory
			      (concat
			       (file-name-as-directory user-emacs-directory)
			       "custom"))))
  (cond (*is-mac*
         (setq custom-file (concat custom-file-directory "custom-macos.el")))
        (*is-linux*
         (setq custom-file (concat custom-file-directory "custom-linux.el")))
        (*is-windows*
         (setq custom-file (concat custom-file-directory "custom-windows.el")))
        (t
         (setq custom-file (concat custom-file-directory "custom.el"))))

  ;; Create custom file if it does not exist.
  (if-not (file-exists-p custom-file)
      (with-temp-buffer
        (find-file custom-file)
        (save-buffer)
        (kill-buffer)))

  (load custom-file))
#+END_SRC

***** Backup Files

This might come back to bite me one day but I never use them.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq make-backup-files nil)
#+END_SRC

***** Lockfiles

Causes a conflict with ~lsp-mode~.

#+NAME: lockfiles-spec
#+BEGIN_SRC emacs-lisp :tangle yes :comments org
(setq create-lockfiles nil)
#+END_SRC

***** Shortcuts

#+BEGIN_SRC emacs-lisp :tangle yes
(defun goto-init ()
  (interactive)
  (find-file (expand-file-name "init.el" user-emacs-directory)))

(defun goto-literate ()
  (interactive)
  (find-file user-literate-init-file))

(defun goto-tangled-init ()
  (interactive)
  (find-file
    (concat (file-name-sans-extension user-literate-init-file) ".el")))

(define-key goto-map "i" #'goto-init)
(define-key goto-map "l" #'goto-literate)
(define-key goto-map "t" #'goto-tangled-init)

#+END_SRC

**** Load Secrets

#+BEGIN_SRC emacs-lisp :tangle yes
(when (and (executable-find "gpg") *is-mac*)
  (if-not (string-empty-p
	   (shell-command-to-string
	    (concat "gpg --list-keys | grep " user-mail-address)))
      (load-library (concat user-emacs-directory "secrets/secrets.el.gpg"))
    (print (format "GPG key(s) for %s not found"
                   (or user-full-name user-mail-address)))))
#+END_SRC

**** Fill Column

#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default fill-column 80)
#+END_SRC

**** make emacs more modern

- makuto's [[https://github.com/makuto/editorPreferences/blob/master/Emacs/emacsConfig.txt][emacsConfig.txt]]
- Xah Lee [[http://ergoemacs.org/emacs/emacs_make_modern.html][emacs make modern]]

#+BEGIN_SRC emacs-lisp :tangle yes
(global-subword-mode 0)
(delete-selection-mode 1)
(global-hl-line-mode -1)
(save-place-mode 1)
#+END_SRC

**** Prefer newer bytecode

#+BEGIN_SRC emacs-lisp :tangle yes
(setq load-prefer-newer t)
#+END_SRC

*** Encryption
***** GnuTLS

As GitHub user [[https://github.com/wasamasa][wasamasa]] points out in /h?(er|is)|^\S+/ dotfiles,
[[https://gnutls.org/][GnuTLS]] throws several warnings when using the default 256 minimum
prime bits over a TLS handshake.

#+BEGIN_QUOTE
Minimum number of prime bits accepted by GnuTLS for key exchange.
During a Diffie-Hellman handshake, if the server sends a prime
number with fewer than this number of bits, the handshake is
rejected.  (The smaller the prime number, the less secure the
key exchange is against man-in-the-middle attacks.)
#+END_QUOTE


#+BEGIN_SRC emacs-lisp :tangle yes
(setq gnutls-min-prime-bits 4096)
#+END_SRC

***** Use GPG2
****** Set GPG program to 'gpg2'.

#+BEGIN_SRC emacs-lisp :tangle yes
(when *is-mac*
  (let* ((has-brew (not (string-empty-p
			 (shell-command-to-string
			  "which brew"))))
	 (gpg-path (if has-brew
		       (shell-command-to-string "brew --prefix gpg2")))
	 (has-gpg2 (if gpg-path
		       (file-exists-p (replace-regexp-in-string
				       "\n" ""
				       gpg-path)))))
    (setq epg-gpg-program (if has-gpg2 "gpg2" "gpg"))))
#+END_SRC

****** Disable External Pin Entry

Switching between Emacs and an external tools is annoying.

By default, decrypting gpg files in Emacs will result in the pin entry
window being launched from the terminal session.

By disabling the agent info, we can force Emacs to handle this
internally[fn:7].

#+BEGIN_SRC emacs-lisp :tangle yes
(setenv "GPG_AGENT_INFO" nil)
#+END_SRC

Or so I thought...

****** Internal Pinentry Problem and Solution

While I couldn't figure out how to get Emacs to handle gpg pinentry
internally, I was able to still find a satisfactory solution using the
~pinentry-mac~ tool.

Note that this solution requires macOS and using gpg2 for encryption.

See ticket [[https://github.com/Homebrew/homebrew-core/issues/14737][#1437]] from the [[https://github.com/Homebrew/homebrew-core][Homebrew/homebrew-core]] repository.

#+BEGIN_EXAMPLE sh
brew install pinentry-mac
echo "pinentry-program /usr/local/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
killall gpg-agent
#+END_EXAMPLE

**** Ignore Extensions

#+BEGIN_SRC emacs-lisp :tangle yes
(append completion-ignored-extensions
        '("o" "~" ".lbin" ".so" ".a"
          ".git/" ".hg/" ".svn" ".svn-base"))
#+END_SRC

*** Alias Yes Or No

#+NAME: yes-or-no-p
#+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** System
*** Use Emacs terminfo

Setting this variable to nil forces Emacs to use internal terminfo,
rather than the system terminfo.

I'm setting it to non-nil because setting this variable to nil causes
issues with build commands in [[#gradle-mode][gradle-mode]]

#+BEGIN_SRC emacs-lisp :tangle yes
(setq system-uses-terminfo t)
#+END_SRC

*** UTF-8 Encoding

UTF-8 is the recommanded coding system on macOS.

#+BEGIN_SRC emacs-lisp :tangle yes
(when *is-mac*
  (set-terminal-coding-system 'utf-8)
  (prefer-coding-system 'utf-8))
#+END_SRC

*** Pickup environment variables

Emacs relies heavily on shell environment variables.

These variables may not be picked up when launching emacs
from a gui on a unix-like operating system.

The [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] package fixes this problem by copying
user environment variables from the shell.

The ~exec-path-from-shell~ package only works with posix-compliant
operating systems. This may or may not include Microsoft Windows[fn:8].

However, the ~exec-path-from-shell~ instructions recommends loading
the package on linux and macOS operating system. I don't use Windows
all that often anyways, so that's fine with me.

The ~:if~ key of ~use-package~ offers us a really concise way for
conditionally loading dependencies.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
  ;; only load `exec-path-from-shell' package on macos and linux.
  :if (memq window-system '(mac ns))
  :config
  (progn
    (exec-path-from-shell-initialize)
    (setq exec-path-from-shell-check-startup-files nil)))
#+END_SRC

*** System Packages

Utilities for managing system packages in Emacs using an external
package manager.

#+NAME: os-sys-packages
#+BEGIN_SRC emacs-lisp :tangle no
(use-package system-packages
  :straight (system-packages :host gitlab
                             :repo "jabranham/system-packages"))

#+END_SRC

*** Prodigy

Interface for controlling external processes in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package prodigy
  :straight t)
#+END_SRC

** macOS

I work on a macbook, so this section is where I'm loading all of my
settings that rely on local file paths, macOS applications, and
external programs.

#+NAME: macos-config
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none

;; MacOS noweb block
(progn
  ;; macos computer name
  <<macos-computer-name>>

  ;; macos finder
  <<macos-finder-config>>

  ;; custom dash commands
  <<macos-dash-config>>

  ;; macos-dev-utils
  <<macos-dev-utils>>

  ;; osx-dictionary
  <<macos-dictionary>>

  ;; osx-trash
  <<macos-trash>>

  ;; osx-clipboard
  <<macos-pbcopy>>

  ;; osx-app
  <<macos-counsel-osx-app>>)
#+END_SRC

**** MacOS Computer Name

#+NAME: macos-computer-name
#+BEGIN_SRC emacs-lisp :tangle no
(defun chaffin/computer-name-cmd ()
  (let* ((has-scutil (executable-find "scutil"))
	       (scutil-cmd (lambda () (shell-command-to-string "scutil --get ComputerName"))))
    (if has-scutil
	      (replace-regexp-in-string "\n" "" (funcall scutil-cmd))
      nil)))


(defvar computer-name nil)

(when *is-mac*
  (setq computer-name (chaffin/computer-name-cmd)))

(defconst *is-hal* (string= computer-name "hal"))
#+END_SRC

**** MacOS Dev Utils

Small library for opening files and buffers in external text
editors and various other applications on macOS.

#+NAME: macos-dev-utils
#+BEGIN_SRC emacs-lisp :tangle no
(use-package macos-dev-utils
  :straight
  (macos-dev-utils
   :host github
   :repo "jchaffin/macos-dev-utils")
  :demand t
  :config
  (progn
    (define-prefix-command 'macos-open-with-keymap)
    (define-prefix-command 'macos-iterm-keymap)
    (define-key 'macos-keymap
        "o" 'macos-open-with-keymap)
    (define-key 'macos-keymap
        "t" 'macos-iterm-keymap)
    ;; macos-open-with keybindings
    (define-key 'macos-open-with-keymap
        "o" 'macos-open-with-default-app)
    (define-key 'macos-open-with-keymap
        "s" 'open-with-sublime-text)
    (define-key 'macos-open-with-keymap
        "a" 'open-with-atom)
    (define-key 'macos-open-with-keymap
        "v" 'open-with-vscode)
    (define-key 'macos-open-with-keymap
        "b" 'open-with-bbedit)
    (define-key 'macos-open-with-keymap
        "c" 'open-with-coda)
    (define-key 'macos-open-with-keymap
        "t" 'open-with-tower)
    ;; macos-iterm keymap
    (define-key 'macos-iterm-keymap
        "g" 'iterm-goto-filedir-or-home)
    (define-key 'macos-iterm-keymap
        "f" 'iterm-focus)
    (define-key 'macos-iterm-keymap
        "s" 'iterm-shell-command)))

#+END_SRC

**** MacOS Dash
:PROPERTIES:
:ID:       64240356-D983-4422-A359-4F773DD2E946
:CUSTOM_ID: macos-dash
:END:

Dash.app is an application for quickly searching and navigating API
docsets for programming tools and languages.
There are already two Emacs plugins that utilize Dash docsets,
helm-dash and counsel-dash, which is a simple wrapper around helm
dash.

For whatever reason, I can't figure out how to open the docset in an
=eww= frame or in an external browser using =browse-url=.

Because of the OS/licensing restrictions of Dash.app, both these
packages try to solve the problem of creating an interface for users
to navigate, query, and switch between docsets.

Because I've purchased a license and run macOS locally, I'm going to
bypass that problem and define a function that uses the
=dash-plugin://= protocol to launch/switch to the application and
query it with the marked region or symbol at point.

#+NAME: macos-dash-config
#+BEGIN_SRC emacs-lisp :tangle no
(defvar dash-plugin-keywords nil
  "An `alist' of keywords representing the docsets which should
  searched in the query to Dash.app")

(defun macos-dash-at-point ()
  (interactive)
  (let* ((protocol "dash-plugin://")
         (keywords (if dash-plugin-keywords
                       (mapconcat 'identity dash-plugin-keywords ",")
                     "")))
    (browse-url
     (concat
      protocol
      (unless (string-empty-p keywords)
        (concat "keys=" keywords "&"))
      "query="
      (if (use-region-p)
          (buffer-substring-no-properties
           (region-beginning)
           (region-end))
        (substring-no-properties (or (thing-at-point 'symbol) "")))))))
#+END_SRC

**** Reveal in macOS Finder

#+NAME: macos-finder-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package reveal-in-osx-finder
  :if *is-mac*
  :commands (reveal-in-osx-finder))
#+END_SRC

**** OSX Dictionary

Provides an interface to /Dictionary.app/ in Emacs. I am using this
package in conjunction with [[#dictionary-el][dictionary.el]] right now. The latter
package uses an open-source dictionary server to access
dictionaries. I haven't tested it on a different OS yet, but it should
provide comparable functionality to [[https://github.com/xuchunyang/osx-dictionary.el][osx-dictionary.el]] on machines not
running macOS.

#+NAME: macos-dictionary
#+BEGIN_SRC emacs-lisp :tangle no
(use-package osx-dictionary
  :if *is-mac*
  :defines (osx-dictionary-open-dictionary-app-at-point)
  :commands (osx-dictionary-search-word-at-point
             osx-dictionary-search-input)
  :init
  (progn
    (defun osx-dictionary-open-dictionary-app-at-point ()
      (interactive)
      "Open `word' at point in Dictionary.app."

      (shell-command (format "open dict://%s" (thing-at-point 'word))))
    (define-prefix-command 'osx-dictionary-keymap)
    (define-key 'macos-keymap
        "d" 'osx-dictionary-keymap)
    (define-key 'osx-dictionary-keymap
        "d" 'osx-dictionary-search-word-at-point)
    (define-key 'osx-dictionary-keymap
        "s" 'osx-dictionary-search-input)
    (define-key 'osx-dictionary-keymap
        "o" 'osx-dictionary-open-dictionary-app-at-point)))

#+END_SRC

**** OSX Trash

#+NAME: macos-trash
#+BEGIN_SRC emacs-lisp :tangle no
(use-package osx-trash
  :if (and *is-mac* (not (boundp 'mac-system-move-file-to-trash-use-finder)))
  :init
  (progn
    (osx-trash-setup))
  :config
  (progn
    (setq delete-by-moving-to-trash t)))
#+END_SRC

**** OSX Clipboard

#+NAME: macos-pbcopy
#+BEGIN_SRC emacs-lisp :tangle no
(use-package pbcopy
  :if (and *is-mac* (not (display-graphic-p)))
  :init (turn-on-pbcopy))

#+END_SRC

**** Counsel OSX App

 #+NAME: macos-counsel-osx-app
 #+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-osx-app
  :if *is-mac*
  :after (:all ivy)
  :demand t
  :commands counsel-osx-app
  :config
    (progn
      (define-key 'macos-keymap "a" 'counsel-osx-app)))
 #+END_SRC

**** Get Active Minor Modes

#+NAME: active-minor-modes
#+BEGIN_SRC emacs-lisp :tangle yes
(defun list-enabled-minor-modes (&optional buf)
  "The minor modes enabled in the current buffer."
  (let ((auto-save-mode nil)
        (buf (or buf (current-buffer))))
    (cl-loop for mode being the element of minor-mode-list
             when (boundp mode)
             when (symbol-value mode)
             collect mode)))


(defvar minor-modes-enabled-list (list-enabled-minor-modes (current-buffer))
  "The list of enabled minor modes")

(defun minor-mode-enabled-p (mode)
  (member mode (list-enabled-minor-modes (current-buffer))))
#+END_SRC

* LaTeX and Org Mode
** LaTeX
:PROPERTIES:
:ID:       C2BC6BE6-0295-4540-8E6F-9C8620FCBE0B
:CUSTOM_ID: latex
:END:

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<auctex-recipe>>
#+END_SRC

#+NAME: latex-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; Tex
<<latex-tex>>

;; Reftex
<<latex-reftex>>

;; Bibtex
<<latex-bibtex>>

;; Company backend for latex completion
<<latex-company-auctex>>
<<latex-company-math>>

;; Prettify latex buffers
<<latex-magic-latex-buffer>>

;; Extra latex utilities
<<latex-latex-extra>>

;; Cdlatex
<<latex-cdlatex>>

;; Auctex Latexmk
<<latex-auctex-latexmk>>

;; Latex Preview
<<latex-org-preview>>

;; Texinfo mode
<<latex-texinfo>>
#+END_SRC

*** AucTeX

Recent versions of AuCTeX are problematic with straight.
On a clean install, I had to manually run the following command to get
it to work properly:

#+BEGIN_SRC shell :tangle no :results none
( cd $HOME/.emacs.d/straight/repos/auctex && \
      ./autogen.sh && \
      ./configure --with-texmf-dir=`kpsewhich --var-value=TEXMFHOME` && \
      make && make install )
#+END_SRC

#+NAME: auctex-recipe
#+BEGIN_SRC emacs-lisp :tangle no
;; https://github.com/raxod502/straight.el/issues/240
(straight-use-package
 `(auctex
   :host github
   :repo "jchaffin/auctex"
   :files (:defaults (:exclude "doc/*.texi"))))
#+END_SRC

*** Tex

Note that LaTeX packages are loaded, configured, and installed when
='latex= is a member of =org-export-enabled-backends=.

#+NAME: latex-tex
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no
  (use-package tex
    :straight auctex
    :demand t
    :init
    (progn

      ;; Default to latexmk, if possible.
      (defvar latex-build-command
        (if (executable-find "latexmk") "LatexMk" "LaTeX")
        "The default command to use with `TeX-command'.
         This variable is essentially an alias for `TeX-command-default'.")

      (setq TeX-command-default latex-build-command))

    :config
    (progn
      (setq TeX-auto-save t
            TeX-parse-self t
            TeX-syntactic-comment t
            ;; nonstopmode
            TeX-interactive-mode nil
            ;; Don't insert line-break at inline math
            LaTeX-fill-break-at-separators nil)

      (defvar latex-use-auto-fill t)

      (defvar latex-nofill-env '("equation"
                                 "equation*"
                                 "align"
                                 "align*"
                                 "forest"
                                 "tabular"
                                 "tikzpicture"))

      (defun chaffin--tex-auto-fill ()
        "Check whether the pointer is currently inside one of
         the environments in `latex-nofill-env` and inhibits auto-filling
         of the current paragraph."
        (let ((do-auto-fill t)
              (current-environment "")
              (level 0))
          (while (and do-auto-fill
                      (not (string= current-environment "document")))
            (setq level (1+ level)
                  current-environment (LaTeX-current-environment level)
                  do-auto-fill
                  (not (member current-environment latex-nofill-env)))))
        (when do-auto-fill
          (do-auto-fill)))

      (defun latex--auto-fill-mode ()
        "Toggle autofill mode"
        (interactive)
        (auto-fill-mode)
        (setq auto-fill-mode 'chaffin--tex-auto-fill))


      (defun latex--view-hook ()
        ;; Use pdf-tools to open PDF files.
        ;; https://emacs.stackexchange.com/a/19475
        (add-to-list 'TeX-view-program-list '("PDF Tools" TeX-pdf-tools-sync-view))
        (setf (alist-get 'output-pdf TeX-view-program-selection) '("PDF Tools"))
        (setq TeX-source-correlate-start-server t))

      ;; Update PDF buffers after successful LaTeX runs
      (add-hook 'LaTeX-mode-hook 'latex--view-hook)
      (add-hook 'LaTeX-mode-hook (lambda ()
                                   (setq TeX-command-extra-options "-shell-escape")))
      (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

      (when latex-use-auto-fill
        (add-hook 'LaTeX-mode-hook 'latex--auto-fill-mode))


      ;; (when (fboundp 'visual-fill-column-mode)
      ;;   (add-hook 'LaTeX-mode-hook (lambda ()
      ;;                                (setq fill-column 80)
      ;;                                (visual-line-mode 1)
      ;;                                (visual-fill-column-mode 1))))

      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
      (add-hook 'LaTeX-mode-hook 'TeX-fold-mode)
      (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
      (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
      (when (fboundp 'flyspell-mode)
        (add-hook 'LaTeX-mode-hook 'flyspell-mode))
      (when (fboundp 'doc-view-mode)
        (add-hook 'doc-view-mode-hook 'auto-revert-mode))

      (when (fboundp 'ggtags-mode)
        (add-hook 'latex-mode-local-vars-hook (ggtags-mode 1)))))
#+END_SRC

*** RefTeX


RefTeX is a citation and reference tool maintained by the
AucTeX team.

Since Emacs 24.3, its built in with the Emacs distribution.

#+NAME: latex-reftex
#+BEGIN_SRC emacs-lisp :tangle no
(defun chaffin--latex-reftex-hook ()
  (turn-on-reftex)
  (setq reftex-plug-into-AUCTeX '(nil nil t t t)
        reftex-use-fonts t
        reftex-default-bibliography '("~/Dropbox/org/papers/references.bib")))

(add-hook 'LaTeX-mode-hook 'chaffin--latex-reftex-hook)
#+END_SRC

*** BibTex

BibTeX mode is built-in with GNU Emacs. Like /super/ built-in. This is
from the author of the online BibTeX mode manual[fn:9]:

#+BEGIN_QUOTE
I am not the author of this file and am only putting it online because, to my knowledge, it is not available anywhere else anymore and I find it a very valuable reference.  I haven't been able to find out who the current maintainer of the BibTex-Mode for GNU emacs is, but am willing to withdraw this text or add any copyright notice that would be deemed relevant.
#+END_QUOTE

That was from 2009...

These are the recommended settings in the [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org#bibtex-key-format][org-ref]] documentation.

#+NAME: latex-bibtex
#+BEGIN_SRC emacs-lisp :tangle no
(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)
#+END_SRC

*** LaTeX Extra

#+NAME: latex-latex-extra
#+BEGIN_SRC emacs-lisp :tangle no
;; See [1] https://github/Malabarba/latex-extra/issues/23
(let ((byte-compile-warnings '(not free-vars)))
  (use-package latex-extra
    :config
    (add-hook 'LaTeX-mode-hook 'latex-extra-mode)))
#+END_SRC

*** LaTeX Preview
#+NAME: latex-org-preview
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
<<latex-latex-preview-pane>>
<<org-preview-clear-cache>>
<<org-preview-xelatex>>
<<org-preview-luatex>>
<<org-preview-format>>
<<org-preview-justify>>
#+END_SRC



**** LaTeX Preview Pane

Not tangling right now because it's creating a new buffer after every
save.

#+NAME: latex-latex-preview-pane
#+BEGIN_SRC emacs-lisp :tangle no
(use-package latex-preview-pane
  :after (:all pdf-tools tex))
#+END_SRC

**** Clear Cache

#+NAME: org-preview-clear-cache
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-preview-clear-cache ()
  (interactive)
  (let ((preview-cache (f-join default-directory org-preview-latex-image-directory)))
    (if (f-directory? preview-cache)
        (f-delete preview-cache t)
      (message "%s" "Directory 'ltximg' does not exist."))))
#+END_SRC

**** XeLaTeX Preview

#+NAME: org-preview-xelatex
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-format-xelatex-header
      "\\documentclass{article}
        \\usepackage[usenames]{xcolor}
        [PACKAGES]
        [NO-DEFAULT-PACKAGES]
        \\pagestyle{empty}             % do not remove
        \\usepackage{amsmath}
        \\usepackage{fontspec}
        \\usepackage{unicode-math}
        \\setromanfont[Ligatures=TeX]{Latin Modern Roman}
        \\setmathfont[math-style=ISO,bold-style=ISO]{Latin Modern Math}
        % The settings below are copied from fullpage.sty
        \\setlength{\\textwidth}{\\paperwidth}
        \\addtolength{\\textwidth}{-3cm}
        \\setlength{\\oddsidemargin}{1.5cm}
        \\addtolength{\\oddsidemargin}{-2.54cm}
        \\setlength{\\evensidemargin}{\\oddsidemargin}
        \\setlength{\\textheight}{\\paperheight}
        \\addtolength{\\textheight}{-\\headheight}
        \\addtolength{\\textheight}{-\\headsep}
        \\addtolength{\\textheight}{-\\footskip}
        \\addtolength{\\textheight}{-3cm}
        \\setlength{\\topmargin}{1.5cm}
        \\addtolength{\\topmargin}{-2.54cm}

        % some defaults based on personal preference
        \\usepackage{adjustbox}
        \\usepackage[linguistics,edges]{forest}")

;;; XeTex preview
(setq org-preview-xemagick
      '(xemagick
        :programs ("xelatex" "convert")
        :description ("xelatex" "convert")
        :message "You need to install xelatex and imagemagick"
        :use-xcolor t
        :image-input-type "pdf"
        :image-output-type "png"
        :image-size-adjust (1.0 . 1.0)
        :latex-compiler ("xelatex -interaction nonstopmode -output-directory %o %f")
        :image-converter  ("convert -density %D -trim -antialias %f -quality 200 %O")))


(add-to-list 'org-preview-latex-process-alist org-preview-xemagick)

(defun org-preview-xemagick-fragments ()
  (org-element-map (org-element-parse-buffer) 'keyword
    (lambda (keyword)
      (if (string= "xelatex" (org-element-property :value keyword))
          (progn
            (message "%s\n" "Using xelatex format header")
            (set (make-local-variable 'org-format-latex-header)
                 org-format-xelatex-header)
            (set (make-local-variable 'org-preview-latex-default-process)
                 'xemagick)))) nil t))
(add-hook 'org-mode-hook #'org-preview-xemagick-fragments)
#+END_SRC

**** LuaTeX Preview

#+NAME: org-preview-luatex
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-preview-luamagick
      '(luamagick
        :programs ("lualatex" "convert")
        :description "pdf > png"
        :message "you need to install lualatex and imagemagick."
        :use-xcolor t
        :image-input-type "pdf"
        :image-output-type "png"
        :image-size-adjust (1.0 . 1.0)
        :latex-compiler ("lualatex -interaction nonstopmode -output-directory %o %f")
        :image-converter ("convert -density %D -trim -antialias %f -quality 200 %O")))

(add-to-list 'org-preview-latex-process-alist org-preview-luamagick)

(defun org-preview-luamagick-fragments ()
  (org-element-map (org-element-parse-buffer) 'keyword
    (lambda (keyword)
      (if (string= "uclacs" (org-element-property :value keyword))
          (progn
            (message "%s\n" "Using custom preview header for uclacs LaTeX class.")
            (set (make-local-variable 'org-format-latex-header)
                 org-format-lualatex-header)
            (set (make-local-variable 'org-preview-latex-default-process)
                 'luamagick)))) nil t))

(setq org-format-lualatex-header
      "\\documentclass{article}
        \\usepackage[usenames,dvipsnames,svgnames]{xcolor}
        [PACKAGES]
        [DEFAULT-PACKAGES]
        \\pagestyle{empty}             % do not remove
        \\usepackage{amsmath}
        \\usepackage{fontspec}
        \\usepackage{unicode-math}
        \\usepackage{hologo}
        \\setmathfont{STIX2Math}[
          Extension={.otf},
          Scale=1]
        \\setmainfont{STIX2Text}[
          Extension={.otf},
          UprightFont={*-Regular},
          BoldFont={*-Bold},
          ItalicFont={*-Italic},
        BoldItalicFont={*-BoldItalic}]
        % The settings below are copied from fullpage.sty
        \\setlength{\\textwidth}{\\paperwidth}
        \\addtolength{\\textwidth}{-3cm}
        \\setlength{\\oddsidemargin}{1.5cm}
        \\addtolength{\\oddsidemargin}{-2.54cm}
        \\setlength{\\evensidemargin}{\\oddsidemargin}
        \\setlength{\\textheight}{\\paperheight}
        \\addtolength{\\textheight}{-\\headheight}
        \\addtolength{\\textheight}{-\\headsep}
        \\addtolength{\\textheight}{-\\footskip}
        \\addtolength{\\textheight}{-3cm}
        \\setlength{\\topmargin}{1.5cm}
        \\addtolength{\\topmargin}{-2.54cm}
        % The settings below are copied from ucla.cls

        \\usepackage[algoruled,linesnumbered]{algorithm2e}
        \\SetKwInOut{Input}{Input}
        \\SetKwInOut{Output}{Output}
        \\SetKwProg{proc}{Procedure}{}{}
        \\newcommand{\\forcond}[3]{$#1=#2$ \\KwTo $#3$}
        \\newcommand{\\forcondi}[2]{\\forcond{i}{#1}{#2}}
        \\newcommand{\\forcondj}[2]{\\forcond{j}{#1}{#2}}
        \\usepackage{etoolbox}
         \\usepackage{adjustbox}
         \\usepackage{forest}
         \\forestset{
           default preamble={%
             for tree={circle,draw, l sep=2mm}%
           }%
         }%")


(add-to-list 'org-preview-latex-process-alist org-preview-luamagick)

#+END_SRC

**** Preview Format

#+NAME: org-preview-format
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-preview--complement-bg ()
  (with-eval-after-load 'color
    (substring
       (apply #'color-rgb-to-hex
         (color-complement
      	   (frame-parameter nil 'background-color))) 0 7)))

;; (setq org-format-latex-options
;;       (plist-put org-format-latex-options
;;                  :background nil))

;; (setq org-format-latex-options
;;       (plist-put org-format-latex-options
;;                  :foreground (org-preview--complement-bg)))

#+END_SRC

**** Justify Fragment

#+NAME: org-preview-justify
#+BEGIN_SRC emacs-lisp :tangle no
;; specify the justification you want
(require 'ov)
(plist-put org-format-latex-options :justify 'center)

(defun org-justify-fragment-overlay (beg end image imagetype)
  "Adjust the justification of a LaTeX fragment.
The justification is set by :justify in
`org-format-latex-options'. Only equations at the beginning of a
line are justified."
  (cond
   ;; Centered justification
   ((and (eq 'center (plist-get org-format-latex-options :justify))
         (= beg (line-beginning-position)))
    (let* ((img (create-image image 'imagemagick t))
           (width (car (image-size img)))
           (offset (floor (- (/ (window-text-width) 2) (/ width 2)))))
      (overlay-put (ov-at) 'before-string (make-string offset ? ))))
   ;; Right justification
   ((and (eq 'right (plist-get org-format-latex-options :justify))
         (= beg (line-beginning-position)))
    (let* ((img (create-image image 'imagemagick t))
           (width (car (image-display-size (overlay-get (ov-at) 'display))))
           (offset (floor (- (window-text-width) width (- (line-end-position) end)))))
      (overlay-put (ov-at) 'before-string (make-string offset ? ))))))

(defun org-latex-fragment-tooltip (beg end image imagetype)
  "Add the fragment tooltip to the overlay and set click function to toggle it."
  (overlay-put (ov-at) 'help-echo
               (concat (buffer-substring beg end)
                       "mouse-1 to toggle."))
  (overlay-put (ov-at) 'local-map (let ((map (make-sparse-keymap)))
                                    (define-key map [mouse-1]
                                      `(lambda ()
                                         (interactive)
                                         (org-remove-latex-fragment-image-overlays ,beg ,end)))
                                    map)))

;; advise the function to a
;; (advice-add 'org--format-latex-make-overlay :after 'org-justify-fragment-overlay)
;; (advice-add 'org--format-latex-make-overlay :after 'org-latex-fragment-tooltip)
;; That is it. If you get tired of the advice, remove it like this:

;; (advice-remove 'org--format-latex-make-overlay 'org-justify-fragment-overlay)
;; (advice-remove 'org--format-latex-make-overlay 'org-latex-fragment-tooltip)
#+END_SRC

**** Other Stuff

#+NAME: latex-preview-other
#+BEGIN_SRC emacs-lisp :tangle no
;; TODO Need to use `with-temp-buffer', else overrides all
;;      latex image fragments
(defun org-preview-algorithm-environment (orig-func &rest args)
  (let ((algop nil)
        (options (nth 2 args)))
    (org-element-map (org-element-parse-buffer) 'latex-environment
      (lambda (env)
        (let ((beg (org-element-property :begin env))
              (val (org-element-property :value env)))
          (if (string-match "\\\\begin{algorithm}" val)
              (setq algop t)))) nil t)
    (if algop
        (setq options (plist-put options
                         :background (org-preview--complement-bg))))
    (setf (nth 2 args) options)

    (apply orig-func args)))

;; (advice-add 'org-create-formula-image
;;   :around #'org-preview-algorithm-environment)
;; (advice-remove 'org-create-formula-image
;;    #'org-preview-algorithm-environment)
#+END_SRC


*** Company AucTeX

#+NAME: latex-company-auctex
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-auctex
  :demand t
  :after (:all company tex)
  :init
  (company-auctex-init))
#+END_SRC


*** cdlatex

#+NAME: latex-cdlatex
#+BEGIN_SRC emacs-lisp :tangle no
(use-package cdlatex
  :config
  (progn
    ;; Disable auto label insertion in expanded template.
    ;; Labels conflict when used in conjunction with `org-ref'
    (setq cdlatex-insert-auto-labels-in-env-templates nil)
    ;; with AucTeX LaTeX mode
    (add-hook 'LaTeX-mode-hook
              'turn-on-cdlatex)
    ;; with Emacs latex mode
    (add-hook 'latex-mode-hook
              'turn-on-cdlatex)))
#+END_SRC

*** Magic Latex Buffer

Prettify dedicated org-mode latex buffers.

#+NAME: latex-magic-latex-buffer
#+BEGIN_SRC emacs-lisp :tangle no
(use-package magic-latex-buffer
  :after (tex)
  :init
  (progn
    (add-hook 'LaTeX-mode-hook 'magic-latex-buffer))
  :config
  (progn
    (setq magic-latex-enable-block-highlight t
          magic-latex-enable-suscript t
          magic-latex-enable-pretty-symbols t
          magic-latex-enable-block-align nil
          magic-latex-enable-inline-image nil)))
#+END_SRC

*** Auctex Latexmk

#+NAME: latex-auctex-latexmk
#+BEGIN_SRC emacs-lisp :tangle no
(use-package auctex-latexmk
  :after (:all tex)
  :demand t
  :init
  (progn
    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    (auctex-latexmk-setup)))

#+END_SRC

*** Texinfo

#+NAME: latex-texinfo
#+BEGIN_SRC emacs-lisp :tangle no
(use-package texinfo
  :defines texinfo-section-list
  :commands texinfo-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.texi$" . texinfo-mode)))
#+END_SRC

*** Math

#+NAME: latex-math
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<latex-math-completion>>
<<latex-math-unicode>>
<<latex-math-symbols>>
<<latex-math-logic-unicode>>
#+END_SRC

**** Company Math

#+NAME: latex-math-completion
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-math
  :after (company)
  :demand t
  :init
  (add-to-list 'company-backends 'company-math-symbols-unicode))
#+END_SRC

**** Unicode Math mode
#+NAME: latex-math-unicode
#+BEGIN_SRC emacs-lisp :tangle
(use-package latex-unicode-math-mode
  :init
  (add-hook 'LaTeX-mode-hook 'latex-unicode-math-mode))
#+END_SRC

**** Math Symbols

#+NAME: latex-math-symbols
#+BEGIN_SRC emacs-lisp :tangle no
(use-package math-symbols
    :straight t)
#+END_SRC

**** Logical Symbols
Entered on [2018-06-13 Wed 11:42]

#+NAME: latex-math-logic-unicode
#+BEGIN_SRC emacs-lisp :tangle no
(require 'math-symbols)

 (defun logic/insert (char)
    (save-excursion
      (insert char))
    (forward-char))


  (defun logic/insert-and ()
    (interactive)
    (logic/insert "∧"))

  (defun logic/insert-neg ()
    (interactive)
    (logic/insert "⌐")
  )
  (defun logic/insert-or ()
    (interactive)
    (logic/insert "∨"))

  (defun logic/insert-if ()
    (interactive)
    (logic/insert "⟶"))

  (defun logic/insert-iff ()
    (interactive)
    (logic/insert "⟷"))

  (defun logic/insert-p ()
    (interactive)
    (logic/insert "𝑝"))

  (defun logic/insert-q ()
    (interactive)
    (logic/insert "𝑞"))

  (defun logic/insert-lparen ()
    (interactive)
    (logic/insert "("))

  (defun logic/insert-rparen ()
    (interactive)
    (logic/insert ")"))

  (defun logic/insert-paren ()
    (interactive)
    (logic/insert "()"))

  ;; (global-set-key (kbd "M-m l o") #'logic/insert-or)
  ;; (global-set-key (kbd "M-m l (") #'logic/insert-paren)
  ;; (global-set-key (kbd "M-m l )") #'logic/insert-rparen)
  ;; (global-set-key (kbd "M-m l p") #'logic/insert-p)
  ;; (global-set-key (kbd "M-m l q") #'logic/insert-q)
  ;; (global-set-key (kbd "M-m l a") #'logic/insert-and)
  ;; (global-set-key (kbd "M-m l n") #'logic/insert-neg)
  ;; (global-set-key (kbd "M-m l i") #'logic/insert-if)
  ;; (global-set-key (kbd "M-m l I") #'logic/insert-iff)

  ;; (global-set-key (kbd "M-m l l") #'math-symbols-insert)
#+END_SRC

** Org Mode
:PROPERTIES:
:ID:       C2106106-C5F8-4B9B-815D-058678CB9242
:END:

#+NAME: org-mode-settings
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(with-eval-after-load 'org
  <<org-ob>>
  <<org-ui>>
  <<org-docmgr>>
  <<org-taskmgr>>
  <<org-ideamgr>>
  <<org-export>>
)
#+END_SRC

*** Org Babel

#+NAME: org-ob
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-ob-http>>
<<org-ob-cljs>>
<<org-ob-load-langs>>
#+END_SRC

**** Ob Http

#+NAME: org-ob-http
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ob-http
  :after (ob)
  :demand t)
#+END_SRC

**** Ob ClojureScript


[[https://github.com/emacsmirror/ob-clojurescript][ob-clojurescript]] uses [[https://github.com/anmonteiro/lumo][lumo]] to evaluate ClojureScript code blocks in
=org-mode= buffers.

#+NAME: org-ob-cljs
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ob-clojurescript
  :if (executable-find "lumo")
  :after (ob)
  :demand t)
#+END_SRC

**** Load Languages

#+NAME: org-ob-load-langs
#+BEGIN_SRC emacs-lisp :tangle no
 (org-babel-do-load-languages
  'org-babel-load-languages
  '((C . t)
    (clojure . t)
    (clojurescript . t)
    (dot . t)
    (ditaa . t)
    (latex . t)
    (http . t)
    (perl . t)
    (python . t)
    (plantuml . t)
    (java . t)
    (ruby . t)
    (R . t)
    (shell . t)
    (org . t)))
#+END_SRC

*** Org Mode UI

These settings subjectively improve the overall viewable-ness of
org-mode buffers.

#+NAME: org-ui
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-ui-fill>>

;; UI Fixed Width Block
<<org-ui-fixedwidth-image>>

;; UI Org Bullets
<<org-ui-org-bullets>>

;; UI Toc Org
<<org-ui-toc-org>>

;; UI Column View
<<org-ui-column-view>>

;; UI Overlay
<<org-ui-ov>>

;; UI Equation Renumbering
<<org-ui-equation-renumbering>>

#+END_SRC

**** Overlay

#+NAME: org-ui-ov
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ov
  :straight t)

(use-package ov-highlight
  :straight (ov-highlight
             :host github
             :repo "jkitchin/ov-highlight")
  :after ov
  :demand t)

#+END_SRC

**** Org visual fill

#+NAME: org-ui-fill
#+BEGIN_SRC emacs-lisp :tangle no

(defun chaffin--vfc-hook ()
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(add-hook 'org-mode-hook #'chaffin--vfc-hook)


#+END_SRC

**** Per-image display width

Specify image width in org buffer on per-image basis.

#+NAME: org-ui-fixedwidth-image
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-image-actual-width nil)
#+END_SRC

**** Org Bullets

Inspired by this [[http://nadeausoftware.com/articles/2007/11/latency_friendly_customized_bullets_using_unicode_characters][article]] on creating latency-friendly unicode bullets,
the [[https://github.com/sabof/org-bullets][org-bullets]] library provides support for displaying org-mode
bullets as UTF-8 characters.

- The default set ::  ◉ ○ ✸ ✿
- Smaller set :: ► • ★ ▸
- Alternative options :: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶

The default set of bullet points can be modified via the
=[[help:org-bullets-bullet-list][org-bullets-bullet-list]]= variable.


#+NAME: org-ui-org-bullets
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-bullets
  :demand t
  :config
  (progn
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode +1)))))
#+END_SRC

**** TOC Org

The [[https://github.com/snosov1/toc-org][toc-org]] package automatically generates a table of contents for
the org-mode document on save.

The org header represented by a TOC entry can be visited via the
=org-open-at-point= command, which is bound to the keystroke =C-c C-o=
by default.

Note that this functionality is provided by =toc-org= modifying the
value of =org-link-translation-function= to the library internal
=toc-org-unhrefify=, so it won't work if this symbol is non-nil at
time of install.

#+NAME: org-ui-toc-org
#+BEGIN_SRC emacs-lisp :tangle no
(use-package toc-org
  :init
  (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

**** Column View

#+NAME: org-ui-column-view
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
#+END_SRC

**** Equation Renumbering

Anotha [[http://kitchingroup.cheme.cmu.edu/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode/][one]] from the kitchin group!

#+NAME: org-ui-equation-renumbering
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-renumber-environment (orig-func &rest args)
  (let ((results '())
        (counter -1)
        (numberp))

    (setq results (loop for (begin .  env) in
                        (org-element-map (org-element-parse-buffer)
                        'latex-environment
                          (lambda (env)
                            (cons
                             (org-element-property :begin env)
                             (org-element-property :value env))))
                        collect
                        (cond
                         ((and (string-match "\\\\begin{equation}" env)
                               (not (string-match "\\\\tag{" env)))
                          (incf counter)
                          (cons begin counter))
                         ((string-match "\\\\begin{align}" env)
                          (prog2
                              (incf counter)
                              (cons begin counter)
                            (with-temp-buffer
                              (insert env)
                              (goto-char (point-min))
                              ;; \\ is used for a new line. Each one leads to a number
                              (incf counter (count-matches "\\\\$"))
                              ;; unless there are nonumbers.
                              (goto-char (point-min))
                              (decf counter (count-matches
                              "\\nonumber")))))
                         (t
                          (cons begin nil)))))

    (when (setq numberp (cdr (assoc (point) results)))
      (setf (car args)
            (concat
             (format "\\setcounter{equation}{%s}\n" numberp)
             (car args)))))

  (apply orig-func args))

(advice-add 'org-create-formula-image
            :around #'org-renumber-environment)

#+END_SRC

**** Org radiobutton
:PROPERTIES:
:ID:       EA7D1F8C-6A3E-4154-B1ED-581F8B5446C3
:END:

The [[https://github.com/Fuco1/org-radiobutton][org-radiobutton]] package a minor mode which automates the property
requirements for radiobutton lists.

See this [[https://fuco1.github.io/2018-03-11-Use-org-radiobutton-to-select-an-option-from-a-list.html][blogpost]] for more information.

#+NAME: org-ui-radiobutton
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-radiobutton
  :init
  (when (fboundp global-org-radiobutton-mode)
    (global-org-radiobutton-mode)))
#+END_SRC

*** Document Management

#+NAME: org-docmgr
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; Begin Org Doc Manager Section

;; Org Capture
<<org-docmgr-capture>>
;; Org Journal
<<org-docmgr-journal>>
;; Org ID
<<org-docmgr-id>>
;; Org Download
<<org-docmgr-download>>
;; Org Links
<<org-docmgr-links>>
;; Org Bookmark
<<org-docmgr-bookmark>>

;; End Org Doc Manager
#+END_SRC

**** Org Capture

#+NAME: org-docmgr-capture
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; org capture templates
<<org-capture-templates>>
;; org capture html
<<org-capture-html>>
;; org capture contacts
<<org-capture-contacts>>
#+END_SRC

#+NAME: org-capture-templates
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Dropbox/org/todos/TODOs.org" "Tasks")
         "* TODO %?\n %i\n %a")))

(defvar chaffin:created-property-string "
  :PROPERTIES:
  :CREATED: %U
  :END:")
#+END_SRC

***** Org Protocol Capture HTML

#+NAME: org-capture-html
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-protocol-capture-html
  :straight (org-protocol-capture-html
             :host github
             :repo "alphapapa/org-protocol-capture-html")
  :after (org-capture)
  :init
  (progn
    (add-to-list 'org-capture-templates
                 '("w" "Web site" entry
                   (file "~/Dropbox/org/capture.org")
                   "* %a :website:\n\n%U %?\n\n%:initial")))
  :config
  (setq opch-shell-script-path  (expand-file-name "bin/org-protocol-capture-html.sh" user-emacs-directory))
  (defun opch-install-shell-script ()
    (interactive)
    (if-not (file-exists-p opch-shell-script-path)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/alphapapa/org-protocol-capture-html/master/org-protocol-capture-html.sh"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (when (re-search-backward "^\\#!/bin/bash" (point-min) t)
            (write-region (point) (point-max) opch-shell-script-path)
            (set-file-modes opch-shell-script-path #o755)
            (message "Installed to %s" opch-shell-script-path))))))

#+END_SRC

***** Org Contacts

#+NAME: org-capture-contacts
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-contacts
  :straight org
  :config
  (push '("c" "Contacts" entry (file "~/Dropbox/org/contacts.org")
           "* %(org-contacts-template-name)
              :PROPERTIES:
              :EMAIL: %(org-contacts-template-email)
              :END:")
        org-capture-templates))
#+END_SRC

**** Org Journal

#+NAME: org-docmgr-journal
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-journal
  :if *is-mac*
  ;; :bind
  ;; (("M-m j" . org-journal-new-entry))
  :config
  (progn
    (setq org-journal-dir (concat (file-name-as-directory org-directory) "journal")
          org-journal-date-prefix "#+TITLE: "
          org-journal-date-format "%A, %B %d %Y"
          org-journal-time-prefix "* "
          org-journal-time-format "")
    (push '("j" "Journal" entry
            (file+olp+datetree "~/Dropbox/org/journal.org")
            "* %?\nEntered on %U\n %i\n %a")
          org-capture-templates)))
#+END_SRC

**** Org ID

#+NAME: org-docmgr-id
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no :exports none
<<org-id-create-custom>>
<<org-id-custom-id>>
#+END_SRC

#+NAME: org-id-create-custom
#+BEGIN_SRC emacs-lisp :tangle no

(require 'org-id)
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

#+END_SRC

***** Custom ID

Functions shamelessly taken from Lee Hinman's [[https://writequit.org/articles/emacs-org-mode-generate-ids.html][blogpost]] on generating
custom org heading ids.


#+NAME:  org-id-custom-id
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no :exports none
<<org-id-get-custom>>
<<org-id-headline-ids>>
#+END_SRC


****** Get Custom ID

From [[https://writequit.org/articles/emacs-org-mode-generate-ids.html][Emacs Org Mode Generate Ids]] blogpost:

#+NAME: org-id-get-custom
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-custom-id-get (&optional pom create prefix)
  "Get the CUSTOM_ID property of the entry at point-or-marker POM.
   If POM is nil, refer to the entry at point. If the entry does
   not have an CUSTOM_ID, the function returns nil. However, when
   CREATE is non nil, create a CUSTOM_ID if none is present
   already. PREFIX will be passed through to `org-id-new'. In any
   case, the CUSTOM_ID of the entry is returned."
  (interactive)
  (org-with-point-at pom
    (let ((id (org-entry-get nil "CUSTOM_ID")))
      (cond
       ((and id (stringp id) (string-match "\\S-" id))
        id)
       (create
        (setq id (org-id-new (concat prefix "h")))
        (org-entry-put pom "CUSTOM_ID" id)
        (org-id-add-location id (buffer-file-name (buffer-base id))))))))
#+END_SRC

***** Add IDs to Headlines in file

#+NAME: org-id-headline-ids
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-add-ids-to-headlines-in-file ()
  "Add CUSTOM_ID properties to all headlines in the current
  file which do not already have one. Only adds ids if the `auto-id' option is set a non-nil value in the file.

  i.e `#+OPTIONS: auto-id:t`"

  (interactive)
  (save-excursion
    (widen)
    (goto-char (point-min))
    (when (re-search-forward "^\\#+OPTIONS:.*auto-id:t"  (point-max)  t)
      (org-map-entries
       (lambda ()
         (org-custom-id-get (point) 'create))))))

(add-hook 'org-mode-hook
	  (lambda ()
	    (add-hook 'before-save-hook
                (lambda ()
                  (when (and (eq major-mode 'org-mode)
                             (eq buffer-read-only nil))
                    (org-add-ids-to-headlines-in-file))))))
#+END_SRC

**** Org Download

Drag and Drop images directly from a web browser to an org-mode buffer.

#+NAME: org-docmgr-download
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-download
  :defines (org-download-image-dir)
  :commands (org-download-enable  org-download-yank org-download-screenshot)
  :init
  (progn
    (when *is-mac*
      (setq-default org-download-image-dir "~/Dropbox/org/img/"))
    (add-hook  'org-mode-hook 'org-download-enable)
    (add-hook 'dired-mode-hook 'org-download-enable)))
#+END_SRC

**** Org Links

#+NAME: org-docmgr-links
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-links-youtube>>
<<org-links-manpage>>
<<org-links-mac>>
<<org-links-cliplink>>
<<org-links-elisp-help>>
<<org-links-minor>>

#+END_SRC

***** Org Man
:PROPERTIES:
:ID:       28D48CC9-4CAD-4B8C-85B9-9E2275BB338D
:END:

#+NAME: org-links-manpage
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :comments noweb
(use-package org-man
  :straight org)
#+END_SRC

***** Org Elisp Help Links

#+NAME: org-links-elisp-help
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-elisp-help
  :straight t)
#+END_SRC

***** Org Mac Link

#+NAME: org-links-mac
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-mac-link
  :straight org)
#+END_SRC

***** Org Cliplink

Insert org links from the system clipboard.

#+NAME: org-links-cliplink
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-cliplink
  :bind (("C-x p i" . org-cliplink)))
#+END_SRC

***** Org YouTube

From [[http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html][Endless Parentheses]] blogpost:

Embed YouTube Links in iframe.

#+NAME: org-links-youtube
#+BEGIN_SRC emacs-lisp :tangle no
(defvar yt-iframe-format
  ;; You may want to change your width and height.
  (concat "<iframe width=\"440\""
          " height=\"335\""
          " src=\"https://www.youtube.com/embed/%s\""
          " frameborder=\"0\""
          " allowfullscreen>%s</iframe>"))

(org-add-link-type
 "yt"
 (lambda (handle)
   (browse-url
    (concat "https://www.youtube.com/embed/"
            handle)))
 (lambda (path desc backend)
   (cl-case backend
     (html (format yt-iframe-format
                   path (or desc "")))
     (latex (format "\href{%s}{%s}"
                    path (or desc "video"))))))
#+END_SRC

***** Org Link Minor Mode

#+NAME: org-link-minor
#+BEGIN_SRC emacs-lisp :tangle no :comments noweb
(use-package org-link-minor-mode
  :config (org-link-minor-mode +1))
#+END_SRC


**** Org Bookmark
:PROPERTIES:
:ID:       B7904803-C4A6-439D-BD21-E449CF0B79F5
:END:

#+NAME: org-docmgr-bookmark
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-bookmark-heading)
#+END_SRC

*** Task Management

#+NAME: org-taskmgr
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-taskmgr-agenda>>
<<org-taskmgr-pomodoro>>
<<org-taskmgr-gcal>>
<<org-taskmgr-coclock>>
<<org-taskmgr-mru-clock>>
#+END_SRC

**** Org Agenda

#+NAME: org-taskmgr-agenda
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-agenda-diary>>
<<org-agenda-global-todos>>
<<org-agenda-view>>
#+END_SRC

***** Global Agenda File


I use per-project agenda files for the most part (now being managed
using [[#org-projectile][org-projectile]]), but I like having a designated global one for
miscellaneous or arbitrary tasks.

#+NAME: org-agenda-global-todos
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-files '("/Users/jacobchaffin/Dropbox/org/todos/TODOs.org"))
#+END_SRC

***** Agenda View

#+NAME: org-agenda-view
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-tags-column 0)
#+END_SRC

***** Diary

#+NAME: org-agenda-diary
#+BEGIN_SRC emacs-lisp :tangle no
(setq diary-file "~/Dropbox/org/diary.org")
#+END_SRC

***** Org Agenda ng

#+NAME: org-agenda-ng-cfg
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-agenda-ng
  :straight (org-agenda-ng :host github
                           :repo "alphapapa/org-agenda-ng"
                           :files ("org-agenda-ng.el")))

(use-package org-ql
  :straight (org-ql :host github
                           :repo "alphapapa/org-agenda-ng"
                           :files ("org-ql.el")))

#+END_SRC

***** Org Sidebar

#+NAME: org-agenda-sidebar
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-habit
  :straight nil)

(use-package org-sidebar
  :after (:all org-agenda-ng org-ql)
  :init (require 'org-habit)
  :demand t
  :straight (org-sidebar :host github
                         :repo "alphapapa/org-sidebar"))
#+END_SRC

**** Org Projectile
:PROPERTIES:
:ID:       D469E868-7FCB-45FD-AB3E-609018F4BC58
:CUSTOM_ID: org-projectile
:END:

#+NAME: org-taskmgr-projectile
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-projectile
    :after (projectile)
    :commands (org-projectile-files-to-agenda)
    :demand t
    :init
    (progn

      (defun org-projectile-files-to-agenda ()
	"Add org-projectile project files to org-agenda."
	(interactive)
	(let* ((todo-filepath
		(or
		 (bound-and-true-p org-projectile-per-project-filepath)
		 "org/TODOs.org"))
	       (active-projects
		(seq-filter (lambda (proj)
			      (file-exists-p
			       (expand-file-name todo-filepath proj)))
			    projectile-known-projects))
	       (project-agenda-files
		(mapcar (lambda (proj)
			  (expand-file-name todo-filepath proj))
			active-projects)))
	  (setq org-agenda-files (append org-agenda-files project-agenda-files))))
      (org-projectile-files-to-agenda))
    :config
    (progn

      (setq org-projectile-per-project-filepath "org/TODOs.org")

      (org-projectile-per-project)

      (setq org-projectile-capture-template
	    (format "%s%s" "** TODO %?" chaffin:created-property-string))

      (add-to-list 'org-capture-templates
		   (org-projectile-project-todo-entry
		    :capture-character "l"
		    :capture-heading "Linked Project TODO"))

      (add-to-list 'org-capture-templates
		   (org-projectile-project-todo-entry
		    :capture-character "p"))

      (setq org-confirm-elisp-link-function nil)
      (global-set-key (kbd "C-c p n") 'org-projectile-project-todo-completing-read)))


#+END_SRC

**** Org Pomodoro
:PROPERTIES:
:ID:       3600535E-2C20-4E33-8572-E933319E87B3
:CUSTOM_ID: org-pomodoro
:END:

#+NAME: org-taskmgr-pomodoro
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-pomodoro
  :bind (:map org-mode-map
              ("C-c M-RET p" . org-pomodoro))
  :config
  (progn
    (defalias #'org-pomodoro-path
      (apply-partially #'emacs-directory "resources" "wav"))

    (setq org-pomodoro-audio-player "/usr/bin/afplay"
          org-pomodoro-tick-sound (org-pomodoro-path "clock-ticking-2.wav")
          ;; Start Settings
          org-pomodoro-start-sound-p t ;; enable starting sound
          org-pomodoro-start-sound-args "--volume 0.08"
          org-pomodoro-start-sound (org-pomodoro-path "Victory.wav")
        ;; Finished Settings
          org-pomodoro-finished-sound-args "--volume 0.2"
          org-pomodoro-finished-sound (org-pomodoro-path "Waves.wav")
          ;; Short Break Settings
          org-pomodoro-short-break-length 5
          org-pomodoro-short-break-sound-args "--volume 0.2"
          org-pomodoro-short-break-sound org-pomodoro-finished-sound
          ;; Long Break Settings
          org-pomodoro-long-break-length 15
          org-pomodoro-long-break-sound-args "--volume 0.2"
          org-pomodoro-long-break-sound (org-pomodoro-path "Complete.wav"))))
#+END_SRC

**** Org Google Calendar

The [[https://github.com/myuhe/org-gcal.el][org-gcal]] package provides org-mode integration with Google
Calendar.

#+NAME: org-taskmgr-gcal
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-gcal
  :config
  (progn
    (setq org-gcal-file-alist
          '(("8u01m20o80k2ja1lpp93qa3u98@group.calendar.google.com" . "~/Dropbox/Documents/Courses/cs180/org/cs180-gcal.org")
            ("jchaffin@g.ucla.edu" . "~/Dropbox/org/todos/TODOS.gcal.org")))))
#+END_SRC

**** Counsel Org Clock

#+NAME: org-taskmgr-coclock
#+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-org-clock
  :straight (:host github
                   :repo "akirak/counsel-org-clock")
  :after (:all org-agenda ivy))
#+END_SRC

**** Org Mru Clock

The [[https://github.com/unhammer/org-mru-clock][org-mru-clock]] package prefills clock history with clocks from
org agenda files.

#+NAME: org-taskmgr-mru-clock
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-mru-clock
  :after (:all org-agenda ivy)
  :demand t
  :bind (("C-c C-x i" . org-mru-clock-in)
         ("C-c C-x C-j" . org-mru-clock-select-recent-task))
  :init
  (progn
    (setq org-mru-clock-how-many 50
          org-mru-completing-read #'ivy-completing-read)))
#+END_SRC

Check out this [[http://mbork.pl/2018-04-28_org-mru-clock][article]] for how these two packages compare.[fn:10].

*** Idea Management

#+NAME: org-ideamgr
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-ideamgr-brain>>
<<org-ideamgr-drill>>
#+END_SRC

**** Org Brain

#+NAME: org-ideamgr-brain
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-brain
  :if *is-mac*
  :defines (org-brain-path)
  :init
  (setq org-brain-path (concat (file-name-as-directory org-directory) "brain"))
  :config
  (progn
    (setq org-id-track-globally t
          org-id-locations-file "~/.emacs.d/.org-id-locations"
          org-brain-visualize-default-choices 'all
          org-brain-title-max-length 12)
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?" :empty-lines 1)
          org-capture-templates)))
#+END_SRC

**** Org Drill

#+NAME: org-ideamgr-drill
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-drill
  :straight org)
#+END_SRC

*** Org Hacks
:PROPERTIES:
:ID:       872F7F61-7971-42E4-BC24-FEA9D67634D2
:END:

From Thomas Frössman's [[http://thomasf.github.io/solarized-css/test/org-hacks.html#sec-1-8-5][org hacks]]

Fix problem with saveplace.el which puts point back in a folded position.


#+BEGIN_SRC emacs-lisp :tangle yes

(add-hook 'org-mode-hook
          (lambda ()
            (when (outline-invisible-p)
              (save-excursion
                (outline-previous-visible-heading 1)
                (org-show-subtree)))))

#+END_SRC

Extract hyperlink

#+BEGIN_SRC emacs-lisp :tangle yes
(defun org-extract-link ()
  "Extract the link location at point and put it on the killring."
  (interactive)
  (when (org-in-regexp org-bracket-link-regexp 1)
    (kill-new (org-link-unescape (org-match-string-no-properties 1)))))


(defun browse-url-extract-org-link (orig-fun &rest args)
  "If `thing-at-point' is a org-link, then call `org-extract-link'
and apply ORIG-FUN with the extracted url in the car of original ARGS."
  (when (and (eq major-mode 'org-mode)
             (string= (car (org-thing-at-point)) "link"))
    (setcar args (org-extract-link)))
  (apply orig-fun args))


#+END_SRC

Export to datetree

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-datetree)

; (setq org-archive-location "%s_archive::date-tree")
(defadvice org-archive-subtree
  (around org-archive-subtree-to-data-tree activate)
  "org-archive-subtree to date-tree"
  (if
      (string= "date-tree"
               (org-extract-archive-heading
                (org-get-local-archive-location)))
      (let* ((dct (decode-time (org-current-time)))
             (y (nth 5 dct))
             (m (nth 4 dct))
             (d (nth 3 dct))
             (this-buffer (current-buffer))
             (location (org-get-local-archive-location))
             (afile (org-extract-archive-file location))
             (org-archive-location
              (format "%s::*** %04d-%02d-%02d %s" afile y m d
                      (format-time-string "%A" (encode-time 0 0 0 d m y)))))
        (message "afile=%s" afile)
        (unless afile
          (error "Invalid `org-archive-location'"))
        (save-excursion
          (switch-to-buffer (find-file-noselect afile))
          (org-datetree-find-year-create y)
          (org-datetree-find-month-create y m)
          (org-datetree-find-day-create y m d)
          (widen)
          (switch-to-buffer this-buffer))
        ad-do-it)
    ad-do-it))
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle yes
(setq ba/org-adjust-tags-column nil)

(defun ba/org-adjust-tags-column-reset-tags ()
  "In org-mode buffers it will reset tag position according to
`org-tags-column'."
  (when (and
         (not (string= (buffer-name) "*Remember*"))
         (eql major-mode 'org-mode))
    (let ((b-m-p (buffer-modified-p)))
      (condition-case nil
          (save-excursion
            (goto-char (point-min))
            (command-execute 'outline-next-visible-heading)
            ;; disable (message) that org-set-tags generates
            (cl-flet ((message (&rest ignored) nil))
            (org-set-tags 1 t))
            (set-buffer-modified-p b-m-p))
            (error nil)))))

(defun ba/org-adjust-tags-column-now ()
  "Right-adjust `org-tags-column' value, then reset tag position."
  (set (make-local-variable 'org-tags-column)
       (- (- (window-width) (length org-ellipsis))))
  (ba/org-adjust-tags-column-reset-tags))

(defun ba/org-adjust-tags-column-maybe ()
  "If `ba/org-adjust-tags-column' is set to non-nil, adjust tags."
  (when ba/org-adjust-tags-column
    (ba/org-adjust-tags-column-now)))

(defun ba/org-adjust-tags-column-before-save ()
  "Tags need to be left-adjusted when saving."
  (when ba/org-adjust-tags-column
     (setq org-tags-column 1)
     (ba/org-adjust-tags-column-reset-tags)))

(defun ba/org-adjust-tags-column-after-save ()
  "Revert left-adjusted tag position done by before-save hook."
  (ba/org-adjust-tags-column-maybe)
  (set-buffer-modified-p nil))

; automatically align tags on right-hand side
(add-hook 'window-configuration-change-hook
          'ba/org-adjust-tags-column-maybe)
(add-hook 'before-save-hook 'ba/org-adjust-tags-column-before-save)
(add-hook 'after-save-hook 'ba/org-adjust-tags-column-after-save)
(add-hook 'org-agenda-mode-hook '(lambda ()
                                  (setq org-agenda-tags-column (- (window-width)))))

; between invoking org-refile and displaying the prompt (which
; triggers window-configuration-change-hook) tags might adjust,
; which invalidates the org-refile cache
(defadvice org-refile (around org-refile-disable-adjust-tags)
  "Disable dynamically adjusting tags"
  (let ((ba/org-adjust-tags-column nil))
    ad-do-it))
(ad-activate 'org-refile)
#+END_SRC

** Org LaTeX

#+NAME: org-latex-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-latex-editing>>
<<org-latex-org-ref>>
<<org-latex-pdf>>
#+END_SRC

*** LaTeX in Org Buffers

#+NAME: org-latex-editing
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<org-latex-edit-latex>>
<<org-latex-highlight-tex>>
#+END_SRC

*** Edit Latex

#+NAME: org-latex-edit-latex
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-edit-latex
  :straight t)
#+END_SRC

*** Highlight inline LaTeX fragments

#+NAME: org-latex-highlight-tex
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-highlight-latex-and-related '(latex))
#+END_SRC

*** Org Ref
:PROPERTIES:
:ID:       1038C1B0-F5E1-4246-A360-B29BFBA82AC2
:CUSTOM_ID: org-ref
:END:

#+NAME: org-latex-org-ref
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; Org Ref
<<org-ref-config>>

(with-eval-after-load 'org-ref
  ;; Org ref vref
  <<org-ref-vref>>

  ;; Org ref pdf
  <<org-ref-pdf>>
)
#+END_SRC

#+NAME: org-ref-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-ref
  :if *is-mac*
  :after (ivy)
  :demand t
  :init
  (progn
    ;; https://github.com/jkitchin/org-ref/issues/428
    (require 'doi-utils)
    (require 'org-id)
    (require 'org-ref-wos)
    (require 'org-ref-scopus)
    (require 'org-ref-isbn)
    (require 'org-ref-pubmed)
    (require 'org-ref-arxiv)
    (require 'org-ref-sci-id)
    (require 'x2bib)
    (require 'org-ref-latex)
    (require 'org-ref-pdf))
  :config
  (progn
    (setq org-ref-completion-library 'org-ref-ivy-cite)

    (setq reftex-default-bibliography '("~/Dropbox/org/ref/references.bib"))

    (setq org-ref-default-bibliography '("~/Dropbox/org/ref/references.bib")
          org-ref-bibliography-notes "~/Dropbox/org/ref/refnotes.org"
          org-ref-pdf-directory "~/Dropbox/org/papers/pdfs/"
          org-ref-show-citation-on-enter t
          org-ref-show-broken-links t)

    ;; Org Ref Journal abbreviations
    (setq orbj-extra-abbrevs
      '(("JPS" "Journal of Palestinian Studies")
        ("JMEISA" "Journal of Middle Eastern and Islamic Studies (in
                  Asia) Vol")
        ("JHG" "Journal of Historical Geography")
        ("MEAST" "International Journal of Middle East Studies")))

    (dolist (elt orbj-extra-abbrevs)
      (add-to-list 'org-ref-bibtex-journal-abbreviations elt))))

#+END_SRC

**** Support =vref= links

#+NAME: org-ref-vref
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-ref-vref-export (keyword desc format)
  "An export function for vref links."
  (cond
   ((eq format 'html)
    (format "<a href=\"#%s\">%s</a>" keyword (or desc keyword)))
   ((eq format 'latex) (format "\\vref{%s}" keyword))))


(org-ref-link-set-parameters "vref"
   :follow #'org-ref-ref-follow
   :export #'org-ref-vref-export
   :complete #'org-ref-complete-link
   :face 'org-ref-ref-face-fn
   :help-echo #'org-ref-ref-help-echo)

(setq org-ref-ref-types '("ref" "eqref" "pageref" "nameref"
                          "autoref" "cref" "Cref" "vref"))

#+END_SRC

**** Open Pdf at point

See [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org#using-doc-view-or-pdf-tools][Using Doc View or PDF Tools]] section of =org-ref= documentation.

#+NAME: org-ref-pdf
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-ref-open-pdf-at-point ()
  "Open the pdf for bibtex key under point if it exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
         (pdf-file (funcall org-ref-get-pdf-filename-function key)))
    (if (file-exists-p pdf-file)
        (find-file pdf-file)
      (message "No PDF found for %s" key))))

(setq org-ref-open-pdf-function 'org-ref-open-pdf-at-point)
#+END_SRC

*** Org PDF

#+NAME: org-latex-pdf
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
(when (display-graphic-p)
  <<org-pdf-pdftools>>
  <<org-pdf-pdfview>>
)
#+END_SRC

**** PDF Tools

[[https://github.com/politza/pdf-tools][PDF Tools]] adds several features and enhancements for interacting with
PDF documents in Emacs. It serves as a replacement for DocView mode.

Credits to Dr. Ben Maughan over at Pragmatic Emacs for this
[[http://pragmaticemacs.com/category/emacs/][blogpost]] demonstrating how to get the most out of this package.

#+NAME: org-pdf-pdftools
#+BEGIN_SRC emacs-lisp :tangle no
(use-package pdf-tools
  :mode (("\\.pdf\\'" . pdf-view-mode))
  :bind (:map pdf-view-mode-map
              ("C-s" . isearch-forward)
              ("h"   . pdf-annot-add-highlight-markup-annotation)
              ("t"   . pdf-annot-add-text-annotation)
              ("D"   . pdf-annot-delete))
  :init
  (progn
    (setq pdf-info-epdfinfo-program "~/.emacs.d/bin/epdfinfo")
    (pdf-tools-install))
  :config
  (progn
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (setq pdf-view-resize-factor 1.1)))
#+END_SRC

**** Org PDF View

Now we can open pdf files with =org-pdfview= [fn:11]:

#+NAME: org-pdf-pdfview
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-pdfview
  :after (:all pdf-tools)
  :demand t
  :config
  (progn
    (add-hook 'org-mode-hook
              (lambda ()
                (add-to-list 'org-file-apps
                             '("\\.pdf\\'" .
                               (lambda (file link)
                                 (org-pdfview-open link))))))))
#+END_SRC

*** Miscellany

This doesn't work... it just caches the project metadata for some reason.

#+BEGIN_SRC emacs-lisp :tangle no

(defvar org-publish--project-file "project.el"
  "The file which defines a project's publishing specification.
 Used to configure `org-publish-project'.")


(defun load-project-publish-config ()
  "Load the `org-publish-project' configuration for the current project. "
  (interactive)
    (lexical-let* ((project-directory (projectile-project-root))
                   (project-publish-config (expand-file-name
                                            org-publish--project-file
                                            project-directory)))

    (if (file-exists-p project-publish-config)
        (progn
          (with-temp-buffer
            (insert-file-contents project-publish-config)
            (straight-eval-buffer)
            (message "Loaded publish config for project %s"

                     (car (nreverse (f-split project-directory)))))))))



#+END_SRC

** Org Mode Export
:PROPERTIES:
:ID:       46A0BACE-34F1-4547-8EC4-367FD085E1B5
:CUSTOM_ID: org-mode-export
:END:

#+NAME: org-export
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; Export Wrapper Block
<<org-export-wrapper>>

;; Enabled on MacOS block
<<org-export-enable-on-mac>>

;; Enable Extras
<<org-export-ox-extra>>

<<org-export-publish>>

;; LaTeX backend
;; Only evaluate LaTeX package configurations if export dispatcher is enabled
(when (chaffin/org-export-enabled-backend-p 'latex)

  ;; LaTeX Configuration
  <<latex-config>>
  ;; End LaTeX Config

  ;; Org LaTeX
  <<org-latex-config>>
  ;; End Org Latex Expansion

  ;; Ox Latex
  <<org-export-latex>>
) ;; End LaTeX Backend

;; BibTeX backend
(when (chaffin/org-export-enabled-backend-p 'bibtex)
  <<org-export-bibtex>>)

;; GFM backend
(when (chaffin/org-export-enabled-backend-p 'gfm)
  <<org-export-gfm>>)

;; Pandoc backend
(when (chaffin/org-export-enabled-backend-p 'pandoc)
  <<org-export-pandoc>>
)

;; Hugo backend
(when (chaffin/org-export-enabled-backend-p 'hugo)
  <<org-export-hugo>>
)

;; HTML Backend
(when (chaffin/org-export-enabled-backend-p 'html)
  <<org-export-html>>
)

;; OX Linguistics
(when (chaffin/org-export-enabled-backend-p 'linguistics)
  <<org-export-linguistics>>)
#+END_SRC

*** Enable Backends
:PROPERTIES:
:ID:       59AEA962-792E-4AB7-ACDE-3EC61C45D279
:CUSTOM_ID: user-enable-backends
:END:

#+NAME: org-export-wrapper
#+BEGIN_SRC emacs-lisp :tangle no
(defvar org-export-enabled-backends '()
  "alist of symbols representing enabled `org-mode' export backends")

(defun chaffin/org-export-enabled-backend-p (backend)
  (member backend org-export-enabled-backends))
#+END_SRC

And opt-in to all back ends when on local machine.

#+NAME: org-export-enable-on-mac
#+BEGIN_SRC emacs-lisp :tangle no
(when *is-mac*
  (mapcar (lambda (backend)
            (setq org-export-enabled-backends
                  (cons backend org-export-enabled-backends)))
          '(extra gfm latex hugo html pandoc linguistics)))
#+END_SRC

*** Ox Org

#+NAME: ox-export-org
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-to-org-handle-includes ()
  "Copy the contents of the current buffer to OUTFILE,
recursively processing #+INCLUDEs."
  (let* ((s (buffer-string))
     (fname (buffer-file-name))
     (ofname (format "%s.I.org" (file-name-sans-extension fname))))
    (setq result
      (with-temp-buffer
        (insert s)
        (org-export-handle-include-files-recurse)
        (buffer-string)))
    (find-file ofname)
    (delete-region (point-min) (point-max))
    (insert result)
    (save-buffer)))
#+END_SRC

*** Ox LaTeX

#+NAME: org-export-latex
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
(require 'ox-latex)

<<org-export-latex-user-labels>>
<<org-export-latex-pdf-process>>
<<org-export-latex-custom-classes>>
<<org-export-latex-numfilter>>
#+END_SRC

**** Set latex pdf process

[[https://ctan.org/pkg/latexmk?lang=en][Latexmk]] automates the proces of building LaTeX documents to pdf.

It can be done through the =org-mode= latex export dispatcher in a single command:

#+NAME: org-export-latex-pdf-process
#+BEGIN_SRC emacs-lisp :tangle no
(eval-and-compile
  (defvar enable-default-minted nil))

(setq org-latex-listings 'minted)

(defun latex-toggle-default-minted ()
  (interactive)
  (if enable-default-minted
      (progn
        (setq org-latex-packages-alist '(("" "minted"))
            org-latex-minted-options
            '(("mathescape" "true")
              ("linenos" "true")
              ("breaklines" "true")
              ("numbersep" "5pt")
              ("frame" "lines")
              ("framesep" "2mm")))
        (setq enable-default-minted nil)
        (message "%s" "Exporting with default minted."))
    (progn
      (setq org-latex-packages-alist '()
            org-latex-minted-options '())
      (setq enable-default-minted t)
      (message "%s" "Disabled default minted."))))

(defvar latex-process-latex
  '("%latex -interaction nonstopmode -output-directory %o %f" "%latex
-interaction nonstopmode -output-directory %o %f" "%latex -interaction
nonstopmode -output-directory %o %f")

  "The default latex command for `org-latex-pdf-process'.")

(defvar latex-process-pdflatex
  '("latexmk -pdflatex='pdflatex -interaction nonstopmode -shell-escape' -synctex=1 -pdf -bibtex -f %f"))

(defvar latex-process-xelatex
  '("latexmk -pdf -synctex=1 -shell-escape -xelatex -f %f"))

(defvar latex-process-lualatex
  '("latexmk -pdf -synctex=1 -shell-escape -lualatex -f %f"))

(defvar latex-process-list
  '(("latex" . latex-process-latex)
    ("lualatex" . latex-process-lualatex)
    ("xelatex" . latex-process-xelatex)
    ("pdflatex" . latex-process-pdflatex)))


(setq org-latex-pdf-process latex-process-xelatex)

(defvar org-latex-pdf-process-set-hook nil)

(defun org-latex-pdf-process-set (&optional process)
  (interactive)
  (let* ((process (or
                   process
                   (assoc (completing-read "Process: " latex-process-list nil nil)
                          latex-process-list)))
         (cmd-string (cdr process)))
    (setq org-latex-pdf-process (symbol-value cmd-string))
    (run-hooks 'org-latex-pdf-process-set-hook)))


(add-hook 'org-mode-hook
          (lambda () (local-set-key (kbd "M-s l") 'org-latex-pdf-process-set)))

(defvar org-latex-pdf-process-set-hook nil)
#+END_SRC

**** Prefer user provided labeling system

#+NAME: org-export-latex-user-labels
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-latex-prefer-user-labels t)
#+END_SRC

**** Org LaTeX Default Packages :ignore:

#+NAME: org-export-latex-default-packages
#+BEGIN_SRC emacs-lisp :tangle no :exports none
<<org-export-latex-default-packages-natbib>>
#+END_SRC

****** Natbib

Add [[https://ctan.org/pkg/natbib?lang=en][natbib]] package, as it's the easiest way to get BibTeX support
through [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][org-ref]] and other tools for LaTeX in Emacs.

#+NAME: org-export-latex-default-packages-natbib
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
#+END_SRC

**** Async Export

Open exported document in new window on save.

#+NAME: org-export-latex-async
#+BEGIN_SRC emacs-lisp :tangle no
;; https://github.com/jkitchin/scimax/issues/30#issuecomment-271198016
(add-hook 'after-save-hook
          (lambda ()
            (org-latex-export-to-pdf 't)
            (find-file-other-window
             (concat (file-name-base (buffer-file-name))
                     ".pdf")
             nil t)))
#+END_SRC

**** Hyperref Template

The default cross-referencing and hyperlink styles provided by
=hyperref= are awful. This makes them less awful.

#+NAME: org-export-latex-hyperref
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-latex-hyperref-template "\\hypersetup{\n colorlinks=true, urlcolor=black,linkcolor=black \n}")
#+END_SRC

**** Custom LaTeX Classes

#+NAME: org-export-latex-custom-classes
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none

<<org-export-latex-per-file-class>>
<<org-export-latex-lingsyn-class>>
<<org-export-latex-uclacs>>
<<org-export-latex-humanities-class>>
<<org-export-latex-article-no-packages>>

#+END_SRC

***** Org Per File Class

Adds a class for exporting to pdf using latex backend without
importing the default =ox-latex= packages. This allows the export
settings of a particular file to be completely insulated from most
external configuration.

#+NAME: org-export-latex-per-file-class
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
             '("per-file-class"
               "\\documentclass{scrartcl}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** Article no packages

#+NAME: org-export-latex-artcile-no-packages
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
	     '("article-no-defaults"                          ;class-name
	       "\\documentclass{article}
               [NO-DEFAULT-PACKAGES]
               [PACKAGES]
               [EXTRA]" ;;header-string
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*a{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** Humanities

My custom mla-style LaTeX class.

#+NAME: org-export-latex-humanities-class
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
             '("humanities"
               "\\documentclass{humanities}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** Lingsyn class

#+NAME: org-export-latex-lingsyn-class
#+BEGIN_SRC emacs-lisp :tangle no
(if (and (executable-find "kpsewhich")
         (shell-command-to-string "kpsewhich orgling.cls"))

    (add-to-list 'org-latex-classes
                 '("orgling"
                   "\\documentclass{orgling}
                    [NO-DEFAULT-PACKAGES]
                    [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

***** UCLA CS Class
#+NAME: org-export-latex-uclacs
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
             '("uclacs"
               "\\documentclass{uclacs}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** Resume

#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-classes
             '("resume"
               "\\documentclass{resume}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("playground"
               "\\documentclass{playground}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

**** Filter Section Numbering by tag

- [[http://bastibe.de/2014-12-03-org-numbering.html][Org Numbering]]

#+NAME: org-export-latex-numfilter
#+BEGIN_SRC emacs-lisp :tangle no
(defun headline-numbering-filter (data backend info)
  "No numbering in headlines that have a property :numbers: no"
  (let* ((beg (next-property-change 0 data))
         (headline (if beg (get-text-property beg :parent data))))
    (if (string= (org-element-property :NUMBERS headline) "no")
        (cond ((eq backend 'latex)
               (replace-regexp-in-string
                "\\(part\\|chapter\\|\\(?:sub\\)*section\\|\\(?:sub\\)?paragraph\\)"
                "\\1*" data nil nil 1))
              ((eq backend 'html)
               (replace-regexp-in-string
                "\\(<h[1-6]\\)\\([^>]*>\\)"
                "\\1 class=\"nonumber\"\\2" data nil nil)))
      data)))


(defun section-title-filter (data backend info)
  "No numbering in headlines that have a property :title: no"
  (let* ((beg (next-property-change 0 data))
         (headline (if beg (get-text-property beg :parent data))))
    (if (and (eq backend 'latex)
             (string= (org-element-property :SECTITLE headline) "no"))
        (replace-regexp-in-string
         "\\(\\(?:\\(part\\|chapter\\|\\(?:sub\\)*section\\|\\(?:sub\\)?paragraph\\)\\[*]?{\\)\\).*"
         "\\1}" data))))

(setq org-export-filter-headline-functions
      '(headline-numbering-filter
        section-title-filter))
#+END_SRC

*** Ox Bibtex

#+NAME: org-export-bibtex
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
(use-package ox-bibtex
  :straight org
  :mode
  (("\\.org.bib\\'" . org-mode))
  :after (ox)
  :demand t
  :config
  (progn
    (require 'org-bibtex)
    (setq org-bibtex-file "references.org")))
#+END_SRC

*** Ox Pandoc

[[https://pandoc.org/][Pandoc]] is a document conversion tool that can convert pretty much
anything. The [[https://github.com/kawabata/ox-pandoc][ox-pandoc]] package allows us to utiliize this capability
for exporting org-mode documents to various formats.

#+NAME: org-export-pandoc
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-pandoc
  :if (executable-find "pandoc")
  :after (:all ox org-ref)
  :demand t
  :config
  (progn

    (setq org-pandoc-options '((standalone . t)))

    ;; LaTeX-Beamer-PDF
    (defun ox-pandoc--pdf-engine ()
      (let ((syms (mapcar (lambda (x) (cdr x)) latex-process-list))
            (pred (lambda (sym) (eq (symbol-value sym) org-latex-pdf-process)))
            (sep "latex-process-"))
        (cadr (split-string (symbol-name (car (seq-filter pred syms))) sep))))

    (setq org-pandoc-options-for-beamer-pdf `((pdf-engine . ,(ox-pandoc--pdf-engine)))
          org-pandoc-options-for-latex-pdf `((pdf-engine . ,(ox-pandoc--pdf-engine))))

    (defun org-pandoc-pdf-engine-set (&optional process)
      (interactive)
      (let* ((process (or process (assoc (completing-read "Pandoc Process: " latex-process-list nil nil) latex-process-list)))
             (sym (substring-no-properties (car process))))
        (setq org-pandoc-options-for-beamer-pdf `((pdf-engine . ,sym))
              org-pandoc-options-for-latex-pdf `((pdf-engine . ,sym)))))

    ;; Docx
    (when (symbolp 'org-file-apps)
      (add-to-list 'org-file-apps '("\\.docx?\\'" . system)))))
#+END_SRC

*** Ox GFM

#+NAME: org-export-gfm
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-gfm
  :after (ox)
  :demand t)
#+END_SRC

*** Ox Hugo

=[[https://ox-hugo.scripter.co/][ox-hugo]]= is an org exporter for Hugo-compatible markdown.

#+NAME: org-export-hugo
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-hugo
  :after (ox)
  :demand t)
#+END_SRC

*** Ox HTML
**** Org HTML Themes

#+NAME: org-export-html
#+BEGIN_SRC emacs-lisp :tangle no
(straight-use-package
 `(org-html-themes
   :host github
   :repo "fniessen/org-html-themes"
   :local-repo-name org-html-themes
   :files ("setup/*" "styles/*")))
#+END_SRC


#+NAME: ox-html-resolve-setupfile
#+BEGIN_SRC emacs-lisp :tangle np
(defun html-resolve-setupfile (data backend info)
  (when (org-export-derived-backend-p 'html)
    (lexical-let ((html-themes--dir (straight--build-dir "org-html-themes")))
      (org-element-map data 'keyword
        (lambda (keyword)
          (let ((kw (org-element-property :key keyword))
                (v (org-element-property :value keyword)))
            (if (string= "SETUPFILE" (upcase kw))
                (org-element-put-property keyword
                                          :value (concat html-themes--dir v)))))))))
(add-to-list 'org-export-filter-parse-tree-functions 'html-resolve-setupfile)

#+END_SRC

*** OX Linguistics

#+NAME: org-export-linguistics
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-linguistics
  :straight (ox-linguistics :host github
                            :repo "wyleyr/ox-linguistics"
                            :files ("lisp/*.el"))
  :after (ox)
  :demand t
)

#+END_SRC

*** Ox Extra

Ignores headlines tagged =:ignore:=. Unlike =:noexport:=, the contents
and subtrees of the ignored headlines will be retained.

#+NAME: org-export-ox-extra
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-extra
  :straight org
  :demand t
  :config
  (ox-extras-activate '(ignore-headlines
                        org-export-filter-parse-tree-functions)))
#+END_SRC

*** Ox Publish

#+NAME: org-export-publish
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-publish
  :straight org
  :after (ox)
  :demand t
  ;; :bind (("M-m r p" . org-publish-project))
)
#+END_SRC

* Customizing Emacs
** Search and Navigation
*** The buffer
**** Avy
Jump to arbitrary point in Buffer

#+BEGIN_SRC emacs-lisp :tangle no
(use-package avy
  :straight t)
#+END_SRC

**** Undo Tree

Visualize buffer modifications during an Emacs session as an
interactive tree .

#+NAME: undo-tree-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package undo-tree
  :init
  (global-undo-tree-mode))
#+END_SRC

*** The project
**** Projectile

#+NAME: projectile-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile
  :init
  (setq projectile-completion-system 'ivy)

  :config

  (progn

    (append projectile-globally-ignored-directories
            '("gradle" "target" ".meghanada" ".gradle" "build" "bin" "node_modules"
              "CMakeFiles" ".cquery_cached_index"))
    (defvar chaffin/ignored-project-directories
      '("~/.emacs.d/straight"))
    (defun projectile-ignore-projects-in-directory (project-root)
      (cl-flet ((ignored-dir-or-subdir-p (path)
                                         (f-descendant-of?
                                          (f-expand project-root)
                                          path)))
        (->> chaffin/ignored-project-directories
             (seq-filter #'ignored-dir-or-subdir-p)
             seq-empty-p not)))
    (setq projectile-ignored-project-function
          #'projectile-ignore-projects-in-directory)))
#+END_SRC

**** Neotree

[[https://github.com/jaypei/emacs-neotree][Neotree]][fn:12] is a [[https://github.com/scrooloose/nerdtree][Nerdtree]]-like file explorer for managing projects in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package neotree
  :after (projectile)
  :demand t
  :commands (neotree-project-dir)
  :bind
  (([f8] . neotree-project-dir))
  :init
  (progn
    (setq neo-theme
          (if (display-graphic-p)
              'icons 'arrow)))
  :config
  (progn
    ;; @source https://www.emacswiki.org/emacs/NeoTree
    (defun neotree-project-dir ()
      "Open NeoTree using the git root"
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                 (progn
                   (neotree-dir project-dir)
                   (neotree-find file-name)))
          (message "Project root not found."))))))
#+END_SRC

*** The file system
**** Dired
***** Asynchronous Processing

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package async
  :after (dired)
  :commands (dired-async-mode async-smtpmail-send-it)
  :config
  (progn
    (dired-async-mode 1)
    (setq message-send-mail-function 'async-smtpmail-send-it)))
#+END_SRC

***** Reuse dired buffer when moving to parent directory

From [[https://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer][emacswiki.org]]

#+BEGIN_QUOTE
When moving to parent directory by `^´, Dired by default creates a new
buffer for each movement up. The following rebinds `^´ to use the same
buffer.
#+END_QUOTE


#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'dired-mode-hook
	  (lambda ()
	    (define-key dired-mode-map (kbd "^")
	      (lambda () (interactive) (find-alternate-file "..")))))
#+END_SRC

***** Use other dired buffer as default directory

When split frames with two dired buffers, default to the other buffer
as the current directory.

See docstring for =dired-dwim-target=.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq dired-dwim-target t)
#+END_SRC

***** Dired+

Adds extensions and functionality to dired mode.

#+NAME: dired-plus-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dired+
  :init
  (add-hook #'dired-mode-hook #'dired-hide-details-mode))
#+END_SRC

***** Dired Icons

#+NAME: all-the-icons-dired
#+BEGIN_SRC emacs-lisp :tangle no
(use-package all-the-icons-dired
    :after (:all dired all-the-icons)
    :demand t
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

**** Treemacs

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package treemacs
  :straight t)
#+END_SRC

*** Searching
**** ack

#+NAME: ack-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ack
  :if (executable-find "ack")
  :straight t)
#+END_SRC

**** ag

#+NAME: ag-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ag
  :straight t)
#+END_SRC

**** grep+

#+BEGIN_SRC emacs-lisp :tangle no
(use-package grep+
  :straight t)
#+END_SRC

***** Open With

#+NAME: open-with-spec
#+BEGIN_SRC emacs-lisp :tangle no
(use-package openwith
  :straight t)
#+END_SRC

** Initial Display
*** Initial Buffer

#+NAME: startup-initial-buffer
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none
<<page-break-lines-config>>
(when (display-graphic-p)
  <<emojify-mode-config>>)
<<dashboard-config>>
#+END_SRC

The default splash screen is great when you're starting out,
but it's more so an annoyance than anything else once you
know you're around.

**** Page Break Lines

Global minor-mode that turns ~^L~ form feed characters into
horizontal line rules.

#+NAME: page-break-lines-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package page-break-lines
  :init
  (global-page-break-lines-mode))
#+END_SRC

**** Emacs Dashboard

[[https://github.com/rakanalh/emacs-dashboard][Dashboard]] is a highly customizable splash screen
replacement library used in the popular [[https://github.com/syl20bnr/spacemacs][spacemacs]] framework.
It's a nice way of consolidating any combination of tasks,
agenda items, bookmarks, and pretty much any other enumerable
list that one may use in the wacky world of Emacs.

#+NAME: dashboard-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package dashboard
  :demand t
  :init
  (if-not (global-page-break-lines-mode)
      (global-page-break-lines-mode))
  (dashboard-setup-startup-hook)
  :config
  (add-to-list 'dashboard-items '(agenda) t)

  (setq dashboard-banner-logo-title "Welcome Back, MasterChaff"
        dashboard-items '(( agenda . 10)
                          ( projects . 5)
                          ( recents . 5)
                          ( bookmarks . 5)))
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))

#+END_SRC

**** Fireplace

Just for the hell of it.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package fireplace
  :straight t)
#+END_SRC

*** Initial Scratch

#+NAME: startup-initial-scratch
#+BEGIN_SRC emacs-lisp :tangle yes
(setq initial-scratch-message nil
      inhibit-startup-message t
      inhibit-startup-echo-area-message t
      inhibit-startup-screen t)

  #+END_SRC

*** Initial Frame

Disable scroll bars and tool bar on all system types.

On macOS, the menu bar is integrated into the UI.

Disabling it will just empty the menu tab options for Emacs.app,
so we'll leave it there.

#+BEGIN_SRC emacs-lisp :tangle yes
(tool-bar-mode -1)
(scroll-bar-mode -1)
(unless *is-mac*
  (menu-bar-mode -1))
(display-time-mode 1)

#+END_SRC

**** Default Frame Appearance

Starting in Emacs 26, the =default-frame-alist= variable can be used
create a natural title bar in the GUI. Setting the default frame
properties to the following values has the same effect as the
'--with-natural-title-bar' option provided by the Homebrew [[https://github.com/d12frosted/homebrew-emacs-plus/blob/master/Formula/emacs-plus.rb#L97-L100][formula]]
recommended for Spacemacs users on macOS[fn:13].

#+BEGIN_SRC emacs-lisp :tangle yes
(setq default-frame-alist '((ns-transparent-titlebar . t) (ns-appearance . dark)))
#+END_SRC

** Window Manager
*** Window Resize

Default keybindings for window resize:

- =C-x ^= :: makes current window taller [[help:enlarge-window][`enlarge-window']]
- =C-x }= :: make it larger [[help:enlarge-window-horizontally][`enlarge-window-horizontally']]
- =C-x {= :: make it narrower [[help:shrink-window-horizontally][`shrin-window-horizontally']]

This following block modifies the keybindings for these commands to
use the arrow keys instead. I use the "C-s" modifier because it just
so happens this prefix can be extended by every key in the arrow pad
without causing a conflict with external keymaps on my system.

The suggested keybindings from the footnoted EmacsWiki page may be more
accessible for you [fn:14].

#+NAME: window-resize-keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-s-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-s-<down>") 'shrink-window)
(global-set-key (kbd "C-s-<up>") 'enlarge-window)
#+END_SRC

*** Popwin

#+NAME: popwin-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package popwin
  :config (popwin-mode 1))
#+END_SRC

*** Winner Mode

[[https://www.emacswiki.org/emacs/WinnerMode][Winner mode]] is a global minor mode that allows easy switching across
different window configurations.

#+NAME: winner-mode-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package winner-mode
  :init
  (when (fboundp 'winner-mode)
    (winner-mode 1)))
#+END_SRC

*** Golden Ratio

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package golden-ratio
  :init
  (setq golden-ratio-auto-scale t))
#+END_SRC

*** Purpose

#+BEGIN_SRC emacs-lisp :tangle no
(use-package ivy-purpose
  :after (purpose)
  :init
  (ivy-purpose-setup)
  :config
  (progn
    (setq pop-up-frames t) ;; allow Emacs to popup new frames
    ;; give help buffers the 'popup-frame purpose
    (add-to-list 'purpose-user-mode-purposes
                 '(help-mode . popup-frame))
    (add-to-list 'purpose-special-action-sequences
                 '(popup-frame
                   purpose-display-reuse-window-buffer
                   purpose-display-reuse-window-purpose
                   purpose-display-pop-up-frame)))
  )
#+END_SRC

** Copy and Paste

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package mark-forward-sexp
  :bind (("C-c o" . mark-forward-sexp)
         ("C-c O" . mark-backward-sexp)
         ("C-c i" . mark-inside-forward-sexp)
         ("C-c I" . mark-inside-backwad-sexp)))
#+END_SRC

** Emacs+
*** Help+

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package help+
  :straight t)

(use-package help-macro+
  :straight t)

(use-package help-fns+
  :straight t)

(use-package help-mode+
  :straight t)
#+END_SRC

*** Image+

[[https://github.com/mhayashi1120/Emacs-imagex][Image+]] provides extensions for image file manipulation in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package image+
  :if (display-graphic-p)
  :after (image)
  :config
  (eval-after-load 'image+
    `(when (require 'hydra nil t)
       (defhydra imagex-sticky-binding (global-map "C-x C-l")
         "Manipulating image"
         ("+" imagex-sticky-zoom-in "zoom in")
         ("-" imagex-sticky-zoom-out "zoom out")
         ("M" imagex-sticky-maximize "maximize")
         ("O" imagex-sticky-restore-original "restore orginal")
         ("S" imagex-sticky-save-image "save file")
         ("r" imagex-sticky-rotate-right "rotate right")
         ("l" imagex-sticky-rotate-left "rotate left")))))
#+END_SRC

*** Info+

#+NAME: info=plus
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package info+
  :straight t)
#+END_SRC

*** FontLock+

#+NAME: font-lock-plus
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package font-lock+
  :straight t)
#+END_SRC

*** Color+

**** Rainbow Mode

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rainbow-mode
  :straight t)
#+END_SRC

**** Col Highlight

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package col-highlight
  :straight t)
#+END_SRC

*** Frame-fns

#+NAME: frame-fns-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package frame-fns
  :straight t)
#+END_SRC

*** posframe

#+NAME: posframe-spec
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package posframe
    :straight t)

#+END_SRC

*** Visual Replace

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package visual-regexp
  :bind
  (("C-c r" . vr/replace)
   ("C-c q" . vr/query-replace)
   ("C-c m" . vr/mc-mark)))
#+END_SRC

**** Visit file+

#+NAME: read-only
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar read-only-directories '()
  "A list of directories for which all files and subdirectories
should open in `read-only-mode'.")

(defvar read-only-file-extensions '("\\.gz\\'")
  "Not yet implemented.")

(defun dir-level (dir)
  (length (f-split dir)))

(defun halidom//dir-or-subdir-p (d1 d2)
  (cond ((< (dir-level d1) (dir-level d2)) nil)
        ((string= d1 d2) t)
        (t
         (halidom//dir-or-subdir-p
          (file-name-directory (directory-file-name d1)) d2))))

(defun read-only-directory-p (bf)
  (cl-flet ((f (d) (funcall #'halidom//dir-or-subdir-p bf d)))
    (and (not (null (seq-filter #'f read-only-directories)))
         (file-writable-p bf))))

(defun halidom/open-buffer-as-read-only (file)
  "All buffers from `read-only-directories' or
`read-only-file-extensions' are set to read-only."
  (let ((bd (and buffer-file-name (file-name-directory file))))
    (if (read-only-directory-p bd) (read-only-mode 1))))

(defun halidom/find-file-read-only-hook ()
  (funcall #'halidom/open-buffer-as-read-only (buffer-file-name)))

(setq read-only-directories '("/Users/jacobhalidom/.emacs.d/straight/"
                              "/usr/local/Cellar/emacs-plus/"))

(add-hook 'find-file-hook #'halidom/find-file-read-only-hook)


#+END_SRC

*** Other improvements

#+NAME: thingatpt-plus
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package thingatpt+
  :straight t)

(use-package misc-fns
  :straight t)
#+END_SRC

** Bug Tracking

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package debbugs
  :straight (debbugs :type git
                     :repo "https://git.savannah.gnu.org/git/emacs/elpa.git"
                     :files ("packages/debbugs/*.el"
                             "packages/debbugs/Debbugs.wsdl")
                     :local-repo "elpa"))

#+END_SRC

** User Interface

Credits to [[https://github.com/domtronn][domtronn]] for a solid portion of this stuff. Dude makes really fantastic Emacs UI libraries and enhancements.

*** Cursor
**** Vertical Bar

Set the cursor to a bar. The default is too thin for my liking.
Set the width to 4px. Also remove the cursor in inactive windows.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default cursor-in-non-selected-windows nil
              x-stretch-cursor nil)

(modify-all-frames-parameters (list (cons 'cursor-type '(bar . 4))))
#+END_SRC

**** Disable Blink

Ultimately, I'd like to set a longer blink interval, like the "phase"
~caret_style~ setting in Sublime Text.

#+BEGIN_SRC emacs-lisp :tangle yes
(blink-cursor-mode -1)
#+END_SRC

**** Smart Cursor Color

#+BEGIN_SRC emacs-lisp :tangle no

(use-package smart-cursor-color
  :config
  (smart-cursor-color-mode +1))

#+END_SRC

**** Multiple Cursors

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multiple-cursors
  :init
  (progn
    (global-unset-key (kbd "M-<down-mouse-1>")))
  :bind
  (("C-S-c C-S-c" . mc/edit-lines)
   ("C->" . mc/mark-next-like-this)
   ("C-c C-<" . mc/mark-all-like-this)
   ("M-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

*** Fonts
**** Font variables

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar font-list
  '()
  "An alist of fonts which can be interactively chosen
   using the `set-font' function.

   Each font entry is a cons cell composed of the font-family as a string and
   the associated font weight as an unquoted symbol.

   See `font-weight-table' for a list of available options.

   e.g (\"FONT-FAMILY\" . WEIGHT)"
  )


#+END_SRC

**** Set font interactively

#+BEGIN_SRC emacs-lisp :tangle yes
(when *is-mac*
  (let ((font-weight-xs '(("Andale Mono" . extralight)
                          ("Droid Sans Mono" . normal)
                          ("Fira Code" . light)
                          ("Hack" . normal)
                          ("Inconsolata" . medium)
                          ("Operator Mono" . extralight)
                          ("SF Mono" . normal)
                          ("Programma" . normal))))
  (mapcar (lambda (font-weight-x)
	    (add-to-list 'font-list font-weight-x))
	  font-weight-xs)))


(defun set-font (&optional font)
  "Set the custom FONT with completion"
  (interactive)
  (let* ((font (or font (assoc
			 (completing-read "Font: " font-list nil nil)
			 font-list)))
	 (family (car font))
	 (weight (cdr font)))
    (run-at-time "0.2 sec" nil
		 `(lambda () (when (not (eq (face-attribute 'default :family)
				       ,family))
			  (set-face-attribute 'default nil :family ,family
					      :weight (quote ,weight)
					      :height 120))))))
#+END_SRC

**** Set the default font

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar macos-default-font
  "SF Mono 12"
  "A fontspec string of the default font to use on macOS.

  To get the fontspec string, use the command 'M-x x-select-font RET'
  to choose the desired font, then 'M-x describe-font RET' and copy-and-paste.")

(if *is-hal*
    (setq macos-default-font
	  "Operator Mono:pixelsize=13:weight=light:slant=normal:width=normal:spacing=100:scalable=true"))


(cond (*is-linux*
       (set-frame-font "Ubuntu Mono 12" nil t))
      (*is-windows*
       (set-frame-font "Lucida Sans Typewriter 12" nil t))
      (*is-mac*
       (set-frame-font macos-default-font nil t))
      (t
       (set-frame-font "Menlo 12" nil t)))
#+END_SRC

***** TODO Write Macro to define =-default-font= vars with templated docstring

*** Modeline

#+NAME: modeline-spec
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
(defcustom halidom-modeline nil
  "When non-nil, the modeline framework to use at startup.
Options are 'spaceline, 'sml, and 'powerline."
  :type '(choice
          (const :tag "Use the default modeline." nil)
          (const :tag "Use smart-mode-line" sml)
          (const :tag "Use powerline" powerline))
  :initialize 'custom-initialize-default)

;; sml
<<sml-spec>>

;; Spaceline
<<spaceline-spec>>

;; Powerline
<<powerline-spec>>

;; Setup the modeline
<<modeline-setup>>
#+END_SRC


**** Set the modeline format

#+NAME: modeline-setup
#+BEGIN_SRC emacs-lisp :tangle no
(setq halidom-modeline 'spaceline)

(defun halidom/modeline-setup ()
  "Setup the modeline."
  (pcase halidom-modeline
    (`spaceline (ml-spaceline-setup))
    (`powerline (ml-powerline-setup))
    (`sml (ml-smline-setup))))

(defun halidom/modeline-setup-frame (frame)
  (with-selected-frame frame
    (when (daemonp)
      (if (display-graphic-p)
          (halidom/modeline-setup)
        (ml-smline-setup)))))

(add-hook 'after-init-hook 'halidom/modeline-setup)
(add-hook 'after-make-frame-functions 'halidom/modeline-setup-frame)


#+END_SRC

**** Spaceline

#+NAME: spaceline-spec
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
<<spaceline-base>>
;; Spaceline icons
<<spaceline-icons>>
;; setup spaceline
<<spaceline-setup>>
#+END_SRC

***** Spaceline Base

#+NAME: spaceline-base
#+BEGIN_SRC emacs-lisp :tangle no
(use-package spaceline
 )
#+END_SRC

***** Spaceline All the Icons

#+NAME: spaceline-icons
#+BEGIN_SRC emacs-lisp :tangle no
(use-package spaceline-all-the-icons
  :after (:all all-the-icons spaceline))
#+END_SRC

***** Spaceline setup

#+NAME: spaceline-setup
#+BEGIN_SRC emacs-lisp :tangle no
(defun ml-spaceline-setup ()
  "Setup the modeline for spaceline."
  (setq spaceline-all-the-icons-separator-type 'arrow)
  (require 'spaceline)
  (require 'spaceline-segments)
  (require 'spaceline-config)
  (require 'all-the-icons)
  (require 'spaceline-all-the-icons)
  (spaceline-all-the-icons--setup-neotree)
  (spaceline-all-the-icons-theme 'org-pomodoro)
  (spaceline-toggle-all-the-icons-flycheck-status-off))
#+END_SRC

**** Smart Mode Line

#+NAME: sml-spec
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
<<sml-setup>>
#+END_SRC

#+NAME: sml-setup
#+BEGIN_SRC emacs-lisp :tangle no
(use-package smart-mode-line)

(defun ml-smline-setup ()
  (require 'smart-mode-line)
  (setq sml/no-confirm-load-theme t)
  (setq sml/theme 'respectful)
  (sml/setup)
  (run-hooks 'sml-setup-hook))
#+END_SRC

**** Powerline

#+NAME: powerline-spec
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<powerline-base>>
<<powerline-setup>>
#+END_SRC

#+NAME: powerline-base
#+BEGIN_SRC emacs-lisp :tangle no
(use-package powerline
    :straight t)
#+END_SRC

#+NAME: powerline-setup
#+BEGIN_SRC emacs-lisp :tangle no
(defun ml-powerline-setup ()
  "Setup the modeline for powerline."
  (require 'powerline)
  (powerline-default-theme))
#+END_SRC

*** Theme
**** Theme Defaults

#+NAME: theme-spec
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
(defcustom halidom--theme-style 'dark
  "The default theme mode. Only symbols 'dark and 'light are considered."
  :type '(choice
          (const :tag "Use a dark theme by default." dark)
          (const :tag "Use a light theme by default" light)
          (const :tag "Ignore the value of this variable" nil)))

(defcustom halidom-term-theme 'wombat
  "The default term theme."
  :type 'symbol)

(defcustom halidom-prose-theme 'tsdh-light
   "The default theme for writing text."
   :type 'symbol)

(defcustom halidom-light-theme 'tsdh-light
  "The light theme."
  :type 'symbol)

(defcustom halidom-dark-theme 'tsdh-dark
  "The dark theme."
  :type 'symbol)

(defcustom halidom-theme 'tsdh-dark
  "The default theme to load."
  :type 'string)

(defcustom halidom-theme-colors nil
  "plist of colors for the current theme."
  :type '(plist :key-type symbol value-type sexp))
#+END_SRC

**** Enable Custom Themes

This disables Emacs asking questions about loading a new theme.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq custom-safe-themes t)
(setq custom-theme-directory
  (expand-file-name "themes" user-emacs-directory))
#+END_SRC

**** Org Beautify Theme
:PROPERTIES:
:ID:       4612DA55-904D-44D4-9E3D-98E6D7AF72E2
:CUSTOM_ID: org-beautify-theme
:END:

#+NAME: ob-theme
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-beautify-theme
  ;; Minor modifications for better compatibility with atom-one-dark
  ;; theme.
  :straight (org-beautify-theme
             :host github
             :repo "jchaffin/org-beautify-theme"
             :files ("org-beautify-theme.el"))
  :config
  (defun org-beautify-load-theme ()
    (setq org-beautify-theme-use-box-hack nil)
    (add-to-list 'custom-enabled-themes 'org-beautify)
    (load-theme 'org-beautify)))
#+END_SRC

**** Zenburn Theme

#+NAME: theme-zenburn
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package zenburn-theme
  :straight t)
#+END_SRC

**** Poet Theme

#+NAME: theme-poet
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package poet-theme
  :init
  (setq halidom-light-theme 'poet))
#+END_SRC

**** Base16 Themes

#+NAME: theme-dark
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package base16-theme
    :defines halidom--base16-p base16-oceanicnext-colors
    :init
    (setq halidom-dark-theme 'base16-oceanicnext
          halidom-light-theme 'base16-default-light)
    (defun halidom--base16-p (&optional theme)
      (let ((theme (or theme halidom-theme "")))
        (string-prefix-p "base16-" (symbol-name theme))))
    (add-to-list 'custom-theme-load-path
                 (expand-file-name "straight/build/base16-theme"
                                   user-emacs-directory))
    :config
    (setq base16-distinct-fringe-background nil))

#+END_SRC

**** Load Theme



#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default custom-enabled-themes (list halidom-theme))

(defun remove-themes ()
  "Forcibly load the themes listed in `custom-enabled-themes'."
  (mapc #'disable-theme custom-enabled-themes))

(defvar halidom/load-theme-hook nil)


(defun halidom/load-theme ()
  (interactive)
  (let ((theme
         (cond ((eq halidom--theme-style 'dark)
                halidom-dark-theme)
               ((eq halidom--theme-style 'light)
                halidom-light-theme)
               (t halidom-term-theme))))
  (remove-themes)
  
  (if (display-graphic-p)
      (progn

        (load-theme theme)
        (setq halidom-theme theme)
        (if (halidom--base16-p theme)
            (setq halidom-theme-colors
                  (symbol-value
                   (intern
                    (eval
                     `(concat
                       ,(symbol-name (symbol-value 'halidom-theme)) "-colors")))))
          (setq halidom-theme-colors nil))
        (run-hooks 'halidom/load-theme-hook))


    (progn
      (load-theme halidom-term-theme)))))

(defun halidom/load-theme-with-frame (frame)
  (with-selected-frame frame
    (when (daemonp)
      (halidom/load-theme))))

(defun halidom--toggle-theme-style ()
  (interactive)
  (if (eq halidom--theme-style 'dark)
      (setq halidom--theme-style 'light)
    (setq halidom--theme-style 'dark)))


(defun halidom/toggle-theme ()
  (interactive)
  (halidom--toggle-theme-style)
  (halidom/load-theme))


(defun halidom/org-faces ()
  (let ((fg (face-foreground 'default nil 'default))
        (fg2 (plist-get halidom-theme-colors :base04))
        (bg2 (plist-get halidom-theme-colors :base01))
        (header-font "Sans Serif"))
    (if (and fg2 bg2)
        (progn
          (set-face-attribute 'org-level-1 nil
                             :family header-font
                             :height 1.4
                             :inherit 'outline-1)
          (set-face-attribute 'org-level-2 nil
                             :family header-font
                             :height 1.2
                             :inherit 'outline-2)
          (set-face-attribute 'org-level-3 nil
                              :family header-font
                              :height 1.0
                              :slant 'normal
                              :inherit 'outline-3)

          (set-face-attribute 'org-document-title nil
                              :height 1.5
                              :underline nil
                              :foreground fg
                              :inherit 'org-level-1)

          (set-face-attribute 'org-document-info-keyword nil
                              :foreground fg2
                              :slant 'italic
                              :inherit 'org-document-info-face)

          (set-face-attribute 'org-block nil
                              :foreground fg)

          (set-face-attribute 'org-block-begin-line nil
                              :foreground fg2
                              :background bg2
                              :inherit 'org-meta-line)

          (set-face-attribute 'org-block-end-line nil
                              :inherit 'org-block-begin-line)


          (set-face-attribute 'font-lock-keyword-face nil
                              :foreground "#C678DD"
                              :slant 'italic
                              :weight 'normal)))))

(defun halidom--org-restart ()
  (let ((org-buffers (org-buffer-list)))
    (dolist (buf org-buffers)
      (with-current-buffer buf
        (org-mode-restart)))))

(add-hook 'after-init-hook #'halidom/load-theme)
(add-hook 'halidom/load-theme-hook #'halidom/org-faces)
;; https://github.com/syl20bnr/spacemacs/pull/7667
(add-hook 'halidom/load-theme-hook #'halidom--org-restart)
(add-hook 'after-make-frame-functions #'halidom/load-theme-with-frame)
#+END_SRC

*** Icons
**** All the icons
[[https://github.com/domtronn/all-the-icons.el][All The Icons]] is a utility package for icons in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<all-the-icons-setup>>
<<all-the-icons-dired>>
<<all-the-icons-ivy>>
#+END_SRC

#+NAME: all-the-icons-setup
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons
  :config
  (progn
    (setq macos-font-directory "~/Library/Fonts")
    (if-not (member "all-the-icons.ttf" (directory-files macos-font-directory))
        (all-the-icons-install-fonts))))
#+END_SRC

*** Scrolling
**** Scroll to first error on compilation

#+BEGIN_SRC emacs-lisp :tangle yes
(setq compilation-scroll-output 'first-error)
#+END_SRC

**** Smooth Scrolling

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smooth-scrolling
  :init
  (smooth-scrolling-mode 1)
  :config
  (setq scroll-preserve-screen-position t
        scroll-margin 0
        scroll-conservatively 101))
#+END_SRC

*** Redisplay

#+BEGIN_SRC emacs-lisp :tangle yes
(setq redisplay-dont-pause t)
#+END_SRC

*** Emojis

#+NAME: emojify-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package emojify
  :after (:all magit org-mode markdown-mode)
  :init
  (progn
      (add-hook 'org-mode-hook 'emojify-mode)
      (add-hook 'markdown-mode-hook 'emojify-mode)
      (add-hook 'magit-status-mode-hook 'emojify-mode)))
#+END_SRC

**** Company Emoji


#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-emoji
  :after (company)
  :demand t
  :config
  (defun company-emoji-setup ()
    (setq-local company-backends
                (add-to-list 'company-backends 'company-emoji)))
  (add-hook 'markdown-mode-hook #'company-emoji-setup))


(use-package unicode-fonts
  :init
  (unicode-fonts-setup))


(use-package unicode-emoticons
  :straight t)


;; https://github.com/dunn/company-emoji#emoji-font-support
(defun --set-emoji-font (frame)
  "Adjust the font settings of FRAME so Emacs can display emoji properly."
  (if (eq system-type 'darwin)
      ;; For NS/Cocoa
      (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
    ;; For Linux
    (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

(--set-emoji-font nil)

;; Hook for when a frame is created with emacsclient
(add-hook 'after-make-frame-functions '--set-emoji-font)

#+END_SRC

** Multimedia
*** emms

#+NAME: emms-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package emms
  :if *is-mac*
  :init
  (progn
    (require 'emms-setup)
    (emms-all)
    (emms-default-players))
  :config
  (progn
    (setq emms-source-file-default-directory "~/Dropbox/Music/iTunes/iTunes Media/Music")
    ;; add flv and ogv
    (define-emms-simple-player mplayer '(file url)
      (regexp-opt '(".ogg" ".mp3" ".mp4" ".wav" ".mpg" ".mpeg" ".wmv" ".wma"
                    ".mov" ".avi" ".divx" ".ogm" ".asf" ".mkv" "http://" "mms://"
                    ".rm" ".rmvb" ".mp4" ".flac" ".vob" ".m4a" ".flv" ".ogv" ".pls"))
      "mplayer" "-slave" "-quiet" "-really-quiet" "-fullscreen")))
#+END_SRC

*** soundcloud

#+BEGIN_SRC emacs-lisp :tangle no
(use-package soundcloud
  :straight t)
#+END_SRC

* Completion
** Company

#+NAME: company-spec
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
;; Company
<<company-company>>
;; Company quickhelp
<<company-quick-help>>
;; Company Statistics
<<company-statistics-config>>
;; End Company
#+END_SRC

Emacs has two popular packages for code completion --
[[https://github.com/auto-complete/auto-complete][autocomplete]] and [[https://github.com/company-mode/company-mode][company]]. This reddit [[https://www.reddit.com/r/emacs/comments/2ekw22/autocompletemode_vs_companymode_which_is_better/][thread]] was enough for
me to go with company.

If you need more convincing, [[https://github.com/company-mode/company-mode/issues/68][company-mode/company-mode#68]]
offers a comprehensive discussion on the two.

The ticket is from the ‘company-mode‘ repository, so there's
probably some bias there, but company-mode hasn't provided
any reason for me reconsider my choice.

#+NAME: company-company
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company
  :commands global-company-mode
  :bind (("TAB" . company-indent-or-complete-common)
         ("C-c /" . company-files)
         ("M-SPC" . company-complete)
          (:map company-mode-map
                ("M-n" . company-select-next-or-abort)
                ("M-p" . company-select-previous-or-abort)))
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
    (setq company-tooltip-limit 20
          company-tooltip-align-annotations t
          company-idle-delay .3
          company-begin-commands '(self-insert-command)))
#+END_SRC

**** Company Quick Help

[[https://github.com/expez/company-quickhelp][Company Quick Help]] emulates =autocomplete= documentation-on-idle behavior, but using the
less-buggy =pos-tip= package rather than =popup-el=.

#+NAME: company-quick-help-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-quickhelp
  :after (company)
  :commands (company-quickhelp-manual-begin)
  :bind
  (:map company-active-map
        ("C-c h" . company-quickhelp-manual-begin))
  :config
  (company-quickhelp-mode 1))
#+END_SRC

**** Company Statistics

[[https://github.com/company-mode/company-statistics][Company statistics]] uses a persisent store of completions to rank the
top candidates for completion.

#+NAME: company-statistics-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-statistics
  :after (company)
  :demand t
  :init
  (company-statistics-mode))
#+END_SRC

** Snippets
*** YASnippet

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system based off the TextMate snippet syntax.

Here, I create a variable for my personal snippets directory.

After installation and enabling the package, add the personal snippets
directory to the list of directories where YASnippet should look for snippets.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :init
  (progn
    (yas-global-mode 1))
  :config
  (progn
    (defun goto-snippet-dir ()
      (interactive)
      (let ((default-directory
              (expand-file-name "snippets" user-emacs-directory)))
        (dired default-directory)))
    (define-key goto-map "s" #'goto-snippet-dir)))

#+END_SRC

YASnippet can also be used as a non-global minor mode on a per-buffer
basis.

Invoking ~yas-reload-all~ will load the snippet tables, and then
calling ~yas-minor-mode~ from the major mode hooks will load the
snippets corresponding to the major mode of the current buffer mode.

#+BEGIN_EXAMPLE emacs-lisp
(yas-reload-all)
(add-hook 'prog-mode-hook #'yas-minor-mode)
#+END_EXAMPLE

*** Code Library

#+NAME: snippets-cl
#+BEGIN_SRC emacs-lisp :tangle no
(use-package code-library
  :after (org)
  :init
  (progn
    (setq code-library-directory (concat user-emacs-directory "codelibrary"))
    (if-not (file-exists-p code-library-directory)
        (if (yes-or-no-p
             (format-message "Directory `%s' doesn't exist. Make directory?" code-library-directory))
            (mkdir code-library-directory))))
  :config
  (progn
    (append 'code-library-mode-file-alist
            '((latex-mode . "latex.org")
              (clojure-mode . "clojure.org")
              (makefile-mode . "makefile.org")
              (makefile-gmake-mode . "makefile.org")))
    (setq code-library-sync-to-gist t)))
#+END_SRC

** Minibuffer


#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<minibuffer-prompt>>
<<ivy-spec>>
<<counsel-config>>
<<swiper-config>>
<<smex-config>>

<<omnibox-spec>>
#+END_SRC

*** Prompt Properties

Don't let the cursor go into the minibuffer prompt.

From Xah Lee's [[http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html][emacs-stop-cursor-enter-prompt]], found in the [[https://github.com/syl20bnr/spacemacs/blob/bd7ef98e4c35fd87538dd2a81356cc83f5fd02f3/layers/%2Bdistributions/spacemacs-base/config.el#L128-L131][config.el]] file of the spacemacs base layer.

#+NAME: minibuffer-prompt
#+BEGIN_SRC emacs-lisp :tangle no
(setq minibuffer-prompt-properties
      '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
#+END_SRC

*** Ivy (Counsel)
**** Ivy

#+NAME: ivy-spec
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<ivy-base>>
<<ivy-prescient-config>>
<<ivy-ui>>
#+END_SRC

[[https://github.com/abo-abo/swiper][Ivy]] is a completion and selection framework in the same vein
as helm.

It doesn't have the same kind of ecosystem or interopability,
but its easy to configure, offers a minimalistic interface,
and is every bit as good of a completion tool as helm is,
if not better.

I prefer the default regex matcher, but if you want fuzzy matching as
a fallback or replacement checkout this [[https://oremacs.com/2016/01/06/ivy-flx/][article]].

#+NAME: ivy-base
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package ivy
  :init
  ;; Lazy Load Ivy
  ;; [1] https://github.com/raxod502/el-patch#lazy-loading-packages
  ;; [2] https://github.com/raxod502/radian/blob/develop/radian-emacs/radian-completion.el#L25
  (el-patch-feature ivy)
  (el-patch-defvar ivy-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map [remap switch-to-buffer]
        'ivy-switch-buffer)
      (define-key map [remap switch-to-buffer-other-window]
        'ivy-switch-buffer-other-window)
      map)
    "Keymap for `ivy-mode'.")
  (el-patch-define-minor-mode ivy-mode
    "Toggle Ivy mode on or off.
Turn Ivy mode on if ARG is positive, off othherwise.

  Global bindings:
  \\{ivy-mode-map}

  Minibuffer bindings:
  \\{ivy-minibuffer-map}"

    :group 'ivy
    :global t
    :keymap ivy-mode-map
    :lighter " ivy"
    (if ivy-mode
        (progn
          (setq completing-read-function 'ivy-completing-read)
          (el-patch-splice 2
            (when ivy-do-completion-in-region
              (setq completion-in-region-function 'ivy-completion-in-region))))
      (setq completing-read-function 'completing-read-default)
      (setq completion-in-region-function 'completion--in-region)))
  (ivy-mode +1)
  (diminish 'ivy-mode)
  :bind (("C-c C-r" . ivy-resume)
         ("C-`" . ivy-avy))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t
          ;; Default is caret (^)
          ivy-initial-inputs-alist nil
          ivy-sort-max-size 50000
          ivy-re-builders-alist
          '((t . ivy--regex-plus))))

  :diminish ivy-mode)
#+END_SRC


***** Ivy Prescient

#+NAME: ivy-prescient-config
#+BEGIN_SRC emacs-lisp :tangle no
;; Package `prescient' is a library for intelligent sorting and
;; filtering in various contexts. It is not published to MELPA, so we
;; must define a recipe here.
(use-package prescient
  :config
  ;; Remember usage statistics across Emacs sessions.
  (prescient-persist-mode +1))

;; Package `ivy-prescient' provides intelligent sorting and filtering
;; for candidates in Ivy menus.
(use-package ivy-prescient
  :demand t
  :after ivy
  :config

  ;; Use `prescient' for Ivy menus.
  (ivy-prescient-mode +1))

;; Package `company-prescient' provides intelligent sorting and
;; filtering for candidates in Company completions.
(use-package company-prescient
  :demand t
  :after company
  :config

  ;; Use `prescient' for Company menus.
  (company-prescient-mode +1))

#+END_SRC

***** Ivy icons

#+NAME: ivy-ui
#+BEGIN_SRC emacs-lisp :tangle no

(use-package all-the-icons-ivy
  :after (:all ivy all-the-icons)
  :init
  (all-the-icons-ivy-setup))

#+END_SRC

**** Counsel

#+NAME: counsel-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<counsel-base>>
<<counsel-ggtags-config>>
<<counsel-itunes-config>>
<<counsel-spotify-config>>
<<counsel-dash-config>>
<<counsel-tramp-config>>
#+END_SRC

#+NAME: counsel-base
#+BEGIN_SRC emacs-lisp :noweb no :tangle no
(use-package counsel
  :bind (("<f2> u" . counsel-unicode-char)
         ("<f1> l" . counsel-find-library)
         ("C-c l" . counsel-load-library)
         ("C-c g" . counsel-git)
         ("C-c j" . counsel-git-grep)
         ("C-c k" . counsel-ag)
         ("C-x l" . counsel-locate)
         (:map minibuffer-local-map
               ("C-r" . counsel-minibuffer-history)))
  :init
  ;; Lazy-load `counsel'.
  (el-patch-defvar counsel-mode-map
    (let ((map (make-sparse-keymap)))
      (dolist (binding
               '((execute-extended-command . counsel-M-x)
                 (describe-bindings . counsel-descbinds)
                 (describe-function . counsel-describe-function)
                 (describe-variable . counsel-describe-variable)
                 (describe-face . counsel-describe-face)
                 (list-faces-display . counsel-faces)
                 (find-file . counsel-find-file)
                 (find-library . counsel-find-library)
                 (imenu . counsel-imenu)
                 (load-library . counsel-load-library)
                 (load-theme . counsel-load-theme)
                 (yank-pop . counsel-yank-pop)
                 (info-lookup-symbol . counsel-info-lookup-symbol)
                 (pop-to-mark-command . counsel-mark-ring)
                 (bookmark-jump . counsel-bookmark)))
        (define-key map (vector 'remap (car binding)) (cdr binding)))
      map)
    "Map for `counsel-mode'.
Remaps built-in functions to counsel replacements.")

   (el-patch-defcustom counsel-mode-override-describe-bindings nil
    "Whether to override `describe-bindings' when `counsel-mode' is active."
    :group 'ivy
    :type 'boolean)

  (el-patch-define-minor-mode counsel-mode
    "Toggle Counsel mode on or off.
Turn Counsel mode on if ARG is positive, off otherwise. Counsel
mode remaps built-in emacs functions that have counsel
replacements. "
    :group 'ivy
    :global t
    :keymap counsel-mode-map
    :lighter " counsel"
    (if counsel-mode
        (progn
          (when (and (fboundp 'advice-add)
                     counsel-mode-override-describe-bindings)
            (advice-add #'describe-bindings :override #'counsel-descbinds))
          (define-key minibuffer-local-map (kbd "C-r")
            'counsel-minibuffer-history))
      (when (fboundp 'advice-remove)
        (advice-remove #'describe-bindings #'counsel-descbinds))))

  ;; Use customized Ivy configurations for built-in Emacs commands.
  (counsel-mode +1)

  ;; Diminish the lazy-loaded version of `counsel-mode'.
  (diminish 'counsel-mode)

  :config
  (setq-default counsel-git-grep-cmd counsel-git-grep-cmd-default)

  :diminish counsel-mode)

#+END_SRC

***** Counsel iTunes

#+NAME: counsel-itunes-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-itunes
  :if (executable-find "osascript")
  :straight
  (counsel-itunes
   :host github
   :repo "jchaffin/counsel-itunes")

  :demand t
  :after (:all counsel ivy)
  :init
   ;; make prefix command
   (define-prefix-command 'counsel-itunes-keymap)
   (define-key 'chaffin-keymap "i" 'counsel-itunes-keymap)
   ;; define keymap
   (define-key 'counsel-itunes-keymap "-" #'counsel-itunes-volume-down)
   (define-key 'counsel-itunes-keymap "+" #'counsel-itunes-volume-up)
   (define-key 'counsel-itunes-keymap "t" #'counsel-itunes-tracklist)
   (define-key 'counsel-itunes-keymap "p" #'counsel-itunes-play-pause)
   (define-key 'counsel-itunes-keymap "c" #'counsel-itunes-current-track)
   (define-key 'counsel-itunes-keymap "P" #'counsel-itunes-playlist)
   (define-key 'counsel-itunes-keymap "n" #'counsel-itunes-next-track)
   (define-key 'counsel-itunes-keymap "b" #'counsel-itunes-previous-track)
   (define-key 'counsel-itunes-keymap "s" #'counsel-itunes-shuffle))

#+END_SRC

***** Counsel Spotify

#+NAME: counsel-spotify-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-spotify
  :straight t)
#+END_SRC

***** Counsel Projectile

[[https://github.com/ericdanan/counsel-projectile][Counsel Projectile]] provides a project management interface via ivy and
friends.

#+NAME: counsel-projectile-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel-projectile
  :after (:all projectile counsel)
  :demand t
  :init
  (counsel-projectile-mode t))
#+END_SRC

***** Counsel Gtags

#+NAME: counsel-ggtags-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-gtags
  :after (:all ggtags counsel)
  :demand t
  :init
  (progn
    (setq counsel-gtags-ignore-case t
          counsel-gtags-auto-update t)))
#+END_SRC

***** Counsel Dash

Counsel dash provides a simple wrapper around [[https://github.com/areina/helm-dash][helm-dash]] bindings to provide
ivy integration with dash docsets. This is not great, as installing
=helm-dash= requires installing =helm= itself.

See my [[#macos-dash][implementation]] if you are running macOS, have [[https://kapeli.com/dash][Dash]] installed on
your system, and would like to open docsets natively in the Dash
documentation browser.

#+NAME: counsel-dash-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel-dash
  :after (:all counsel)
  :demand t
  :if *is-mac*)
#+END_SRC

***** Counsel Tramp

#+NAME: counsel-tramp-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package counsel-tramp
  :init
   (defun straight-recipes-installed (pkg)
            (f-dir? (f-join user-emacs-directory "straight" "build" (symbol-name pkg))))
   (defalias #'package-installed-p #'straight-recipes-installed)
  :after counsel
  :demand t)
#+END_SRC

**** Swiper

#+NAME: swiper-config
#+BEGIN_SRC emacs-lisp :tangle no

(use-package swiper
  :bind
  (("\C-s" . swiper)))

#+END_SRC

*** Smex

A smart M-x enhancement for Emacs.
#+NAME: smex-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package smex
  :after (ivy)
  :init
  (setq-default smex-history-length 32))
#+END_SRC

*** Omnibox

#+NAME: omnibox-spec
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package omnibox
    :commands omnibox-M-x
    :bind (:map omnibox-mode-map
                ("M-x" . omnibox-M-x))
    :init
    (let ((pkgdir "~/.local/share/icons-in-terminal"))
      (when (f-dir-p pkgdir)

      (add-to-list 'load-path pkgdir)))
      (when (locate-library "font-lock+")
        (require 'font-lock+)
        (require 'icons-in-terminal)))

#+END_SRC

* Terminal

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<term-with-editor>>
<<term-multiterm>>
<<term-xterm>>
<<term-zsh-macfix>>
<<term-tramp>>
#+END_SRC

** With Editor

#+NAME: terminal-with-editor
#+BEGIN_SRC emacs-lisp :tangle no
(use-package with-editor
  :config
  (progn
    (add-to-hooks #'with-editor-export-editor
                  '(shell-mode-hook
                    term-exec-hook
                    eshell-mode-hook))))
#+END_SRC

** Multi-Term

#+NAME: term-multiterm
#+BEGIN_SRC emacs-lisp :tangle no
(use-package multi-term
  :bind
  (("C-c M-RET t" . multi-term)
   ("C-c M-RET b" . multi-term-prev)
   ("C-c M-RET n" . multi-term-next)
   ("C-c M-RET o" . multi-term-dedicated-toggle))
  :config
  (progn
    (setq multi-term-program
          (if (string= shell-file-name "/bin/sh")
              "/bin/bash"
            "/bin/zsh"))
    (add-to-list 'term-bind-key-alist
                 '("C-x C-j" . term-line-mode))
    (add-to-list 'term-bind-key-alist
                 '("C-c C-k" . term-char-mode))))

#+END_SRC

** xterm

#+NAME: term-xterm
#+BEGIN_SRC emacs-lisp :tangle no
(xterm-mouse-mode 1)
#+END_SRC

** Run Bash On Windows/PC
- [[https://www.masteringemacs.org/article/running-shells-in-emacs-overview][Mastering Emacs - Running Shells in Emacs]]

#+BEGIN_SRC emacs-lisp :tangle yes
(when *is-windows*
  (progn
    (setq explicit-shell-file-name "C:/path/to/bash.exe"
          shell-file-name "bash"
          explicit-bash.exe-args '("--noediting" "--login" "-i"))
    (setenv "SHELL" shell-file-name)
    (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)))
#+END_SRC

** Eshell

#+NAME: eshell-spec
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
;; Begin Eshell 

;; eshell bookmark
<<esh-bookmark>>

;; eshell z
<<esh-z>>

;; eshell prompt extras
<<esh-prompt-extras>>

;; End Eshell
#+END_SRC

*** Eshell Bookmark

#+NAME: esh-bookmark
#+BEGIN_SRC emacs-lisp :tangle no
(use-package eshell-bookmark
    :config (add-hook 'eshell-mode-hook 'eshell-bookmark-setup))
#+END_SRC

*** Eshell Z

#+NAME: esh-z
#+BEGIN_SRC emacs-lisp :tangle no

(use-package eshell-z
    :init
    (defun eshell-z-hook ()
      (require 'eshell-z))
    (add-hoook 'eshell-mode-hook #'eshell-z-hook))

#+END_SRC

*** Eshell Prompt Extras

#+NAME: esh-prompt-extras
#+BEGIN_SRC emacs-lisp :tangle no
(use-package eshell-prompt-extras
    :after virtualenvwrapper
    :demand t
    :custom
    (setq eshell-modify-global-environment t)
    :config
    (with-eval-after-load "esh-opt"
      (when (require 'virtualenvwrapper)
        (venv-initialize-interactive-shells)
        (venv-initialize-eshell))
      (setq eshell-highlight-prompt t
            eshell-prompt-function #'epe-theme-lambda)))
#+END_SRC


** Shell

Zsh is whack when running the emacs =shell= function. This fixes that problem.

#+NAME: term-zsh-macfix
#+BEGIN_SRC emacs-lisp :tangle no
(when *is-mac*
  (setq explicit-shell-file-name "/bin/sh"
	shell-file-name "sh")
  (setenv "SHELL" shell-file-name))
#+END_SRC

** Tramp

#+NAME: term-tramp
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<tramp-default>>
<<tramp-any>>
#+END_SRC

*** Default Method

#+NAME: tramp-default
#+BEGIN_SRC emacs-lisp :tangle no
(setq tramp-default-method "ssh")
#+END_SRC

*** Anything Tramp

#+NAME: tramp-any
#+BEGIN_SRC emacs-lisp :tangle no
(use-package anything-tramp
  :bind (("C-c s" . anything-tramp)))
#+END_SRC


* Web

#+NAME: web-spec
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
<<web-browser>>
<<web-email>>
<<web-cloud>>
#+END_SRC

** Web Servers and Utilities

#+NAME: emacs-web-serve
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package simple-httpd
    :straight (simple-httpd
               :type git
               :host github
               :repo "skeeto/emacs-web-server"
               :local-repo "simple-httpd"))

(use-package websocket)

(use-package uuidgen)

(use-package web-server)

#+END_SRC

** Browsing

#+NAME: web-browser
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
<<browser-xwidget>>
<<browser-url>>
<<browser-macos>>
<<browser-google>>
<<browser-search>>
<<browser-org-advise>>
<<browser-gitremote>>
<<browser-default>>
<<browser-engine>>
#+END_SRC

*** Webkit xwidget

#+NAME: browser-xwidget
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
<<xwidget-ns>>
<<xwidget-xwid>>
#+END_SRC

**** nsxwidget

See [[https://github.com/veshboo/emacs#example-customization-using-xwidget-webkit][veshboo/emacs]].

#+NAME: xwidget-ns
#+BEGIN_SRC emacs-lisp :tangle no
(use-package xwidget
  :if (> emacs-major-version 26)
  :init
  (progn
    (defvar xwidget-webkit-bookmark-jump-new-session) ;; xwidget.el
    (defvar xwidget-webkit-last-session-buffer) ;; xwidget.el
    (require 'bookmark)
    (add-hook 'pre-command-hook
              (lambda ()
                (if (eq this-command #'bookmark-bmenu-list)
                    (if-not (eq major-mode 'xwidget-webkit-mode)
                        (setq xwidget-webkit-bookmark-jump-new-session t)
                      (setq xwidget-webkit-bookmark-jump-new-session nil)
                      (setq xwidget-webkit-last-session-buffer (current-buffer)))))))
  :bind ((:map xwidget-webkit-mode-map
               ("w" . xwidget-current-url-message-kill)))
  :config
  (progn
    (defun xwidget-webkit-open-file (&optional file)
      "Render FILE using xwidget-webkit"
      (interactive "fFile: ")
      (xwidget-webkit-browse-url
       (concat "file://"
               (and (memq system-type '(windows-nt ms-dos)) "/")
               (expand-file-name (or file (buffer-file-name))))))))
#+END_SRC

**** xwidgete

#+NAME: xwidget-xwid
#+BEGIN_SRC emacs-lisp :tangle no
(use-package xwidgete
  :after (xwidget))
#+END_SRC


*** Browse url

- [[https://emacs.stackexchange.com/a/7332][Stack Exchange - How to make eww default browser in emacs]]

#+NAME: browser-url
#+BEGIN_SRC emacs-lisp :tangle no

(use-package browse-url
  :config
  (progn
    (when (not (display-graphic-p))
      (setq browse-url-browser-function 'eww-browse-url))))

#+END_SRC

*** Browser utilities on macOS

The =osx-browse= library provides several useful commands for using the
Google Chrome, Safari, and Firefox web browsers on macOS.

#+NAME: browser-macos
#+BEGIN_SRC emacs-lisp :tangle no
(use-package osx-browse
  :if *is-mac*
  :defines (osx-browse-mode osx-browse-mode-map)
  :demand t
  :init
  (progn
    (osx-browse-mode 1)))
#+END_SRC

*** Google search at point

#+NAME: browser-google
#+BEGIN_SRC emacs-lisp :tangle no
(defun google-search-query-at-point (&optional edit-query)
  "Search for the expression at point in the default web browser.
If the optional prefix EDIT-QUERY is specified,
the user will be prompted to edit the search string first."
  (interactive "P")
  (let* ((search-prefix "https://google.com/search?q=")
         (thing (if (thing-at-point 'url)
                    (thing-at-point-url-at-point)
                  (concat
                   search-prefix
                   (if (use-region-p)
                       (buffer-substring-no-properties
                        (region-beginning) (region-end))
                     (thing-at-point 'word)))))
         (search (if (or edit-query
                         (and (>= (length thing) (length search-prefix))
                              (string= (substring thing (length search-prefix)) "")))
                     (concat search-prefix
                             (read-from-minibuffer "Search Query: "))
                   thing)))
    (browse-url search)))
#+END_SRC

*** Search Web

#+NAME: browser-search
#+BEGIN_SRC emacs-lisp :tangle no
(use-package search-web
  :bind (("C-c w" . search-web)))
#+END_SRC

*** Advise =org-open-at-point=
:PROPERTIES:
:ID:       69b03145-629e-4593-ae4c-6cbd5404ff3e
:CUSTOM_ID: org-open-at-point-browser
:END:

This [[https://www.emacswiki.org/emacs/BrowseUrl#toc28][function]] advises =org-open-at-point= to allow choosing different browsers.

#+NAME: browser-org-advise
#+BEGIN_SRC emacs-lisp :tangle no
(defadvice org-open-at-point (around org-open-at-point-choose-browser activate)
  (let ((browse-url-browser-function
         (cond ((equal (ad-get-arg 0) '(4))
                'browse-url-generic)
               ((equal (ad-get-arg 0) '(16))
                'choose-browser)
               (t
                (lambda (url &optional new)
                  (if (and (> emacs-major-version 26)
                           (display-graphic-p))
                      (xwidget-webkit-browse-url url t)
                    (eww-browse-url url t)))))))
    ad-do-it))
#+END_SRC

*** Browse at remote

#+NAME: browser-gitremote
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package browse-at-remote
  :init
  (progn
    (if *is-mac*
        (when (fboundp 'osx-browse-url-chrome)
          (setq browse-url-browser-function 'osx-browse-url-chrome)))))
#+END_SRC

*** Set default browser

Interactively.

#+NAME: browse-default
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar browse-url-browser-alist
      '(("chrome" . browse-url-chrome)
        ("firefox" . browse-url-firefox)
        ("eww" . eww-browse-url)
        ("xwidget-webkit" . xwidget-webkit-browse-url)))

(if *is-mac*
    (progn
      (setf (cdr (assoc "chrome" browse-url-browser-alist)) #'osx-browse-url-chrome)
      (setf (cdr (assoc "firefox" browse-url-browser-alist)) #'osx-browse-url-firefox)
      (add-to-list 'browse-url-browser-alist '("safari" . osx-browse-url-safari))))


(defun set-browser-function ()
  (interactive)
  (let ((browser (assoc (completing-read "Browser: " browse-url-browser-alist)
                        browse-url-browser-alist)))
    (setq browse-url-browser-function (cdr browser)))

  (advice-add 'osx-browse-url :around #'browse-url-extract-org-link))
#+END_SRC

*** Engine Mode

#+NAME: browser-engine
#+BEGIN_SRC emacs-lisp :tangle no
(use-package engine-mode
  :init
  (engine-mode t)
  :config
  (progn
    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s")

    (defengine worldcat
      "https://ucla.worldcat.org/search?q=%s")

    (defengine proquest
      "https://search.proquest.com"
      :browser 'xwidget-webkit-browse-url)

    (defengine google
      "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
      :keybinding "g")

    (defengine cassi
      "http://cassi.cas.org/search.jsp"
      :browser 'xwidget-webkit-browse-url)

    (defengine google-bookmarks
      "chrome://bookmarks/?q=%s")

    (defengine google-images
      "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s")

    (defengine google-maps
      "http://maps.google.com/maps?q=%s"
      :docstring "Mappin' it up.")

    (defengine project-gutenberg
      "http://www.gutenberg.org/ebooks/search/?query=%s")

    (defengine rfcs
      "http://pretty-rfc.herokuapp.com/search?q=%s")

    (defengine stack-overflow
      "https://stackoverflow.com/search?q=%s")

    (defengine twitter
      "https://twitter.com/search?q=%s")

    (defengine wikipedia
      "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w"
      :docstring "Searchin' the wikis.")

    (defengine wiktionary
      "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

    (defengine wolfram-alpha
      "http://www.wolframalpha.com/input/?i=%s")

    (defengine youtube
      "http://www.youtube.com/results?aq=f&oq=&search_query=%s")

    (defengine ctan
      "http://www.ctan.org/search/?x=1&PORTAL=on&phrase=%s"
      :docstring "Search the Comprehensive TeX Archive Network (ctan.org)")))
#+END_SRC

** Email
#+NAME: web-email
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<email-mu>>
#+END_SRC

*** Mu

#+NAME: email-mu
#+BEGIN_SRC emacs-lisp :tangle no
(use-package mu4e
  :load-path "/usr/local/opt/mu/share/emacs/site-lisp/mu/mu4e"
  :config
  (progn
    (setq mu4e-maildir (expand-file-name "~/.mail")
          mu4e-context-policy 'pick-first
          mu4e-compose-policy nil
          mu4e-get-mail-command "offlineimap -q -u quiet"
          mu4e-show-images t
          mu4e-show-addresses t)

     ;; smtp settings
     (setq mu4e-send-mail-function 'smtp-mail-send-it
           mu4e-default-smtp-server "smtp.gmail.com"
           smtpmail-smtp-service 587
           smtp-mail-smtp-stream-type 'ssl)


     (setq mu4e-contexts
           `( ,(make-mu4e-context
                :name "private"
                :match-func (lambda (msg)
                              (when msg
                                mu4e-message-contact-field-matches msg
                                :to "jchaffin57@gmail.com"))
                :leave-func (lambda ()
                              (mu4e-message "Leaving Gmail Account"))
                :vars '( (mu4e-reply-to-address "jchaffin@ucla.edu")
                         ( user-mail-address . "jchaffin57@gmail.com" )
                         ( user-full-name . "Jacob Chaffin" )
                         ( mu4e-drafts-folder . "/private/[Gmail].Drafts" )
                         ( mu4e-sent-folder . "/private/[Gmail].Sent Mail" )
                         ( mu4e-refile-folder . "/archived")
                         ( mu4e-compose-signature .
                                                  (concat
                                                   "Jacob Chaffin\n"
                                                   "UCLA 19\n"
                                                   "Linguistics and Computer Science\n"
                                                   "jchaffin@ucla.edu\n"))))

              ,(make-mu4e-context
                :name "school"
                :enter-func (lambda () (mu4e-message "Switching to UCLA Mail"))
                :leave-func (lambda () (mu4e-message "Leaving UCLA Mail"))
                :match-func  (lambda (msg)
                               (when msg
                                 (mu4e-message-contact-field-matches msg :to (or
                                                                              "jchaffin@ucla.edu"
                                                                              "jchaffin@g.ucla.edu"))))
                :vars '( (user-mail-address . "jchaffin@ucla.edu" )
                         (user-full-name . "Jacob Chaffin" )
                         (mu4e-compose-signature . (concat
                                                    "Jacob Chaffin\n"
                                                    "UCLA 19\n"
                                                    "Linguistics and Computer Science\n"
                                                    "jchaffin@ucla.edu\n"
                                                    "(650)-380-3288\n"))))))))
#+END_SRC

** Cloud Integration

#+NAME: web-cloud
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
<<cloud-onenote>>
#+END_SRC

*** Org OneNote

Work account is for office portal, not a Microsoft account. I need integration or authorization via office.

#+NAME: cloud-onenote
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-onenote
  :straight t)
#+END_SRC

* Prose

#+NAME: prose-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<prose-define-keymap>>
<<prose-spellcheck>>
<<prose-completion>>
<<prose-notes>>
<<prose-readview>>
#+END_SRC

** Prose Keymap

#+NAME: prose-define-keymap
#+BEGIN_SRC emacs-lisp :tangle no
(define-prefix-command 'prose-keymap)
(define-key 'chaffin-keymap "p" 'prose-keymap)
#+END_SRC

** Spelling and Grammar

#+NAME: prose-spellcheck
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; Flyspell
<<sc-flyspell>>
;; Langtool
<<sc-langtool>>
;; Academic
<<sc-academic>>
;; Proselint
<<sc-proselint>>
#+END_SRC

Tools for checking lexical and grammatical errors in text
buffers[fn:15].

*** Flyspell

#+NAME: sc-flyspell
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
<<flyspell-base>>
<<flyspell-correct-config>>
#+END_SRC

#+NAME: flyspell-base
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package flyspell
    :init
    (with-eval-after-load 'org
      (add-hook 'org-mode-hook 'flyspell-mode))
    :config
    (progn
      (when (executable-find "hunspell")
        (setq-default ispell-program-name "hunspell")
        (setq-default ispell-dictionary "en_US")
        (setq ispell-really-hunspell t))))
#+END_SRC

**** Flyspell Correct

#+NAME: flyspell-correct-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flyspell-correct-ivy
  :after (:all flyspell ivy)
  :demand t
  :config
  (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-previous-word-generic))
#+END_SRC

*** Langtool

LanguageTool is a Java plugin which provides style and grammar
checking for natural language.

#+NAME: sc-langtool
#+BEGIN_SRC emacs-lisp :tangle no
(use-package langtool
  :if *is-mac*
  :after (flyspell)
  :demand t
  :config
  (progn
    (setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.1/libexec/languagetool-commandline.jar"
          langtool-mother-tongue "en"
          langtool-disabled-rules '("WHITESPACE_RULE"))))
#+END_SRC

*** Academic Phrases

#+NAME: sc-academic
#+BEGIN_SRC emacs-lisp :tangle no
(use-package academic-phrases
  :straight t)
#+END_SRC

*** Proselint

#+NAME: sc-proselint
#+BEGIN_SRC emacs-lisp :tangle no
(with-eval-after-load 'flycheck
  (flycheck-define-checker proselint
                           "A linter for prose."
                           :command ("proselint" source-inplace)
                           :error-patterns
                           ((warning line-start (file-name) ":" line ":" column ": "
	                                   (id (one-or-more (not (any " "))))
	                                   (message) line-end))
                           :modes (text-mode org-mode markdown-mode gfm-mode))
  (add-to-list 'flycheck-checkers 'proselint))

#+END_SRC

** Text Completion

#+NAME: prose-completion
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; Company Dictionary
<<completion-company-dict>>
;; Dictionary.el
<<completion-dictionary-el>>
#+END_SRC

*** Company Dict

#+NAME: completion-company-dict
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-dict
  :after (company)
  :demand t
  :init
  (add-to-list 'company-backends 'company-dict)
  :config
  (setq company-dict-enable-fuzzy t
        company-dict-enable-yasnippet t))
#+END_SRC

*** Dictionary.ela
:PROPERTIES:
:ID:       98EF59F6-66E8-47B3-A437-B1D53A74832A
:CUSTOM_ID: dictionary-el
:END:

The [[https://github.com/myrkr/dictionary-el][dictionary.el]] package provides an Emacs client which uses an open source
dictionary server to lookup words. What it lacks in bells and
whistles, it makes up for in compatibility and hackability [fn:16].

#+NAME: completion-dictionary-el
#+BEGIN_SRC emacs-lisp :tangle no
(use-package dictionary
  :commands (dictionary-lookup-definition)
  :init
  (define-prefix-command 'dictionary-keymap)
  (define-key 'prose-keymap "d" 'dictionary-keymap)
  (define-key 'dictionary-keymap "i" 'dictionary-lookup-definition))
#+END_SRC

** Taking Notes

#+NAME: prose-notes
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; Deft
<<notes-deft>>
;; Lorem Ipsum
<<notes-dummy>>
#+END_SRC

*** Deft

[[https://jblevins.org/projects/deft/][Deft]] is a notetaking application for Emacs.

#+NAME: notes-deft
#+BEGIN_SRC emacs-lisp :tangle no :comments org
(use-package deft
  :if *is-mac*
  :bind ("C-x C-n" . deft)
  :config
  (progn
    (setq deft-extensions '("org")
          deft-directory "~/Dropbox/org/notes/"
          deft-use-filename-as-title t
          deft-default-extension "org")))
#+END_SRC

*** Org Velocity

#+NAME: notes-velocity
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-velocity
  :straight org
  :bind
  (("C-c n" . org-velocity))
  :demand t
  :init
  (progn
    (setq org-velocity-bucket (expand-file-name "bucket.org" org-directory))))
#+END_SRC

*** Generating Dummy Text

#+NAME: notes-dummy
#+BEGIN_SRC emacs-lisp :tangle no
(use-package lorem-ipsum
  :straight t)
#+END_SRC

** Writing mode

#+NAME:  prose-writing
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
<<writing-olivetti>>
<<writing-writerrom>>
<<writing-variable-pitch>>
#+END_SRC


*** Variable Pitch

#+NAME: writing-variable-pitch
#+BEGIN_SRC emacs-lisp :tangle no
(defvar org-fixed-pitch-faces
  '(org-table
    org-code
    org-special-keyword
    org-verbatim
    org-meta-line
    org-block
    org-block-begin-line
    org-block-end-line
    org-done
    org-document-info-keyword)
  "Faces to keep fixed-width when using ‘org-variable-pitch-minor-mode’.")

(defvar org-fixed-pitch-font
  (face-attribute 'fixed-pitch :family))

(defvar org-variable-pitch-font
  (face-attribute 'variable-pitch :family))

(setq org-fixed-pitch-font "Monospace")
(setq org-variable-pitch-font "Bookmania")

(defun toggle-variable-pitch-font ()
  (interactive)
  (let ((spec '(default variable-pitch :family "Bookmania")))
    (set (make-local-variable 'face-remapping-alist)
         (if (member spec face-remapping-alist)
             (delete spec face-remapping-alist)
           (cons spec face-remapping-alist)))))

(defun org-toggle-variable-pitch ()
  "Toggle use of face `variable-pitch'.
This works by frobbing `face-remapping-alist'."
  (interactive)
  (if-not face-remapping-alist
      (progn
        (face-remap-add-relative 'variable-pitch :family org-variable-pitch-font)
        (face-remap-add-relative 'default 'variable-pitch)
        (->> org-fixed-pitch-faces
            (mapcar (lambda (x) (list x :family org-fixed-pitch-font)))
            (mapcar (lambda (x) (apply #'face-remap-add-relative x)))))
    (setq face-remapping-alist nil)))


(defvar-local org-use-variable-pitch nil)
;; (when (local-variable-if-set-p 'org-use-variable-pitch)
;;   (add-hook 'org-mode-hook #'org-toggle-variable-pitch))
#+END_SRC

*** Centered Cursor Mode

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package centered-cursor-mode
  :straight t)
#+END_SRC

*** Olivetti

#+NAME:  writing-olivetti
#+BEGIN_SRC emacs-lisp :tangle no

(use-package olivetti
  :after centered-cursor-mode
  :demand t
  :config
  (progn
    (add-hook 'olivetti-mode-hook (lambda ()
                                    (auto-fill-mode -1)))

    (add-hook 'olivetti-mode-hook 'centered-cursor-mode)))

#+END_SRC

*** Writeroom

#+NAME: writing-writeroom
#+BEGIN_SRC emacs-lisp :tangle no
(use-package writeroom-mode
  :config
  (progn
    (add-hook 'writeroom-mode-hook 'org-toggle-variable-pitch)
    (add-hook 'writeroom-mode-hook (lambda () (auto-fill-mode -1)))))
#+END_SRC

** Reading and viewing prose

#+NAME: prose-readview
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<readview-epub>>
<<readview-fc>>
<<readview-justify>>
<<readview-fc-indicator>>
<<readview-adaptive-wrap>>
#+END_SRC

*** Justify Kp

#+NAME: readview-justify
#+BEGIN_SRC emacs-lisp :tangle no
(use-package justify-kp
  :straight (:host github
                   :repo "Fuco1/justify-kp"))
#+END_SRC

*** Nov

[[https://github.com/wasamasa/nov.el][Nov.el]] is a major mode for reading EPUB documents in Emacs.

#+NAME: readview-epub
#+BEGIN_SRC emacs-lisp :tangle no
(use-package nov
  :mode (("\\.epub\\'" . nov-mode))
  :config
  (progn

    (require 'justify-kp)


    (defun nov-setup ()
      (face-remap-add-relative 'variable-pitch
                               :family "Bookmania")
      (visual-line-mode 1)
      (visual-fill-column-mode 1)

      (setq nov-text-width most-positive-fixnum
            visual-fill-column-center-text t))

    (defun my-nov-window-configuration-change-hook ()
      (my-nov-post-html-render-hook)
      (remove-hook 'window-configuration-change-hook
                   'my-nov-window-configuration-change-hook t))

    (defun my-nov-post-html-render-hook ()
      (if (get-buffer-window)
          (let ((max-width (pj-line-width))
                buffer-read-only)
            (save-excursion
              (goto-char (point-min))
              (while (not (eobp))
                (when (not (looking-at "^[[:space:]]*$"))
                  (goto-char (line-end-position))
                  (when (> (shr-pixel-column) max-width)
                    (goto-char (line-beginning-position))
                    (pj-justify)))
                (forward-line 1))))
        (add-hook 'window-configuration-change-hook
                  'my-nov-window-configuration-change-hook
                  nil t)))


    (add-hook 'nov-mode-hook 'nov-setup)
    (add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook)))
#+END_SRC

*** Adaptive Wrap

#+NAME: readview-adaptive-wrap
#+BEGIN_SRC emacs-lisp :tangle no
(use-package adaptive-wrap
  :straight t)
#+END_SRC

*** Visual Fill Column

#+NAME: readview-fc
#+BEGIN_SRC emacs-lisp :tangle no
(use-package visual-fill-column
  :commands (visual-fill-column-mode)
  :config
    (progn
      (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust)
      (setq split-window-preferred-function
            #'visual-fill-column-split-window-sensibly)
      (setq visual-fill-column-width
            ;; take Emacs 26 line numbers into account
            (+ (if (boundp 'display-line-numbers) 6 0)
               fill-column))

      ;;;###autoload
      (defvar visual-fill-column-use-visual-line nil
        "Enable `visual-line-mode' when `visual-fill-column-mode' is non-nil.")

      (if-not visual-fill-column-use-visual-line
          (add-hook 'visual-fill-column-mode-hook #'visual-line-mode))))

#+END_SRC

*** Fill Column Indicator

#+NAME: readview-fc-indicator
#+BEGIN_SRC emacs-lisp :tangle no
(use-package fill-column-indicator
  :init
  (setq fci-rule-use-dashes nil))
#+END_SRC

** Graphics
*** Artist Mode

Artist mode is a built-in Emacs package.

#+NAME: artist-mode-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package artist-mode
  :bind ((:map artist-mode-map
               ("C-c C-a p" . artist-select-op-pen-line))))
#+END_SRC

*** UML Diagrams
**** Ditaa

#+NAME: ditaa-config
#+BEGIN_SRC emacs-lisp :tangle no
(when (and *is-mac*
           (executable-find "brew")
           (executable-find "ditaa"))
  (let ((ditaa-path  (replace-regexp-in-string
                      "\n"  ""
                      (shell-command-to-string
                       "realpath $(brew --prefix ditaa)/libexec/*.jar"))))
    (setq org-ditaa-jar-path ditaa-path)))

#+END_SRC

**** PlantUML
#+NAME: plantuml-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package plantuml-mode
  :if (executable-find "plantuml")
  :defines (org-plantuml-jar-path plantuml-jar-path)
  :config
  (progn
    (defun chaffin/plantuml-resolve-jar-path ()
      (when (executable-find "plantuml")
        (replace-regexp-in-string "\n" ""
                                  (shell-command-to-string
                                   "realpath $(brew --prefix plantuml)/libexec/plantuml.jar"))))
      (when *is-mac*
        (setq org-plantuml-jar-path (chaffin/plantuml-resolve-jar-path))
        (setq plantuml-jar-path (chaffin/plantuml-resolve-jar-path)))))
#+END_SRC

*** Graphs
**** Graphviz

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package graphviz-dot-mode
  :if (executable-find "dot")
  :mode (("\\.dot\\'" . graphviz-dot-mode))
  :defines (graphiz-dot-program-set)
  :bind ((:map graphviz-dot-mode-map
               ("M-s g" . graphviz-dot-program-set)))
  :config
  (progn
    (defun graphviz-dot-program-set (&optional program)
      (interactive)
      (let ((dot-program (or program (completing-read "Process: " graphviz-dot-layout-programs))))
        (setq graphviz-dot-dot-program dot-program)))))

(with-eval-after-load 'graphviz-dot-mode
  ;; https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/graphviz/packages.el
  (define-key graphviz-dot-mode-map "{" nil)
  (define-key graphviz-dot-mode-map "}" nil)
  (add-to-list 'org-babel-load-languages '(dot . t))
  (setq org-src-lang-modes
        (append '(("dot" . graphviz-dot))
                 (delete '("dot" . fundamental) org-src-lang-modes))))
#+END_SRC

*** Thesaurus

This library needs to allow setting transfer protocol on the user
end. It's hardcoded to use port 80. HTTP doesn't really work on my
school's WLAN.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package thesaurus
  :demand t
  :config
  (progn
    ;;  `thesaurus-bhl-api-key' is set in secrets
    (setq thesaurus-prompt-mechanism 'counsel-imenu
          url-proxy-services nil)))
#+END_SRC

* Code
** Error checking
*** Flycheck

#+NAME: flycheck-spec
#+BEGIN_SRC :tangle yes :noweb yes :exports none
<<flycheck-base>>
#+END_SRC

[[https://github.com/Flycheck/Flycheck][On the fly]] syntax highlighting.

#+NAME: flycheck-base
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
  (use-package flycheck
    :commands (halidom/enable-flycheck)
    :init
    (defun halidom/enable-flycheck (mode)
      "Use flycheck in MODE."
      (push mode flycheck-global-modes))

    (defun halidom/toggle-flycheck-error-list ()
      "Toggle flycheck's error list window.
If the error list is visible hide the window. Else display the buffer."
      (interactive)
      (-if-let (window (flycheck-get-error-list-window))
          (quit-window nil window)
        (flycheck-list-errors)))

    (defun halidom/goto-flycheck-error-list ()
      "Open and go to the error list buffer."
      (interactive)
      (unless (get-buffer-window (get-buffer flycheck-error-list-buffer))
        (flycheck-list-errors)
        (switch-to-buffer-other-window flycheck-error-list-buffer)))

    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)
                  flycheck-emacs-lisp-load-path 'inherit)

)
#+END_SRC

*** Flycheck Color Mode Line

Colors the modeline according to current Flycheck state of buffer.

#+NAME: flycheck-color-modeline-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flycheck-color-mode-line
  :init
  (add-hook 'flycheck-mode 'flycheck-color-mode-line-mode))
     #+END_SRC

** Code Style
*** Indentation

Tabs are the bane of humanity[fn:17]. [[http://www.urbandictionary.com/define.php?term=dont%20%40%20me][Don't @ me]].

#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default tab-width 2
              indent-tabs-mode nil)

(when (>= emacs-major-version 26)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode))

#+END_SRC

*** Symbol Highlighting

#+NAME: symbol-hl
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<hl-hl-sexp>>
<<hl-hl-todo>>
<<hl-highlight-symbol>>
<<hl-prettify-symbol>>
#+END_SRC

**** Hlsexp

Minor mode to highlight sexp.

#+NAME: hl-hl-sexp
#+BEGIN_SRC emacs-lisp :tangle no
(use-package highlight-sexp
  :straight t)
#+END_SRC

**** Hl Todo

Highlight =TODO= keywords:
#+NAME: hl-hl-todo
#+BEGIN_SRC emacs-lisp :tangle no
(use-package hl-todo
  :commands (hl-todo-mode)
  :config
  (add-hook 'prog-mode-hook #'hl-todo-mode))
#+END_SRC

**** Highlight Symbol

#+NAME: hl-highlight-symbol
#+BEGIN_SRC emacs-lisp :tangle no
(use-package highlight-symbol
  :straight t)
#+END_SRC

**** Prettify Symbols

Seems to be problems rendering symbols on Debian. Not sure if this is
because the necessary fonts are not installed or if it's because of
the absence of a window system. I'll check for the latter for now.

#+NAME: hl-prettify-symbol
#+BEGIN_SRC emacs-lisp :tangle no
(when (display-graphic-p)
  (add-hook 'prog-mode-hook 'prettify-symbols-mode))
#+END_SRC

*** Code Folding
**** Origami.el

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package origami
  :after (:all dash s)
  :init
  (progn
    (global-origami-mode nil)))
#+END_SRC

*** Editorconfig

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package editorconfig
  :straight t)
#+END_SRC

** Code Completion
*** Pair Matching
**** Paredit

We could use ~:init~ key to hook the ~enable-paredit-mode~
function to each of the implementing languages like is
done [[https://github.com/tomjakubowski/.emacs.d/blob/master/init.el][here]], but I think adding the hook in the configuration
block of the programming language is easier to follow and
offers more meaningful semantics.

#+NAME: paredit-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package paredit
  :diminish paredit-mode
  :config
  (progn
    (use-package eldoc
      :config
      (eldoc-add-command
       'paredit-backward-delete
       'paredit-close-round))

    (autoload 'enable-paredit-mode "paredit"
      "Turn on pseudo-structural editing of Lisp code." t)))
   #+END_SRC

**** Smartparens

Like paredit, [[https://github.com/Fuco1/smartparens][smartparens]] is a minor-mode for managing parens
pairs. However, it also offers support for curly brackets in
JavaScript objects, angle brackets in HTML, and most other major
programming languages. I think I the "delete-on-command" behavior of
paredit for lisp programming, but in languages where locating
unmatched pairs is less comparable to searching for a needle in a
haystack, =smartparens= are a great productivity tool.

#+NAME: smartparens-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smartparens
  :init
  (progn
    (require 'smartparens-config)
    (smartparens-global-mode)

    (defun sp-wrap-math ()
      "Wrap marked region as ordinary LaTeX inline math mode."
      (interactive)
      (sp-wrap-with-pair "$"))


    (defun disable-smartparens ()
      "Disable smartparens when `paredit-mode' is enabled."
      (smartparens-mode -1))

    (when (fboundp 'paredit-mode)
      (add-hook 'paredit-mode-hook #'disable-smartparens))))
#+END_SRC

**** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

**** Parinfer

Disabling for now.

#+NAME: parinfer-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<lispy-config>>
<<parinfer-base>>
#+END_SRC

#+NAME: parinfer-base
#+BEGIN_SRC emacs-lisp :tangle no
(use-package parinfer
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
             pretty-parens  ; different paren styles for different modes.
             ;; evil           ; If you use Evil.
             lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
             paredit        ; Introduce some paredit commands.
             smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
             smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC

***** Lispy

#+NAME: lispy-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package lispy
  :defer t)
#+END_SRC

*** Gtags
:PROPERTIES:
:ID:       0E4B8051-2EB4-454F-BBB0-BD57A5AEAFA6
:END:

#+NAME: ggtags
#+BEGIN_SRC emacs-lisp :tangle yes
(if (getenv "GTAGSLABEL")
(use-package ggtags
  :straight t))
#+END_SRC

** Version Control

#+NAME: vc-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
<<vcs-svn-alist>>

(when (and (member 'hg chaffin-vcs-svn-alist)
           (executable-find "hg"))
  <<vcs-hg>>)

(when (and (member 'git chaffin-vcs-svn-alist)
           (executable-find "git"))
  <<vcs-git>>)
#+END_SRC

#+NAME: vcs-svn-alist
#+BEGIN_SRC emacs-lisp :tangle no
(defvar chaffin-vcs-svn-alist '(git)
  "List of VCS-SVNs for which libraries and tooling should be installed.
   Currently supports only `git' and `hg' as alist alues.")
#+END_SRC

*** Git

#+NAME: vcs-git
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<git-magit>>
<<git-gist>>
<<git-git-timemachine>>
<<git-git-messenger>>
<<git-git-modes>>
#+END_SRC

**** Magit
:PROPERTIES:
:ID:       AE7AB6CA-A097-4CB0-9B13-2B131CC2F5D9
:CUSTOM_ID: magit
:END:

#+NAME: git-magit
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<magit-kill-buffers>>
<<magit-config>>
<<magit-magithub>>
<<magit-orgit>>
<<magit-topgit-config>>
<<magit-stgit-config>>
#+END_SRC

[[https://github.com/magit/magit][Magit]] describes itself as one of two git porcelains, the other being
git itself.

A git porcelain is jargon for a program that features a user-friendly
vcs interface, as opposed to lower-level scripting commands.

It's not a vitrified ceramic commonly used for decorative tableware.
Magit would not be very good at that.

As a git client though, magit is awesome.


#+NAME: magit-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package magit
  :defines (magit-mode-hook)
  :bind
  (("C-c v v" . magit-status)
   ("C-c v m" . magit-merge)
   ("C-c v b" . magit-blame)
   ("C-c v C" . magit-clone)
   ("C-c v i" . magit-init)
   ("C-c v l" . magit-log-buffer-file)
   ("C-c v c" . magit-checkout)
   ("C-c v d" . magit-done)
   ("C-c v D" . magit-done-no-prompt)
   ("C-c v f" . magit-stage-file)
   ("C-c v p" . magit-pull)
   ("C-c v P" . magit-push)
   ("C-c v S" . magit-stash))
  :config
  (progn
    (setq magit-save-repository-buffers 'dontask)))


#+END_SRC

***** Magit topgit

#+NAME: magit-topgit-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package magit-topgit
  :init
  (progn
    (add-hook 'magit-mode-hook 'turn-on-magit-topgit))
  :demand t
  :after (magit))
#+END_SRC

***** Magit stgit

To configure:

#+BEGIN_SRC shell :tangle no
git config --global --add magit.extension stgit
#+END_SRC

#+NAME: magit-stgit-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package magit-stgit
  :init
  (progn
    (add-hook 'magit-mode-hook 'magit-stgit-mode))
  :demand t
  :after (magit))
#+END_SRC

***** Killing Magit Buffers

#+NAME: magit-kill-buffers
#+BEGIN_SRC emacs-lisp :tangle yes :exports none :noweb yes
<<magit-done>>
<<magit-done-no-prompt>>
#+END_SRC

Magit creates a lot of buffers for various git operations. This
function cleans up these buffers upon invocation.

#+NAME: magit-done
#+BEGIN_SRC emacs-lisp :tangle no
(defun magit-done (&optional no-prompt)
  "Kill magit buffers upon completion of various git processe(s).
If called with the interactive prefix argument NO-PROMPT, then
yunmodified magit buffers will be killed without confirming."
  (interactive "P")
  (let* ((buffer-names (buffer-list-names))
	 (magit-regexp-string "^\\*magit")
	 (magit-buffer-names (seq-filter (lambda (b) (string-match magit-regexp-string b)) buffer-names))
	 (magit-buffers (mapcar (lambda (b) (get-buffer b)) magit-buffer-names)))
    (cond (no-prompt
	   (mapcar
	    (lambda (b)
	      (if (> (window-count-unique) 1)
		  (progn
		    (let ((w (get-buffer-window)))
		      (kill-buffer b)
		      (delete-window w)))
		(kill-buffer b)))
	    magit-buffers))
	  (magit-buffers
	   (kill-some-buffers magit-buffers))
	  (t
	   (message "No magit buffer(s) to kill" )))))
#+END_SRC

#+NAME: magit-done-no-prompt
#+BEGIN_SRC emacs-lisp :tangle yes
(defun magit-done-no-prompt ()
  "Close magit buffers without prompting."
    (interactive)
    (magit-done 1))
#+END_SRC

***** Magithub

[[https://github.com/vermiculus/github][Magithub]] offers an interface to github to complement magit.

#+NAME: magit-magithub
#+BEGIN_SRC emacs-lisp :tangle no
(use-package magithub
  :after (magit)
  :commands magithub-dispatch-popup
  :bind (:map magit-status-mode-map
	      ("@" . magithub-dispatch-popup))
  :config
  (progn
    (magithub-feature-autoinject t)))
#+END_SRC

***** Orggit

Insert Org links to magit buffers.

#+NAME: magit-orgit
#+BEGIN_SRC emacs-lisp :tangle no
(use-package orgit
  :straight t)
#+END_SRC

**** gist.el

Emacs integration for gist.github.com.

[[https://github.com/defunkt/gist.el][Gist]] requires generating a personal access token with ~gist~ scope, and
optionally ~user~ and ~repo~ scopes.

#+NAME: git-gist
#+BEGIN_SRC emacs-lisp :tangle no
(use-package gist
  :bind
  (("C-c C-g l" . gist-list)
   ("C-c C-g r" . gist-region)
   ("C-c C-g b" . gist-buffer)
   ("C-c C-g p" . gist-buffer-private)
   ("C-c C-g B" . gist-region-or-buffer)
   ("C-c C-g P" . gist-region-or-buffer-private)))
#+END_SRC

**** git-timemachine

Travel back in time (to your last commit).

#+NAME: git-git-timemachine
#+BEGIN_SRC emacs-lisp :tangle no
(use-package git-timemachine
  :bind
  ("C-c v t" . git-timemachine-toggle)
  :config
  (setq git-timemachine-abbreviation-length 7))
#+END_SRC

**** git-messenger

Pop-up feature for viewing the last git commit.

#+NAME: git-git-messenger
#+BEGIN_SRC emacs-lisp :tangle no
(use-package git-messenger
  :bind
  (("C-c C-v m" . git-messenger:popup-message)))
#+END_SRC

**** git modes

#+NAME: git-git-modes
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-modes
  :straight t)
#+END_SRC

*** Mercurial

#+NAME: vcs-hg
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<hg-monky>>
<<hg-ahg>>
#+END_SRC

**** Monky
Monky provides an interactive interface for mercurial. It's
essentially to ~hg~ what [[#magit][magit]] is for ~git~.

#+NAME: hg-monky
#+BEGIN_SRC emacs-lisp :tangle no
(use-package monky
  :config
  (setq monky-process-type 'cmdserver))
#+END_SRC

**** ahg

#+NAME: hg-ahg
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ahg
  :straight t)
#+END_SRC

** Prog Tools
*** DevOps

#+NAME: devops-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
;; Docker
<<devops-docker>>

;; AWS
<<devops-aws>>
#+END_SRC

**** Docker

#+NAME: devops-docker
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
<<docker-cmds>>
<<docker-dockerfile>>
<<docker-docker-compose>>
<<docker-docker-tramp>>
#+END_SRC

***** Docker commands

#+NAME: docker-cmds
#+BEGIN_SRC emacs-lisp :tangle no
(use-package docker
    :bind ("C-c d" . docker))
#+END_SRC

***** Dockerfile mode

#+NAME: devops-docker
#+BEGIN_SRC emacs-lisp :tangle no
(use-package dockerfile-mode
  :mode ( "Dockerfile\\'" .  dockerfile-mode))
#+END_SRC

***** Docker Compose

#+NAME: docker-docker-compose
#+BEGIN_SRC emacs-lisp :tangle no
(use-package docker-compose-mode
    :mode ("docker-compose.yml\\'" . docker-compose-mode))

#+END_SRC

***** Docker Tramp

#+NAME: docker-docker-tramp
#+BEGIN_SRC emacs-lisp :tangle no
(use-package docker-tramp
  :straight t)
#+END_SRC

**** Amazon Web Services

#+NAME: devops-aws
#+BEGIN_SRC emacs-lisp :tangle no
(use-package aws
  :config
  (progn
    (autoload 'ec2-desribe-instances "aws")
    (autoload 'ec2-describe-volumes "aws")
    (autoload 'ec2-describe-snapshots "aws")
    (autoload 'ec2-describe-group "aws")
    (autoload 'ec2-get-console "aws")))
#+END_SRC

*** Time Tracking

Automate time tracking with [[https://github.com/wakatime/wakatime-mode][wakatime]].

#+NAME: wakatime-mode-config
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package wakatime-mode
    :if (executable-find "wakatime")
    :init
    (add-hook 'prog-mode-hook 'wakatime-mode)
    :config
    (progn
      (setq wakatime-cli-path
            (expand-file-name
            "~/.local/lib/python3.6/site-packages/wakatime/cli.py")
            wakatime-python-bin
            (expand-file-name "~/.pyenv/shims/python"))
       ;; from spacemacs wakatime layer
      (defun wakatime-dashboard ()
        (interactive)
        (browse-url "https://wakatime.com/dashboard"))))
#+END_SRC

*** Debugging
**** RealGUD

A front-end for interacting with external debuggers in Emacs.

#+NAME: debug-realgud
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package realgud
  :straight t)
#+END_SRC

** Prog Lang API

Opt-in to programming languages. A very simplified version of
Spacemacs =dotspacemacs-configuration-layers=.

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar proglang-enabled-list '()
  "List of languages for which straight should install respective tooling,
   syntax-highlighting, and peripherals.")


(defun proglang-enabled-p (lang)
  (member lang proglang-enabled-list))

(defun add-to-list-proglang-enabled (&rest langs)
  (mapcar (lambda (lang)
            (setq proglang-enabled-list (cons lang proglang-enabled-list)))
          langs))

(when *is-mac*
  (add-to-list-proglang-enabled 'asm 'common-lisp 'clojure 'groovy 'java
                                'javascript 'markdown 'scala 'python 'ruby
                                'web))
#+END_SRC

** Programming Languages
*** ASM

- See Spacemacs [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/asm/][ASM layer]].

#+NAME: asm-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'asm)
  <<asm-asm-hooks>>
  <<asm-asm-mode>>
  <<asm-asm-init-x86-lookup>>)
#+END_SRC

**** ASM Hook Functions

#+NAME: asm-asm-hooks
#+BEGIN_SRC emacs-lisp :tangle no
(defun chaffin-asm-setup ()
  (setq tab-stopp-list (number-sequence 2 60 2)))

(defvar asm-colon-has-space nil)

(defun chaffin-asm-colon-check-space ()
  (setq asm-colon-has-space nil)
  (when (and (not (null (char-after)))
             (member (string (char-after)) '(" " "\t")))
    (setq asm-colon-has-space t)))

(defun chaffin-asm-colon-delete-space ()
  (unless asm-colon-has-space
    (call-interactively 'delete-horizontal-space)))

(advice-add 'asm-colon :before 'chaffin-asm-colon-check-space)
(advice-add 'asm-colon :after  'chaffin-asm-colon-delete-space)
#+END_SRC

**** ASM Mode

#+NAME: asm-asm-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package asm-mode
  :mode (("\\.64sa\\'" . asm-mode)
         ("\\.64da\\'" . asm-mode)
         ("\\.32sa\\'" . asm-mode)
         ("\\.32da\\'" . asm-mode))
  :config
  (progn
    (define-key asm-mode-map (kbd "C-j") 'newline)))
#+END_SRC

**** NASM mode

#+NAME: asm-nasm-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package nasm-mode
  :mode
  (("\\.[n]*\\(asm\\|s\\)\\'" . nasm-mode))
  :init
  (progn
    (add-hook 'nasm-mode-hook #'chaffin-asm-setup))
  :config
  (progn
    (define-key nasm-mode-map (kbd "C-j") 'newline)
    (define-key nasm-mode-map (kbd ":") 'asm-colon)))

#+END_SRC

**** ASM Init x86 Lookup

#+NAME: asm-asm-init-x86-lookup
#+BEGIN_SRC emacs-lisp :tangle no
(use-package x86-lookup
  :init
  (progn
    (when (straight-check-package "pdf-tools")
      (setq x86-lookup-browse-pdf-function 'x86-lookup-browse-pdf-pdf-tools)))
  :config
  (setq x86-lookup-pdf
        "~/Dropbox/Documents/Books/ASM/x86-manual/325462-sdm-vol-1-2abcd-3abcd.pdf"))

#+END_SRC

*** C/C++

#+NAME: c-cxx-spec
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'c-c++)
  <<c-cxx-cmake>>)
#+END_SRC

**** Cmake Mode

#+NAME: c-cxx-cmake
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cmake-mode
  :mode (("CMakeLists\\.txt\\'" . cmake-mode)
         ("\\.cmake\\'" . cmake-mode))
  :init
  (defun cmake-build-compilation-database ()
    (interactive)
    (let* ((project-directory (cond ((-non-nil projectile-project-root)
                                     projectile-project-root)
                                    ((eq 'major-mode 'dired-mode)
                                     dired-directory)
                                    (t default-directory)))
           (build-directory (f-join project-directory "build"))
           (compiledb (f-join project-directory "compile_commands.json")))
      (when (f-exists? (f-join project-directory "CMakeLists.txt"))
        (if-not (f-exists? build-directory)
            (mkdir build-directory))
        (with-temp-buffer
          (shell-command "make clean")
          (cd build-directory)
          (cmake-command-run "-DCMAKE_EXPORT_COMPILE_COMMANDS=YES .."))
        (if (f-exists? compiledb)
          (make-symbolic-link compiledb (f-slash build-directory) t))))))



#+END_SRC

**** Make commands

#+NAME: c-cxx-make
#+BEGIN_SRC emacs-lisp :tangle no
(defun make-command (command)
  (interactive "P")
  (compilation-start (read-shell-command "Make command: " "make " command)))

#+END_SRC

*** Common Lisp

#+NAME: common-lisp
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'common-lisp)
  <<common-lisp-hooks>>
  <<common-lisp-slime>>
)
#+END_SRC

Configuration for common-lisp

#+NAME: common-lisp-hooks
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes
(with-eval-after-load 'paredit
  (add-hook 'lisp-mode-hook #'paredit-mode)
  (add-hook 'lisp-mode-hook #'highlight-symbol-mode)
  (when *is-mac*
    (add-hook 'lisp-mode-hook
              (setq-local dash-plugin-keywords '("lisp")))))
#+END_SRC

**** Slime

[[https://common-lisp.net/project/slime/][SLIME]] is The Superior Lisp Interaction Mode for Emacs.

#+NAME: common-lisp-slime
#+BEGIN_SRC emacs-lisp :tangle no
(use-package slime
  :commands slime
  :defines (slime-complete-symbol*-fancy slime-completion-at-point-functions)
  :init
  (progn
    (setq slime-contribs
            '(slime-asdf
      			  slime-fancy
			        slime-indentation
      			  slime-sbcl-exts
      			  slime-scratch)
	        inferior-lisp-program "sbcl"
      	  ;; enable fuzzy matching in code buffer and SLIME REPL
      	  slime-complete-symbol*-fancy t
      	  slime-completion-at-point-functions 'slime-fuzzy-complete-symbol)

    (defun slime-disable-smartparens ()
      (smartparens-strict-mode -1)
      (turn-off-smartparens-mode))

    (add-hook 'slime-repl-mode-hook #'slime-disable-smartparens)))
#+END_SRC

*** Clojure(Script)

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'clojure)
  <<clojure-mode>>
  <<clojure-leiningen>>
  <<clojure-interactive>>)
#+END_SRC

**** Clojure Mode

Everything about [[https://gihub.com/clojure-emacs/clojure-mode][clojure]], is awesome. That's
before we even get to [[#cider][CIDER]]...:beer::raised_hands_tone3:

[INSERT GIF HERE]

#+NAME: clojure-mode
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none
<<clojure-mode-config-base>>
<<clojure-mode-extra-font-locking>>

(with-eval-after-load 'clojure-mode
  <<clojure-mode-config-compojure>>
  <<clojure-mode-config-om-next>>
  (add-hook 'clojure-mode-hook
            (lambda ()
              (setq-local dash-plugin-keywords '("clojure")))))
#+END_SRC

Provides key bindings and font-locking for Clojure.

#+NAME: clojure-mode-config-base
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package clojure-mode
  :mode (("\\.edn$"   . clojure-mode)
         ("\\.cljs$"  . clojurescript-mode)
         ("\\.cljx$"  . clojurex-mode)
         ("\\.cljsc$" . clojurec-mode))
  :config
  (progn
    (setq clojure-indent-style :always-indent)
    (add-hook 'clojure-mode-hook #'enable-paredit-mode)
    (add-hook 'clojure-mode-hook #'show-paren-mode)))
#+END_SRC

***** Clojure Mode Extra Font Locking

Additional syntax highlighting for ~clojure-mode~.

#+NAME: clojure-mode-extra-font-locking
#+BEGIN_SRC emacs-lisp :tangle no
(use-package clojure-mode-extra-font-locking
  :straight t)
#+END_SRC

***** Emacs Indentation for Popular Libraries
****** Compojure

[[https://github.com/weavejester/compojure][Compojure]] is a web framework for Clojure and Clojurescript
applications. This snippet is taken from the [[https://github.com/weavejester/compojure/wiki/Emacs-indentation][Emacs Indentation]] page of
the repository wiki to provide better indentation for compojure macros.

#+NAME: clojure-mode-config-compojure
#+BEGIN_SRC emacs-lisp :tangle no
(define-clojure-indent
  (defroutes 'defun)
  (GET 2)
  (POST 2)
  (PUT 2)
  (DELETE 2)
  (HEAD 2)
  (ANY 2)
  (OPTIONS 2)
  (PATCH 2)
  (rfn 2)
  (let-routes 1)
  (context 2))
#+END_SRC

****** Om Next

#+NAME: clojure-mode-config-om-next
#+BEGIN_SRC emacs-lisp :tangle no
(put-clojure-indent 'defui '(1 nil nil (1)))
(put-clojure-indent 'dom/div 1)
#+END_SRC

**** Clojure Interactive Development Environments

#+NAME: clojure-interactive
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<clojure-interactive-ide>>
(cond ((eq clojure-ide 'cider)
       <<clojure-interactive-cider>>)
      ((eq clojure-ide 'inf-clojure)
       <<clojure-interactive-inf-clojure>>)
      (t (message (concat "Clojure IDE not set. "
			  "Set `clojure-ide' to an appropriate value "
			  "to activate"))))
#+END_SRC

*****  Select Clojure IDE

Two options:
- [[#cider][CIDER]]
- [[#inf-clojure][inf-clojure]]

#+NAME: clojure-interactive-ide
#+BEGIN_SRC emacs-lisp :tangle no
(defcustom clojure-ide 'cider
  "Select the interactive development environment to use
   in clojure mode. Note that Emacs must be restarted when
   the value of this variable is modified for the change
   to take effect."
  :type '(symbol)
  :options '(cider inf-clojure)
  :group 'clojure)
#+END_SRC

***** CIDER
:PROPERTIES:
:ID:       324C7B10-8B92-4C49-8FAC-702C65C7A2EE
:CUSTOM_ID: cider
:END:

[[https://github.com/clojure-emacs/cider][Clojure Interactive Development Environment that Rocks for Emacs]]

#+NAME: clojure-interactive-cider
#+BEGIN_SRC emacs-lisp :tangle no
(use-package cider
    :init
    (with-eval-after-load 'clojure-mode
      (add-hook 'clojure-mode-hook 'cider-mode))
    :config
    (progn
      (setq cider-repl-history-file "~/.emacs.d/cider-history"
            cider-repl-use-clojure-font-lock t
            cider-repl-result-prefix ";; => "
            cider-repl-wrap-history t
            cider-repl-history-size 3000
            cider-show-error-buffer nil
            nrepl-hide-special-buffers t)
      (add-hook 'cider-mode-hook #'eldoc-mode)
      (add-hook 'cider-mode-hook #'company-mode)
      (add-hook 'cider-repl-mode-hook #'company-mode)
      (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
      (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion)
      (add-hook 'cider-repl-mode-hook #'subword-mode)))
#+END_SRC

***** Inf Clojure
:PROPERTIES:
:ID:       D1642BA7-3A2F-40CA-8B80-D28927627A91
:CUSTOM_ID: inf-clojure
:END:

#+NAME: clojure-interactive-inf-clojure
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<inf-clojure-config>>
(with-eval-after-load 'inf-clojure
  <<inf-clojure-figwheel>>)
#+END_SRC


 [[https://github.com/clojure-emacs/inf-clojure][inf-clojure]] is a drop-in replacement for CIDER that provides basic
 integration with a running Clojure subprocess. This package is
 necessary for running an inferior Figwheel process with Emacs.
 It's not as feature-rich as CIDER, but still offers the ability
 to load files, switch namespaces, evaluate expressions, show
 documentation, and do macro-expansion.


#+NAME: inf-clojure-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package inf-clojure
  :init
  (add-hook 'clojure-mode-hook #'inf-clojure-minor-mode))
#+END_SRC

 Now lets write a simple function to run Figwheel as a Clojure
 subprocess.

 #+NAME: inf-clojure-figwheel
 #+BEGIN_SRC emacs-lisp :tangle no
(defun figwheel-repl ()
  (interactive)
  (inf-clojure "lein figwheel"))
 #+END_SRC

**** Leiningen

#+NAME: clojure-leiningen
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<lein-cljsbuild-config>>
<<elein-config>>
#+END_SRC

***** Lein Cljsbuild

Minor mode offering ~lein cljsbuild~ commands for the Leiningen [[https://github.com/emezeske/lein-cljsbuild][plugin]].

#+NAME: lein-cljsbuild-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package cljsbuild-mode
  :init
  (add-to-hooks #'cljsbuild-mode
                 '(clojure-mode clojurescript-mode)))
#+END_SRC

***** elein

[[https://github.com/remvee/elein][Elein]] rovides support for leiningen commands in Emacs.

#+NAME: elein-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package elein
  :straight t)
#+END_SRC

**** Clojure Syntax Checking

#+NAME: clojure-syntax-checking
#+BEGIN_SRC emacs-lisp :tangle no :exports none
<<flycheck-pos-tip>>
#+END_SRC

***** Flycheck Clojure
The [[https://github.com/clojure-emacs/squiggly-clojure][flycheck-clojure]] package allows syntax checking for Clojure(Script).
It uses [[https://github.com/jonase/eastwood][eastwood]], [[http://typedclojure.org/][core.typed]] and [[https://github.com/jonase/kibit][kibit]] to lint Clojure(Script) through CIDER.

#+NAME: flycheck-clojure
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flycheck-clojure
  :after (cider flycheck)
  :config
  (flycheck-clojure-setup))
#+END_SRC

Okay. There's been some snares getting this package to work, but with
the help of this [[http://blog.podsnap.com/squiggly.html][blogpost]] from the ~flycheck-clojure~ repo. (note to
self: READMEs are friends), I'm beginning to make progress.

After cloning the project repo from my local file system, my debugging
process has consisted of the following:

1. Navigate to the [[https://github.com/clojure-emacs/squiggly-clojure/tree/master/sample-project][sample-project]] in the ~squiggly-clojure~ project repo.
2. Open ~core.clj~
2. Launch an nrepl with Cider.
3. See ~flycheck-clojure~ being weird.
4. Annoyed Google search.
5. Edit my ~clojure~ configuration based on the last blog post.
6. Restart Emacs.
7. Repeat.

After running into problems documented in issues [[https://github.com/clojure-emacs/squiggly-clojure/issues/45][#45]], [[https://github.com/clojure-emacs/squiggly-clojure/issues/13][#13]], and [[https://github.com/clojure-emacs/squiggly-clojure/issues/46][#46,]]
+I finally was able to get ~flycheck-clojure~ to stop doing weird things+.

+It's now doing nothing at all.+

The project maintainers provide an [[https://github.com/clojure-emacs/example-config][example-config]] for setting up
emacs, cider, flycheck, and friends. I messed around with this config
for about half an hour and the latency issues and general
inconsistency are the same.

I'm guessing I need to actually include the linters in my project's
~project.clj~, but it's weird this package worked at all for bits and
stretches if the dependencies need to be installed manually.

***** Typed Clojure

Let's give this [[https://github.com/typedclojure/typed-clojure-mode][guy]] a try.

#+NAME: typed-clojure-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package typed-clojure-mode
  :after (clojure-mode)
  :init
  (add-hook 'clojure-mode-hook 'typed-clojure-mode))
#+END_SRC


~java.lang.GoEFUrself~!

 #+BEGIN_EXAMPLE sh
   # CompilerException java.lang.RuntimeException: Unable to resolve symbol: sym in this context, compiling:(clojure/core/types.clj:1170:5)
 #+END_EXAMPLE

 I've now stumbled upon ~cider--debug-mode~.

 This mode cannot be called manually, but with ~C-u C-M-x~ instead,
 and now =flycheck-clojure= +appears to be sort of working+.

3 months later...

The above strikethrough denotes the point in time where I officially
said [[https://www.si.com/nba/2017/05/16/steve-kerr-sneakers-message][FI]].

***** Flycheck-Pos-Tip

The ~flycheck-clojure~ repository recommendeds to install
[[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]] to keep linting and type errors from clashing with
CIDER eldoc information.

#+NAME: flycheck-pos-tip
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flycheck-pos-tip
  :after (flycheck)
  :init
  (flycheck-pos-tip-mode)
  :config
  (setq flycheck-display-errors-function
	#'flycheck-pos-tip-error-messages))
#+END_SRC

*** Emacs Lisp

#+BEGIN_SRC emacs-lisp :tangle yes
(defun emacs-lisp-style ()
  (paredit-mode 1)
  (highlight-symbol-mode 1)
  (setq lisp-indent-function 'common-lisp-indent-function)
)

(defun macos-dash-elisp-docsets ()
  (setq-local dash-plugin-keywords '("elisp")))

(add-hook 'emacs-lisp-mode-hook #'emacs-lisp-style)
(add-hook 'emacs-lisp-mode-hook #'macos-dash-elisp-docsets)

#+END_SRC

*** Groovy

#+NAME: java-groovy
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package groovy-mode
  :mode ("\\.gradle\\'" . groovy-mode)
  :config
  (progn
    (defun groovy-style ()
      (setq groovy-indent-offset 2
            tab-width 4
            indent-tabs-mode nil
            c-indent-comments-syntactically-p t))
    (add-hook 'groovy-mode-hook #'groovy-style)))
#+END_SRC

*** Java

#+NAME: chaffin-java-backend
#+BEGIN_SRC emacs-lisp :tangle no
(defcustom chaffin--java-backend 'meghanada
  "Select a backend to use when opening a *.java file."
  :type '(symbol)
  :options '(meghanada ensime eclim)
  :group 'programming)
#+END_SRC

#+NAME: java-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'java)
  <<chaffin-java-backend>>
  <<java-hooks>>
  <<java-autodisass-java-bytecode>>
  <<java-gradle>>
  <<java-google-c-style>>
  (cond ((eq chaffin--java-backend 'meghanada)
         (progn
           <<java-meghanada>>))
        ((eq chaffin--java-backend 'ensime)
         <<java-ensime>>)
        ((eq chaffin--java-backend 'eclim)
         <<java-eclim>>)))
#+END_SRC

#+NAME: java-hooks
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
(defun java-mode-style ()
  (c-set-offset 'arglist-close '0)
  (setq indent-tabs-mode nil
        tab-width 2
        c-basic-offset 2))

(defun java-mode-dash-docsets-hook ()
  (setq-local dash-plugin-keywords '("java" "gradle" "groovy")))

;; Enable Hooks
(add-hook 'java-mode-hook 'java-mode-style)
(with-system darwin
  (add-hook 'java-mode-hook 'java-mode-dash-docsets-hook))
#+END_SRC

**** Eclim
#+NAME: java-eclim
#+BEGIN_SRC emacs-lisp :tangle no

(use-package eclim
  :if *is-mac*
  ;; load my forked version
  ;; :load-path "site-lisp/emacs-eclim/"
  :config
  (setq eclim-eclipse-dirs '("/Applications/Eclipse.app/Contents/Eclipse")
        eclim-executable "/Applications/Eclipse.app/Contents/Eclipse/eclim"
        eclimd-executable "/Applications/Eclipse.app/Contents/Eclipse/eclimd"
        eclimd-default-workspace "~/Developer/Projects/Java/Workspace"
        eclimd-autostart-with-default-workspace t
        eclim-autostart nil
        eclim-wait-for-process t))

#+END_SRC

**** Gradle Mode
:PROPERTIES:
:ID:       0D4DEC79-5E2D-48D0-A8B1-38E2432565C8
:CUSTOM_ID: gradle-mode
:END:


Gradle is a build tool for Java. It's awesome.

#+NAME: java-gradle
#+BEGIN_SRC emacs-lisp :tangle no
(use-package gradle-mode
  :if (executable-find "gradle")
  :init
  (add-hook 'java-mode-hook
            (lambda ()
              (gradle-mode 1))))
#+END_SRC

**** Meghanada

#+NAME: java-meghanada
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package meghanada
  :commands (meghanada-mode meghanada-code-beautify-before-save)
  :bind
  (:map meghanada-mode-map
	      ("C-S-t" . meghanada-switch-testcase)
	      ("M-RET" . meghanada-local-variable)
	      ("M-r"   . meghanada-reference)
	      ("M-t"   . meghanada-typeinfo)
	      ("C-z"   . hydra-meghanada/body))
  :init
  (add-hook 'java-mode-hook
	    (lambda ()
	      ;; enable meghanada mode
	      (meghanada-mode t)))
  (add-hook 'java-mode-hook 'flycheck-mode)


  :config
  (progn
    (setq meghanada-server-remote-debug t
          meghanada-javac-xlint "-Xlint:all,-processing")

    (defhydra hydra-meghanada (:hint nil :exit t)
      "
       ^Edit^                          ^Tast or Task^
       ^^^^^^---------------------------------------------
       _f_: meghanada-compile-file     _m_: meghanada-restart
       _c_: meghanada-compile-project  _t_: meghanada-run-task
       _o_: meghanada-optimize-import  _j_: meghanada-run-junit-test-case
       _s_: meghanada-switch-test-case _J_: meghanada-run-junit-class
       _v_: meghanada-local-variable   _R_: meghanada-run-junit-recent
       _i_: meghanada-import-all       _r_: meghanada-reference
       _q_: exit                       _T_: meghanada-typeinfo
       "
      ("f" meghanada-compile-file)
      ("m" meghanada-restart)

      ("c"  meghanada-compile-project)
      ("o"  meghanada-optimize-import)
      ("s"  meghanada-switch-test-case)
      ("v"  meghanada-local-variable)
      ("i"  meghanada-import-all)


      ("t"  meghanada-run-task)
      ("T"  meghanada-typeinfo)
      ("j"  meghanada-run-junit-test-case)
      ("J"  meghanada-run-junit-class)
      ("R"  meghanada-run-junit-recent)
      ("r"  meghanada-reference)

      ("q" exit)
      ("z" nil "leave"))))


#+END_SRC

**** Ensime

#+NAME: java-ensime
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ensime
  :straight
  (ensime
   :host github
   :repo "ensime/ensime-emacs"
   :branch "2.0"))
#+END_SRC

**** Autodisass Java Bytecode

The [[https://github.com/gbalats/autodisass-java-bytecode][autodisass-java-bytecode]] package enables automatic disassembly of
Java bytecode inside Emacs buffers.

#+NAME: java-autodisass-java-bytecode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package autodisass-java-bytecode
  :defer t)
#+END_SRC

**** Google C Style

Use Google's Java [[https://google.github.io/styleguide/javaguide.html][styleguide]].

#+NAME: java-google-c-style
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package google-c-style
  :straight
  (google-c-style
   :host github
   :repo "google/styleguide"
   :branch "gh-pages")
   :config
   (add-hook 'java-mode-hook
            (lambda ()
              (google-set-c-style)
              (google-make-newline-indent))))
#+END_SRC

*** JavaScript

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
<<js-js2>>
<<js-json>>
<<js-tide>>
<<js-rjsx>>
<<js-cofee>>
<<js-node>>
#+END_SRC

**** js2-mode

#+NAME: js-js2
#+BEGIN_SRC emacs-lisp :tangle no
(use-package js2-mode
  :mode (("\\.js\\'" . js2-mode)
         ("\\.mjs\\'" . js2-mode))
  :demand t
  :config
  (progn
    (setq js-indent-level 2)))
#+END_SRC

**** JSON

#+NAME: js-json
#+BEGIN_SRC emacs-lisp :tangle no
(use-package json-mode
  :mode (("\\.json\\'" . json-mode))
  :config
  (progn
    (add-hook 'json-mode-hook
          (lambda ()
            (make-local-variable 'js-indent-level)
            (setq js-indent-level 2)))))
#+END_SRC

**** TypeScript

#+NAME: js-tide
#+BEGIN_SRC emacs-lisp :tangle no
(use-package tide
    :config
    (progn
      (defun setup-tide-mode ()
        (interactive)
        (tide-setup)
        (when (fboundp 'flycheck-mode)
          (flycheck-mode +1))
        
        (setq flycheck-check-syntax-automatically '(save mode-enabled))
        (eldoc-mode +1)
        (tide-hl-identifier-mode +1))

      ;; Formats buffer before saving
      (add-hook 'before-save-hook #'tide-format-before-save)
      
      (add-hook 'typescript-mode-hook #'setup-tide-mode)))
#+END_SRC

**** rjsx-mode

Real jsx support.

#+NAME: js-rjsx
#+BEGIN_SRC emacs-lisp :tangle no
(use-package rjsx-mode
  :after flycheck
  :demand t
  :mode "\\.jsx\\'")
#+END_SRC

**** Coffee

#+NAME: js-coffee
#+BEGIN_SRC emacs-lisp :tangle no
(use-package coffee-mode
  :mode ("\\.coffee\\'" . coffee-mode))
#+END_SRC

**** Node JS

#+NAME: js-node
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
;; Node Modules
<<node-modules-path>>

;; Npm
<<node-npm>>

;; Yarn
<<node-yarn>>

;; Node Version Manager (nvm)
<<node-nvm>>

#+END_SRC

***** Add Node Modules Path

#+NAME: node-modules-path
#+BEGIN_SRC emacs-lisp :tangle no
(use-package add-node-modules-path
  :if (executable-find "node")
  :init
  (progn
    (add-hook 'js2-mode-hook #'add-node-modules-path)))
#+END_SRC

***** NPM Mode

#+NAME: node-npm
#+BEGIN_SRC emacs-lisp :tangle no
(use-package npm-mode
  :init
  (progn
  (add-hook 'js2-mode-hook 'npm-mode)
  (add-hook 'json-mode-hook 'npm-mode)))
#+END_SRC

***** Yarn mode

#+NAME: node-yarn
#+BEGIN_SRC emacs-lisp :tangle no
(use-package yarn-mode
  :straight t)
#+END_SRC

***** NVM

#+NAME: node-nvm
#+BEGIN_SRC emacs-lisp :tangle no

(use-package nvm
  :if (executable-find "nvm")
  :straight t)

#+END_SRC

*** Python

#+NAME: py-python
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
;; Begin Python 
(when (proglang-enabled-p 'python)

  ;; Python Settings
  <<py-python-settings>>
  ;; Pyenv Mode
  <<py-pyenv>>
  ;; Pyenv Mode Auto
  <<py-pyenv-auto>>
  ;; Virtualenvwrapper
  <<py-virtualenvwrapper>>
  ;; Pyvenv
  <<py-pyvenv>>
  ;; Anaconda
  <<py-anaconda>>
  ;; Pip Requirements
  <<py-pip-requirements>>
  ;; Pydoc
  <<py-pydoc>>) ;; End Python

#+END_SRC

**** Python Settings

#+NAME: py-python
#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :init
  (when (executable-find "ipython3")
    (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
    (setq python-shell-interpreter "ipython3"
          python-shell-interpreter-args "-i"))
  :config
  (defun python-dash-docsets ()
    (setq-local dash-plugin-keywords
                '("python" "django" "twisted" "sphinx"
                  "flask" "tornado" "sqlalchemy" "numpy"
                  "scipy" "salt" "pandas" "matplotlib"
                  "cvp")))
  (when *is-mac*
    (add-hook #'python-dash-docsets)))

#+END_SRC


**** Elpy

#+NAME: py-elpy
#+BEGIN_SRC emacs-lisp :tangle no
(use-package elpy
    :config
  (elpy-rpc-backend "jedi"))

#+END_SRC

**** Pyenv Mode

#+NAME: py-pyenv
#+BEGIN_SRC emacs-lisp :tangle no
(use-package pyenv-mode
    :if (executable-find "pyenv")
    :init
    (add-to-list 'exec-path (user-home ".pyenv" "shims"))
    (setenv "WORKON_HOME" (file-name-as-directory (user-home ".pyenv" "versions")))
    (pyenv-mode)
    :bind
    ("C-x p e" . pyenv-activate-current-project)
    :commands

    (pyenv-mode-set pyenv-mode-unset pyenv-mode-versions)

    :config

    (defvar pyenv-current-version nil nil)

    (defun pyenv-init()
      "Initialize pyenv's current version to the global one."
      (let ((global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global"))))
        (message (concat "Setting pyenv version to " global-pyenv))
        (pyenv-mode-set global-pyenv)
        (setq pyenv-current-version global-pyenv)))

   (add-hook 'after-init-hook 'pyenv-init)

    (progn
      (with-eval-after-load 'projectile
        (defun projectile-pyenv-mode-set ()
          "Set pyenv version matching project name."
          (let ((project (projectile-project-name)))
            (if (member project (pyenv-mode-versions))
                (pyenv-mode-set project)
              (pyenv-mode-unset))))

        (add-hook 'projectile-after-switch-project-hook
                  'projectile-pyenv-mode-set))

      ;; http://rakan.me/emacs/python-dev-with-emacs-and-pyenv/
     (defun pyenv-activate-current-project ()
       "Automatically activates pyenv version if .python-version file exists."
       (interactive)
       (let ((python-version-directory (locate-dominating-file (buffer-file-name) ".python-version")))
         (if python-version-directory
             (let* ((pyenv-version-path (f-expand ".python-version" python-version-directory))
                    (pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8))))
               (pyenv-mode-set pyenv-current-version)
               (message (concat "Setting virtualenv to " pyenv-current-version))))))))
#+END_SRC

**** Pyenv Auto Set

#+NAME: py-pyenv-auto
#+BEGIN_SRC emacs-lisp :tangle no
(use-package pyenv-mode-auto)
#+END_SRC

**** Virtualenv Wrapper

#+NAME: py-virtualenvwrapper
#+BEGIN_SRC emacs-lisp :tangle no
(use-package virtualenvwrapper
    :init
    (setq venv-dirlookup-names '(".pyenv" ".venv"))
    (setq venv-location (getenv "WORKON_HOME"))
    :config
    (when (fboundp 'projectile-mode)
      (setq projectile-switch-project-action
            '(lambda ()
              (venv-projectile-auto-workon)
              (projectile-find-file)))))

#+END_SRC

**** Pyvenv

#+NAME: py-pyvenv
#+BEGIN_SRC emacs-lisp :tangle no
(use-package pyvenv
    :requires virtualenvwrapper
    :init
  (pyvenv-mode))
#+END_SRC



**** Anaconda

#+NAME: py-anaconda
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes :exports none
<<python-anaconda-mode>>
<<python-anaconda-company>>
#+END_SRC

***** Anaconda Mode

#+NAME: python-anaconda-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package anaconda-mode
  :init
  (progn
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode)))
#+END_SRC

***** Company Anaconda

#+NAME: python-anaconda-company
#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-anaconda
  :demand t
  :after (:all anaconda-mode company)
  :init
  (with-eval-after-load 'company
    `(add-to-list company-backends 'company-anaconda)))
#+END_SRC

**** Pip Requirements

#+NAME: py-pip-requirements
#+BEGIN_SRC emacs-lisp :tangle no
(use-package pip-requirements
    :straight t)
#+END_SRC

**** Pydoc

#+NAME: py-pydoc
#+BEGIN_SRC emacs-lisp :tangle no
(use-package pydoc
    :straight t)
#+END_SRC

**** EIN

#+NAME: ein-spec
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ein
    :config
    (setq ein:use-smartrep t))
#+END_SRC


*** Ruby

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'ruby)
  <<ruby-mode-config>>
  <<rvm-config>>)
#+END_SRC

**** ruby-mode

#+NAME: ruby-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ruby-mode
  :mode "\\.rb\\'"
  :interpreter "ruby"
  :config
  (progn
    (defun chaffin/ruby-mode-hook ()
      (require 'inf-ruby)
      (inf-ruby-keys))

    (add-hook #'ruby-mode-hook #'chaffin/ruby-mode-hook)
    (when *is-mac*
      (add-hook 'ruby-mode-hook
                (setq-local dash-plugin-keywords
                            '("ruby" "rails"))))))
#+END_SRC

**** rvm

#+NAME: rvm-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package rvm
  :commands (rvm-use-default)
  :config
  (rvm-use-default))
#+END_SRC

**** TODO enhanced ruby mode

*** Scala

#+NAME: scala-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'scala)
  <<scala-mode-config>>
  <<scala-sbt-mode-config>>)
#+END_SRC

**** Scala Mode
#+NAME: scala-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package scala-mode
  :interpreter
  ("scala" . scala-mode))
#+END_SRC

**** Sbt

#+NAME: scala-sbt-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package sbt-mode
  :commands (sbt-start sbt-command)
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map))
#+END_SRC

*** Web Programming

#+NAME: web-config
#+BEGIN_SRC emacs-lisp :noweb yes :tangle yes :exports none
;; Begin Web
(when (proglang-enabled-p 'web)
   ;; Web Mode
   <<web-mode-config>>
   ;; Tagedit Mode
   <<tagedit-mode-config>>
   ;; CSS Mode
   <<css-mode-config>>
   ;; Emmet Mode
   <<emmet-mode-config>>
   ;; Company Web
   <<company-web-config>>
   ;; htmlize
   <<htmlize-config>>) ;; End Web
#+END_SRC

**** Web Mode

#+NAME: web-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package web-mode
  :bind (:map web-mode-map
              ;; I should rebind this because it conficts
              ;; with `company-select-next-or-abort'
              ("M-n" . web-mode-tag-match))
  :mode
  (("\\.phtml\\'"      . web-mode)
   ("\\.tpl\\.php\\'"  . web-mode)
   ("\\.twig\\'"       . web-mode)
   ("\\.html\\'"       . web-mode)
   ("\\.htm\\'"        . web-mode)
   ("\\.[gj]sp\\'"     . web-mode)
   ("\\.as[cp]x?\\'"   . web-mode)
   ("\\.eex\\'"        . web-mode)
   ("\\.erb\\'"        . web-mode)
   ("\\.mustache\\'"   . web-mode)
   ("\\.handlebars\\'" . web-mode)
   ("\\.hbs\\'"        . web-mode)
   ("\\.eco\\'"        . web-mode)
   ("\\.ejs\\'"        . web-mode)
   ("\\.djhtml\\'"     . web-mode))

  :config
  (progn
    (setq web-mode-engines-alist
          '(("php" . "\\.phtml\\'")
            ("blade" . "\\.blade\\'")))

    (defun chaffin--web-mode-enable ()
      (setq web-mode-enable-auto-pairing t
            web-mode-enable-css-colorization t
            web-mode-enable-block-face t
            web-mode-enable-part-face t
            web-mode-enable-comment-keywords t
            web-mode-enable-heredoc-fontification t
            web-mode-enable-current-element-highlight t
            web-mode-enable-current-column-highlight t))

    (add-hook 'web-mode-hook #'chaffin--web-mode-enable)


    (defun chaffin--web-mode-indent ()
      (setq web-mode-markup-indent-offset 2
            web-mode-code-indent-offset 2
            web-mode-style-padding 1
            web-mode-script-padding 1
            web-mode-block-padding 0
            web-mode-comment-style 2))

    (add-hook 'web-mode-hook #'chaffin--web-mode-indent)

    (when *is-mac*
      (add-hook 'web-mode-hook
                (lambda ()
                  (setq-local dash-plugin-keywords
                              '("css" "html" "javascript"
                                "react")))))))
#+END_SRC

**** Emmet

#+NAME: emmet-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package emmet-mode
  :defer t
  :init
  (add-to-hooks 'emmet-mode
   '(css-mode-hook
     html-mode-hook
     web-mode-hook)))
#+END_SRC

**** HTML
***** Tag Edit

#+NAME: tagedit-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package tagedit
  :diminish tagedit-mode
  :config
  (progn
    (tagedit-add-experimental-features)
    (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
#+END_SRC

***** Htmlize
#+NAME: htmlize-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package htmlize
  :straight t)
#+END_SRC

**** CSS
***** CSS Mode

#+NAME: css-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package css-mode
  :after (web-mode)
  :commands (css-expand-statment css-contrac-statement)
  :init
  (progn
    (defun css-expand-statment ()
      (interactive)
      (save-excursion
        (end-of-line)
        (search-backward "{")
        (forward-char 1)
        (while (or (eobp) (not (looking-at "}")))
          (let ((beg (point)))
            (newline)
            (search-forward ";")
            (indent-region beg (point))))
        (newline)))

    (defun css-contrac-statement ()
      "Contract CSS Block"
      (interactive)
      (end-of-line)
      (search-backward "{")
      (while (not (looking-at "}"))
        (join-line -1))))
  :config
  (progn
    (add-hook 'css-mode-hook (lambda ()
                               (setq css-indent-offset 2)))))

#+END_SRC

***** Less

#+NAME: css-less-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package css-less-mode
  :mode ("\\.less\\'" . less-css-mode))
#+END_SRC

***** SASS

#+NAME: sass-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package sass-mode
  :mode ("\\.sass\\'" . sass-mode))
#+END_SRC

***** SCSS

#+NAME: scss-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package scss-mode
  :mode ("\\.scss\\'" . scss-mode))
#+END_SRC

**** Company Web

[[https://github.com/osv/company-web][Company Web]] provides code completion for html-mode, web-mode, jade-mode,
and slim-mode using company.

#+NAME: company-web-config
#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package company-web
  :demand t
  :after (:all company web-mode tern company-tern)
  :init
  (progn
    (defun chaffin--company-web-mode-hook ()
      "Autocompletion hook for web-mode"
      (set (make-local-variable 'company-backends)
           '(company-tern company-web-html company-yasnippet company-files)))

    (add-hook 'web-mode-hook #'chaffin--company-web-mode-hook)
    ;; Enable JavaScript completion between <script>...</script> etc.
    (defadvice company-tern (before web-mode-set-up-ac-sources activate)
      "Set `tern-mode' based on current language before running company-tern."
      (if (equal major-mode 'web-mode)
          (let ((web-mode-cur-language
                 (web-mode-language-at-pos)))
            (if (or (string= web-mode-cur-language "javascript")
                    (string= web-mode-cur-language "jsx"))
                (unless tern-mode (tern-mode))
              (if tern-mode (tern-mode -1))))))))
#+END_SRC

*** Markdown

#+NAME: markdown-config
#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes :exports none
(when (proglang-enabled-p 'markdown)
  <<markdown-mode-config>>
  <<markdown-mode-plus-config>>
  <<markdown-toc-config>>
  <<markdownfmt-config>>
  <<md-livedown>>
)
#+END_SRC

**** Markdown Mode

- See https://jblevins.org/projects/markdown-mode/

#+NAME markdown-mode-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package markdown-mode
  :straight t
  :defines (markdown-command markdown-mode-hook)
  :mode
  (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init
  (progn
    (setq markdown-command "multimarkdown")
    (add-hook 'markdown-mode-hook)
    (if (fboundp 'macos-open-with-default-app)
        (setq markdown-open-command macos-open-with-default-app)
      (setq browse-url-browser-function #'xwidget-webkit-open-file))
)
  :config
  (progn
    (add-to-hooks (lambda ()
                    (visual-line-mode t)
                    (auto-fill-mode t))
                  '(markdown-mode-hook gfm-mode-hook))))
#+END_SRC

**** markdown-mode+

#+NAME: markdown-mode-plus-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package markdown-mode+
  :straight t)
#+END_SRC

**** markdown-toc

#+NAME: markdown-toc-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package markdown-toc
  :straight t
  :defer t)
#+END_SRC

**** markdownfmt

#+NAME: markdownfmt-config
#+BEGIN_SRC emacs-lisp :tangle no
(use-package markdownfmt
  :straight t
  :defer t
  :commands (markdown-format-buffer markdownfmt-enable-on-save)
  :bind (:map markdown-mode-map
	      ("C-c C-f" . markdown-format-buffer))
  :config
  (add-hook 'markdown-mode-hook #'markdownfmt-enable-on-save))
#+END_SRC

**** Livedown

#+NAME: md-livedown
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package livedown
    :straight (livedown
               :type git
               :host github
               :repo "shime/emacs-livedown"))
#+END_SRC

** Lsp Mode

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package lsp-mode
    :config
    (setq lsp-message-project-root-warning t)
)

(use-package lsp-ui
    :init (add-hook 'lsp-mode-hook 'lsp-ui-mode)
    :config
    (setq lsp-ui-doc-include-signature nil)  ; don't include type signature in the child frame
    (setq lsp-ui-sideline-show-symbol nil)
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))

(use-package company-lsp
    :after company
    :demand t
    :init
    (push 'company-lsp company-backends)
    :config
    (setq company-transformers nil
          company-lsp-async t
          company-lsp-cache-candidates nil))


(defun cquery//enable ()
  (condition-case nil
      (lsp-cquery-enable)
    (user-error "%s" "cquery didn't work")))

(use-package cquery
    :commands lsp-cquery-enable
    :init
    (add-hook 'c-mode-common-hook #'cquery//enable)
    :config
    (progn
      (setq cquery-executable "/usr/local/bin/cquery")
      (setq cquery-extra-init-params
            '(:index (:comments 2)
              :cacheFormat "msgpack"
              :completion (:detailedLabel t)))
      ;; Alternatively, use lsp-ui-peek interface
      ;; (lsp-ui-peek-find-custom 'base "$cquery/base")
      ;; (lsp-ui-peek-find-custom 'callers "$cquery/callers")
      (defun setup-cquery ()
        (when (fboundp 'flycheck-mode)
          (flycheck-mode +1)))

      (add-hook 'c-mode-hook #'setup-cquery)
      (add-hook 'c++-mode-hook #'setup-cquery)

      (setq cquery-sem-highlight-method 'font-lock)
      ;; alternatively, (setq cquery-sem-highlight-method 'overlay)

      ;; For rainbow semantic highlighting
      (with-eval-after-load 'lsp-ui-mode
        (lsp-ui-peek-find-custom 'base "$cquery/base")
        (lsp-ui-peek-find-custom 'callers "$cquery/callers")
        (lsp-ui-peek-find-custom 'vars "$cquery/vars"))

      (cquery-use-default-rainbow-sem-highlight)

      (with-eval-after-load 'projectile
        (setq projectile-project-root-files-top-down-recurring
              (append '("compile_commands.json"
                        ".cquery")
                      projectile-project-root-files-top-down-recurring)))))


(use-package lsp-python
    :commands lsp-python-enable
    :init
    (add-hook 'python-mode-hook #'lsp-python-enable)
    (defun python//enable-flycheck ()
      (when (fboundp 'flycheck-mode)
        (flycheck-mode +1)))
    (add-hook 'python-mode-hook 'python//enable-flycheck))


(use-package lsp-javascript-typescript
    :if (executable-find "javascript-typescript-langserver")
    :commands lsp-javascript-typescript-enable
    :init
    (add-hook 'js-mode-hook #'lsp-javascript-typescript-enable)
    (add-hook 'js2-mode-hook #'lsp-javascript-typescript-enable)
    (add-hook 'typescript-mode-hook #'lsp-javascript-typescript-enable)
    (add-hook 'rjsx-mode #'lsp-javascript-typescript-enable))


#+END_SRC

* Footnotes

[fn:1]  "Next-generation, purely functional package manager for the
Emacs hacker."

[fn:2] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/General-Variables.html#General-Variables][Emacs Manual - C.4.1 General Variables]]

[fn:3] In lisp, global variables are called /top-level defintions/. By
convention, globals are wrapped in a pair of asterisks called
/earmuffs/. Earmuffs are completely optional -- they have no effect on
how the program is compiled -- its a best practice in all of the many
dialects of Lisp.

[fn:4] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Conditionals.html][Emacs Manual - 10.2 Conditionals]]

[fn:5] [[https://www.emacswiki.org/emacs/EmacsForMacOS][Emacs Wiki - Emacs For MacOS]]

[fn:6] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][Emacs Manual - 51.1.4 Saving Customizations]]

[fn:7] [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Mastering Emacs - Keeping Secrets in Emacs GnuPG Auth Sources]]

[fn:8] [[https://www.quora.com/Is-Windows-POSIX-compliant][Quora - Is Windows POSIX compliant?]]

[fn:9] http://www.jonathanleroux.org/bibtex-mode.html

[fn:10] http://mbork.pl/2018-04-28_org-mru-clock

[fn:11] [[https://matt.hackinghistory.ca/2015/11/11/note-taking-with-pdf-tools/][Note taking with pdf-tools]]

[fn:13] [[https://github.com/d12frosted/homebrew-emacs-plus][d12frosted/homebrew-emacs-plus]]

[fn:12] [[https://www.emacswiki.org/emacs/NeoTree][Emacs Wiki - NeoTree]]

[fn:14] [[https://www.emacswiki.org/emacs/WindowResize][Emacs Wiki - Window Resize]]

[fn:15] https://joelkuiper.eu/spellcheck_emacs

[fn:16] [[http://ergoemacs.org/emacs/dictionary_lookup.html][Ergo Emacs - Dictionary Lookup]]

[fn:17] [[https://www.emacswiki.org/emacs/TabsAreEvil][Emacs Wiki - Tabs Are Evil]]

[fn:18] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html#Library-Headers][Emacs Manual - D.8 Conventional Headers for Emacs Libraries]]


