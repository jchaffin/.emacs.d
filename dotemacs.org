#+title: Dotemacs
#+language: en
#+AUTHOR: Jacob Chaffin
#+PROPERTY: :header-args :tangle yes :comments both
#+STARTUP: showeverything
#+OPTIONS: num:nil toc:2 tags:nil todo:nil H:3 tex:nil latex:nil

* Table Of Contents :TOC_3_gh:noexport:
- [[#emacs][Emacs]]
  - [[#startup][Startup]]
    - [[#depedencies][Depedencies]]
    - [[#initial-display][Initial Display]]
    - [[#initial-setup][Initial Setup]]
    - [[#rebooting][Rebooting]]
    - [[#reloading][Reloading]]
    - [[#evaluating][Evaluating]]
  - [[#utilities][Utilities]]
    - [[#macros][Macros]]
    - [[#functions][Functions]]
    - [[#buffer-utilities][Buffer utilities]]
    - [[#buffer-list-names][Buffer List Names]]
    - [[#window-utilities][Window utilities]]
    - [[#file-utilities][File utilities]]
  - [[#package-manager][Package Manager]]
  -  [[#goto-local-package-repository][Goto local package repository]]
    - [[#browse-straight-repository-at-github][Browse straight repository at GitHub]]
    - [[#straight-ivy-actions][straight ivy actions]]
  - [[#security][Security]]
    - [[#network-security][Network security]]
    - [[#encryption][Encryption]]
  - [[#keybindings][Keybindings]]
    - [[#bind-key][Bind key]]
    - [[#hydra][Hydra]]
    - [[#which-key][Which Key]]
    - [[#speed-type][Speed Type]]
  - [[#system][System]]
    - [[#exec-path-from-shell][Exec Path From Shell]]
    - [[#system-packages][System Packages]]
    - [[#anything][Anything]]
    - [[#prodigy][Prodigy]]
    - [[#macos][macOS]]
    - [[#macos-dev-utils][MacOS Dev Utils]]
  - [[#files][Files]]
    - [[#save-place-mode][save place mode]]
    - [[#backup-files][Backup Files]]
    - [[#autosave][Autosave]]
    - [[#lockfiles][Lockfiles]]
    - [[#shortcuts][Shortcuts]]
    - [[#auto-revert-mode][Auto Revert Mode]]
    - [[#bookmark][Bookmark+]]
  - [[#apps][Apps]]
    - [[#finder][Finder]]
    - [[#counsel-osx-app][Counsel OSX App]]
  - [[#text-editing][Text editing]]
    - [[#editing][Editing]]
    - [[#deleting][Deleting]]
    - [[#search][Search]]
    - [[#jump][Jump]]
    - [[#regions][Regions]]
    - [[#replace][Replace]]
    - [[#checking][Checking]]
  - [[#projects][Projects]]
    - [[#projectile][Projectile]]
    - [[#find-file-in-project][Find File in Project]]
  - [[#file-system][File System]]
    - [[#dired][Dired]]
    - [[#pack][Pack]]
    - [[#neotree][Neotree]]
    - [[#treemacs][Treemacs]]
    - [[#speedbar][Speedbar]]
    - [[#search-1][Search]]
  - [[#shell][Shell]]
    - [[#terminal-colors][Terminal Colors]]
    - [[#emacs-shell][Emacs shell]]
    - [[#m-x-shell][~M-x shell~]]
    - [[#term][Term]]
    - [[#multi-term][Multi Term]]
    - [[#shell-pop][Shell Pop]]
    - [[#with-editor][With Editor]]
    - [[#ssh][SSH]]
    - [[#scp][SCP]]
    - [[#tramp][Tramp]]
    - [[#sh-script-mode][sh-script mode]]
  - [[#documentation][Documentation]]
    - [[#help][Help]]
    - [[#elisp-refs][Elisp refs]]
    - [[#info][Info+]]
  - [[#frames][Frames]]
    - [[#frame][Frame+]]
    - [[#frame-fns][Frame fns]]
    - [[#frame-cmds][Frame cmds]]
    - [[#transpose-frame][Transpose frame]]
    - [[#posframe][Posframe]]
  - [[#window][Window]]
    - [[#winner-mode][Winner Mode]]
    - [[#shackle][Shackle]]
    - [[#poporg][Poporg]]
    - [[#ace-window][Ace Window]]
    - [[#golden-ratio][Golden Ratio]]
    - [[#purpose][Purpose]]
  - [[#faces][Faces]]
    - [[#faces-1][Faces+]]
    - [[#face-functions][Face functions]]
    - [[#face-remap][Face remap+]]
    - [[#face-explorer][Face Explorer]]
    - [[#font-lock][Font lock]]
    - [[#button-lock][Button Lock]]
  - [[#minibuffer][Minibuffer]]
    - [[#prompt-properties][Prompt Properties]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#swiper][Swiper]]
    - [[#omnibox][Omnibox]]
  - [[#completion][Completion]]
    - [[#abbrev][Abbrev]]
    - [[#prescient][Prescient]]
    - [[#company][Company]]
    - [[#autoinsert][Autoinsert]]
    - [[#yasnippet][YASnippet]]
    - [[#header2][header2]]
    - [[#skeletor][Skeletor]]
    - [[#expand-region][Expand Region]]
    - [[#code-library][Code Library]]
  - [[#images][Images]]
    - [[#artist-mode][Artist Mode]]
    - [[#uml-diagrams][UML Diagrams]]
    - [[#graphviz][Graphviz]]
    - [[#thesaurus][Thesaurus]]
    - [[#image][Image+]]
    - [[#blimp][Blimp]]
  - [[#media][Media]]
    - [[#emms][emms]]
    - [[#org-emms][org emms]]
    - [[#bongo][bongo]]
    - [[#org-player][org player]]
- [[#org][Org]]
  - [[#latex][Latex]]
    - [[#auctex][Auctex]]
    - [[#tex][Tex]]
    - [[#tex-site][TeX Site]]
    - [[#math][Math]]
    - [[#extra][Extra]]
    - [[#reftex][Reftex]]
    - [[#magic-latex-buffer][Magic Latex Buffer]]
    - [[#texinfo][Texinfo]]
    - [[#preview][Preview]]
    - [[#cdlatex][cdlatex]]
    - [[#edit-latex][Edit Latex]]
  - [[#research][Research]]
    - [[#setup][Setup]]
    - [[#citations][Citations]]
    - [[#pdfs][PDFs]]
  - [[#outlines][Outlines]]
    - [[#navi][Navi]]
    - [[#outshine][Outshine]]
    - [[#foldout][foldout]]
    - [[#org-links][Org Links]]
  - [[#org-coding][Org Coding]]
    - [[#org-babel][Org Babel]]
    - [[#library-of-babel][Library of Babel]]
    - [[#org-speed-commands][Org speed commands]]
  - [[#org-tasks][Org Tasks]]
    - [[#id][ID]]
    - [[#capture][Capture]]
    - [[#habit][Habit]]
    - [[#agenda][Agenda]]
    - [[#calendar][Calendar]]
    - [[#clock][Clock]]
    - [[#org-brain][Org Brain]]
  - [[#org-appearance][Org Appearance]]
    - [[#toggle-hooks][Toggle Hooks]]
    - [[#org-indent][Org indent]]
    - [[#per-image-display-width][Per-image display width]]
    - [[#inline-images][Inline images]]
    - [[#org-sticky-header][Org sticky header]]
    - [[#toc-org][TOC Org]]
    - [[#column-view][Column View]]
    - [[#equation-renumbering][Equation Renumbering]]
    - [[#highlight-inline-latex-fragments][Highlight inline LaTeX fragments]]
    - [[#org-ellipsis][Org Ellipsis]]
    - [[#org-outline-numbering][Org outline numbering]]
  - [[#org-prose][Org Prose]]
    - [[#insert-literal-entities][Insert literal entities]]
    - [[#org-index][Org Index]]
    - [[#org-noter][Org Noter]]
    - [[#org-journal][Org Journal]]
  - [[#org-export][Org Export]]
    - [[#ox][Ox]]
    - [[#ox-extra][Ox Extra]]
    - [[#ox-publish][Ox Publish]]
    - [[#ox-org][Ox Org]]
    - [[#ox-latex][Ox Latex]]
    - [[#ox-pandoc][Ox Pandoc]]
    - [[#ox-gfm][Ox GFM]]
    - [[#ox-hugo][Ox Hugo]]
    - [[#ox-html][Ox HTML]]
  - [[#org-hacks][Org Hacks]]
    - [[#reveal-cursor-in-folded-subtree][Reveal cursor in folded subtree.]]
    - [[#ibuffer-and-org-files][ibuffer and org files]]
  - [[#org-web][Org Web]]
    - [[#org-protocol][Org Protocol]]
    - [[#org-contacts][Org Contacts]]
  - [[#org-download][Org Download]]
    - [[#org-web-tools][Org Web Tools]]
    - [[#org-preview-html][Org preview html]]
- [[#appearance][Appearance]]
  - [[#theme][Theme]]
    - [[#custom-theme][Custom Theme]]
    - [[#themes][Themes]]
    - [[#load-theme][Load Theme]]
  - [[#org-faces][Org faces]]
  - [[#overlays][Overlays]]
    - [[#highlight][Highlight]]
    - [[#emacs-command-tooltip-mode][Emacs Command tooltip mode]]
    - [[#overlay][Overlay]]
    - [[#overlay-highlight][Overlay Highlight]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#col-highlight][Col Highlight]]
    - [[#hl-todo][Hl Todo]]
    - [[#symbol-highlighting][Symbol Highlighting]]
    - [[#highlight-indentation][Highlight Indentation]]
  - [[#pretty][Pretty]]
    - [[#pretty-mode][Pretty Mode]]
    - [[#prettify-symbols][Prettify Symbols]]
    - [[#prettify-utilities][Prettify Utilities]]
    - [[#pretty-emacs][Pretty Emacs]]
    - [[#pretty-outlines][Pretty Outlines]]
  - [[#fonts][Fonts]]
    - [[#fontutils][Fontutils]]
    - [[#dont-use-default-font-for-symbols][Don't use default font for symbols]]
    - [[#default-text-scale][Default Text Scale]]
    - [[#variable-pitch][Variable Pitch]]
    - [[#unicode][Unicode]]
  - [[#cursor][Cursor]]
    - [[#disable-blink][Disable Blink]]
    - [[#only-show-cursor-in-selected-window][Only show cursor in selected window]]
  - [[#visual][Visual]]
    - [[#visual-fill-column][Visual Fill Column]]
    - [[#fill-column-indicator][Fill Column Indicator]]
    - [[#justify-kp][Justify Kp]]
  - [[#scrolling][Scrolling]]
    - [[#scroll-to-first-error-on-compilation][Scroll to first error on compilation]]
    - [[#smooth-scrolling][Smooth Scrolling]]
    - [[#sublimity-scroll][Sublimity Scroll]]
  - [[#modeline][Modeline]]
- [[#web][Web]]
  - [[#web-libraries][Web libraries]]
    - [[#simple-httpd][Simple httpd]]
    - [[#websocket][WebSocket]]
    - [[#uuid][UUID]]
    - [[#web-server][Web Server]]
    - [[#request][Request]]
    - [[#oauth][OAuth]]
  - [[#browsing][Browsing]]
    - [[#keymap][Keymap]]
    - [[#browse-url][Browse url]]
    - [[#google-this][Google this]]
    - [[#search-web][Search Web]]
    - [[#xwidget][Xwidget]]
    - [[#set-default-browser][Set default browser]]
    - [[#engine-mode][Engine Mode]]
  - [[#email][Email]]
    - [[#org-mime][Org Mime]]
    - [[#offlineimap][Offlineimap]]
    - [[#mu][Mu]]
    - [[#google-contacts][google contacts]]
  - [[#bug-tracking][Bug Tracking]]
  - [[#browse-at-remote][Browse at remote]]
- [[#writing][Writing]]
  - [[#notetaking][Notetaking]]
    - [[#lorem-ipsum][Lorem Ipsum]]
    - [[#deft][Deft]]
    - [[#org-onenote][Org OneNote]]
    - [[#org-velocity][Org Velocity]]
    - [[#org-annotate-file][Org annotate file]]
  - [[#nov][Nov]]
  - [[#readspec--mode][Readspec  Mode]]
  - [[#writeroom][Writeroom]]
- [[#code][Code]]
  - [[#flycheck][Flycheck]]
  - [[#lsp][LSP]]
    - [[#lsp-mode][LSP mode]]
    - [[#lsp-ui][LSP UI]]
    - [[#company-lsp][company lsp]]
    - [[#dap-mode][dap mode]]
  - [[#code-style][Code Style]]
    - [[#tabs][Tabs]]
    - [[#line-numbers][Line numbers]]
    - [[#folding][Folding]]
    - [[#comments][Comments]]
    - [[#comments-1][Comments]]
    - [[#editorconfig][Editorconfig]]
    - [[#google-c-style][Google C Style]]
    - [[#formatting][Formatting]]
    - [[#agressive-indent-mode][Agressive Indent Mode]]
  - [[#eldoc][Eldoc]]
  - [[#pair-matching][Pair Matching]]
    - [[#paredit][Paredit]]
    - [[#smartparens][Smartparens]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#parinfer][Parinfer]]
  - [[#tags][Tags]]
    - [[#gtags][Gtags]]
    - [[#ctags][Ctags]]
  - [[#version-control][Version Control]]
    - [[#diffs][Diffs]]
    - [[#git][Git]]
    - [[#mercurial][Mercurial]]
  - [[#cloud][Cloud]]
    - [[#ecloud][ecloud]]
    - [[#docker][Docker]]
    - [[#aws][AWS]]
  - [[#coding-misc][Coding misc]]
    - [[#wakatime][wakatime]]
    - [[#logging][Logging]]
    - [[#floobits][floobits]]
    - [[#rmsbolt][rmsbolt]]
  - [[#languages][Languages]]
    - [[#assembly][Assembly]]
    - [[#cc][C/C++]]
    - [[#common-lisp][Common Lisp]]
    - [[#clojure][Clojure]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#groovy][Groovy]]
    - [[#java][Java]]
    - [[#javascript][JavaScript]]
    - [[#python][Python]]
    - [[#prolog][Prolog]]
    - [[#ruby][Ruby]]
    - [[#ocaml][Ocaml]]
    - [[#scala][Scala]]
    - [[#web-1][Web]]
    - [[#markdown][Markdown]]
    - [[#applescript][Applescript]]
    - [[#scheme][Scheme]]
    - [[#yaml][Yaml]]
- [[#footnotes][Footnotes]]

* Emacs
** Startup
*** Depedencies
**** Page Break Lines
:PROPERTIES:
:ID:       E0156F78-3E5A-4855-AF01-8DA86779DE0A
:END:

Global minor-mode that turns ~^L~ form feed characters into
horizontal line rules.

#+NAME: buffer/page-break-lines
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :init
  (global-page-break-lines-mode))
#+END_SRC

**** Dash

Functional bindings i.e thread =->= macro.

#+BEGIN_SRC emacs-lisp
(use-package dash
  :config
  (dash-enable-font-lock))
#+END_SRC

***** Dash functional

#+NAME: dash/functional
#+BEGIN_SRC emacs-lisp
(use-package dash-functional)
#+END_SRC

**** cl/highlight

#+NAME: cl/highlight
#+BEGIN_SRC emacs-lisp
(use-package cl-lib-highlight)
#+END_SRC

**** =f=

Declarative file and directory utilities.

#+NAME: libs/f
#+BEGIN_SRC emacs-lisp
(use-package f)
#+END_SRC

**** =s=

The string manipulation library.

#+NAME: libs/s
#+BEGIN_SRC emacs-lisp
(use-package s)
#+END_SRC

**** =a=

#+NAME: libs/a
#+BEGIN_SRC emacs-lisp
(use-package a)
#+END_SRC

**** el-patch

Use [[https://github.com/raxod502/el-patch#lazy-loading-packages][el patch]] to advice system and package lazy-loading.

#+NAME: libs/el-patch
#+BEGIN_SRC emacs-lisp
(use-package el-patch
  :init
  (require 'el-patch)
  :config
  (defun el-patch-remove-feature ()
    (interactive)
    (let ((feature (completing-read "Feature: " el-patch-pre-validate-hook))
          (patch (call-interactively #'el-patch-unpatch)))
      (remove-hook 'el-patch-pre-validate-hook (intern feature))
      (remhash patch el-patch--patches))))

#+END_SRC

**** async

#+BEGIN_SRC emacs-lisp
(use-package async
  :after dired
  :commands (dired-async-mode async-smtpmail-send-it)
  :init
  (with-eval-after-load 'async
    (require 'smtpmail-async)
    (setq message-send-mail-function 'async-smtpmail-send-it)
    (dired-async-mode 1)))
#+END_SRC

**** esup

#+BEGIN_SRC emacs-lisp
(use-package esup)
#+END_SRC

*** Initial Display
**** Initial scratch

#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil
      initial-major-mode 'emacs-lisp-mode
      inhibit-startup-echo-area-message t)
#+END_SRC

***** Dashboard

[[https://github.com/rakanalh/emacs-dashboard][Dashboard]] is a highly customizable splash screen
replacement library used in the popular [[https://github.com/syl20bnr/spacemacs][spacemacs]] framework.
It's a nice way of consolidating any combination of tasks,
agenda items, bookmarks, and pretty much any other enumerable
list that one may use in the wacky world of Emacs.

#+NAME: buffer/dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :init
  (defun dotemacs/dashboard-banner ()
      "Set a dashboard banner including information on
  package initialization time and garbage collections."
      (setq dashboard-banner-logo-title
            (format
             (concat "Emacs ready in %.2f seconds "
                       "with %d garbage collections.")
             (float-time (time-subtract
                          after-init-time
                          before-init-time))
             gcs-done)))

    (unless global-page-break-lines-mode
      (global-page-break-lines-mode))

    (dashboard-setup-startup-hook)

    :config
    (require 'org-agenda)
    (add-to-list 'dashboard-items '(agenda) t)
    ;; Get the week agenda.
    ;; See `dashboard-get-agenda' for how this
    ;; variable is being used.
    (setq show-week-agenda-p t)

    (setq dashboard-items '((agenda . 10)
                            (projects . 5)
                            (recents . 3)
                            (bookmarks . 5)))

    :hook
    (dashboard-mode . dotemacs/dashboard-banner))


#+END_SRC

**** Initial Frame
***** Hide tool bar, scroll bar, and menu bar

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(unless (eq system-type 'darwin)
  (menu-bar-mode -1))
#+END_SRC

***** Default frame properties
:PROPERTIES:
:ID:       DDFAD4AE-103D-43C9-B8DF-A55C8AD6A758
:END:

Starting in Emacs 26, the =default-frame-alist= variable can be used
create a natural title bar in the GUI. Setting the default frame
properties to the following values has the same effect as the
'--with-natural-title-bar' option provided by the Homebrew [[https://github.com/d12frosted/homebrew-emacs-plus/blob/master/Formula/emacs-plus.rb#L97-L100][formula]]
recommended for Spacemacs users on macOS[fn:1].

#+BEGIN_SRC emacs-lisp
(setq default-frame-alist
      '((ns-transparent-titlebar . t)
        (ns-appearance . dark)))
#+END_SRC

***** Title format
:PROPERTIES:
:ID:       DE7A3072-6422-4808-84B2-F27B754E1088
:END:

Show full path in the title bar.

#+NAME: frame/title
#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format "%b (%f)")
#+END_SRC

*** Initial Setup
**** User Information

These values are initialized with the ’name’ and ’email’
environment variables, respectively[fn:2].

Emacs uses these variables to fill the mail header when sending
emails in emacs, and various third-party packages rely on them
for correct behavior.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jacob Chaffin"
      user-mail-address "jchaffin@ucla.edu")
#+END_SRC

**** Garbage Collection

Consider the following from the documentation:

#+BEGIN_QUOTE
By binding this temporarily to a large number, you can effectively
prevent garbage collection during a part of the program.
#+END_QUOTE

When I first read how the default garbage collection interval in Emacs
is notoriously low, I added an arbitrary number of zeros to the
default value and called it a day. However, because I'm writing this
monolithic configuration and making a lot of mistakes in the process,
I've had to start Emacs with essentially its default settings pretty
frequently and I've noticed the lag time I occasionally experience
when searching long documents is essentially nonexistent in vanilla
Emacs. After reading this [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][blogpost]], it seems that jacking up the GC
interval may actually be the /cause/ of the lagtime rather than
contributing to the solution.

#+BEGIN_SRC emacs-lisp
(defun rev-up-gc ()
   (interactive)
  (setq gc-cons-threshold most-positive-fixnum))

(defun rev-down-gc ()
   (interactive)
  (setq gc-cons-threshold 800000))


#+END_SRC

**** Initial minibuffer
***** Modulate garbage collection

#+BEGIN_SRC emacs-lisp
(add-hook 'minibuffer-setup-hook #'rev-up-gc)
(add-hook 'minibuffer-exit-hook #'rev-down-gc)
#+END_SRC

***** ignore certain extensions and case

#+BEGIN_SRC emacs-lisp

(setq completion-ignored-extensions
      (append completion-ignored-extensions
              '("o" "~" ".lbin" ".so" ".a"
                ".git/" ".hg/" ".svn" ".svn-base")))

(setq completion-ignore-case t)
(customize-set-variable 'read-file-name-completion-ignore-case t)
(customize-set-variable 'read-buffer-completion-ignore-case t)

#+END_SRC


**** Alias Yes Or No

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

**** Fill Column
:PROPERTIES:
:ID:       7BB78F7D-BB56-4036-A244-853CAC7D761C
:END:

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

**** Use terminfo
:PROPERTIES:
:ID:       AD6F63F5-DB52-4757-89BD-0351AB465678
:END:

#+BEGIN_SRC emacs-lisp
(setq system-uses-terminfo t)
#+END_SRC

*** Rebooting
:PROPERTIES:
:ID:       FE2070D7-91D6-4594-B5E4-0711F5C0E5E6
:END:

The [[https://github.com/iqbalansari/restart-emacs][restart-emacs]] package allows quickly rebooting Emacs
from within Emacs.

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs)
#+END_SRC

*** Reloading
:PROPERTIES:
:ID:       8BED33C1-B7FF-4457-AF53-A67AAB7A14DA
:END:

#+NAME: core/reload
#+BEGIN_SRC emacs-lisp
(defun straight-reload-init ()
  "Reload init file using straight transaction system."
  (interactive)
  (straight-transaction
    (straight-mark-transaction-as-init)
    (message "Reloading initialization file...")
    (load user-init-file nil 'nomessage)
    (message "Reloading initialization file...done.")))


#+END_SRC

*** Evaluating
:PROPERTIES:
:ID:       8EFDEA98-30BB-47BC-A628-82716AD89DD7
:END:
**** Eval buffer

#+BEGIN_SRC emacs-lisp
(defun straight-eval-buffer ()
  "Evaluate current buffer using the straight transaction system."
  (interactive)
  (message "Evaluating %s..." (buffer-name))
  (straight-transaction
    (if (or (null buffer-file-name)
           (not (file-exists-p buffer-file-name)))
        (eval-buffer)
      (progn
        (when (string= buffer-file-name user-init-file)
          (straight-mark-transaction-as-init))
        (load-file buffer-file-name))))
  (message "Evaluating %s...done." (buffer-name)))

#+END_SRC

**** Eval in repl

#+BEGIN_SRC emacs-lisp
(use-package eval-in-repl)
#+END_SRC

** Utilities
*** Macros
**** ~with-major-mode~

#+NAME: macros/with-major-mode
#+BEGIN_SRC emacs-lisp
(defmacro with-major-mode (mode &rest body)
  "If the current major-mode is MODE, then execute BODY."
  (declare (indent defun))
  `(when (equal major-mode ',mode)
     ,@body))
#+END_SRC

**** ~if-major-mode~

#+NAME: macros/if-major-mode
#+BEGIN_SRC emacs-lisp
(defmacro if-major-mode (mode then-form &rest rest-forms)
  "If MODE, then execute THEN-FORM, else execute REST-FORMS."
  (declare (indent defun))
  `(progn
     (if (equal major-mode ',mode)
	       ,then-form
       ,@rest-forms)))
#+END_SRC

*** Functions
**** Mode utilities

#+NAME: utility-minor-modes
#+BEGIN_SRC emacs-lisp
(defun list-enabled-minor-modes (&optional buf)
  "The minor modes enabled in the current buffer."
  (let ((auto-save-mode nil)
        (buf (or buf (current-buffer))))
    (cl-loop for mode being the element of minor-mode-list
             when (boundp mode)
             when (symbol-value mode)
             collect mode)))


(defvar minor-modes-enabled-list (list-enabled-minor-modes (current-buffer))
  "The list of enabled minor modes")

(defun minor-mode-enabled-p (mode)
  (member mode (list-enabled-minor-modes (current-buffer))))
#+END_SRC

**** Unadvise

[[https://emacs.stackexchange.com/questions/24657/unadvise-a-function-remove-all-advice-from-it][Remove advice]].

#+NAME: utility-unadvise
#+BEGIN_SRC emacs-lisp

(defun unadvise (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))

#+END_SRC

*** Buffer utilities
**** Uniquify buffer names

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :straight (uniquify :type built-in)
  :custom
  (uniquify-buffer-name-style 'forward)
  (uniquify-separator "/")
  (uniquify-after-kill-buffer-p t)
  (uniquify-ignore-buffers-re "^\\*"))
#+END_SRC

*** Buffer List Names

#+NAME: buffer-list-names
#+BEGIN_SRC emacs-lisp

(defun buffer-list-names ()
  "Get list of buffer names."
  (let ((f (lambda (b) (buffer-name b)))
	      (buffer-alist (buffer-list)))
    (mapcar f buffer-alist)))

#+END_SRC

**** Regenerate scratch buffer

#+NAME: buf-scratch
#+BEGIN_SRC emacs-lisp

(defun scratch (&optional new)
  "Switch to scratch buffer. If optional prefix NEW,
then create a new buffer. Else reuse the existing scratch buffer,
generating a new one if the initial scratch buffer has been killed."
  (interactive "P")
  (unless (or new (not (seq-contains (buffer-list) (get-buffer "*scratch*"))))
    (with-current-buffer (generate-new-buffer "*scratch*")
      (emacs-lisp-mode)))
  (switch-to-buffer-other-window "*scratch*"))


#+END_SRC

**** Midnight mode

#+BEGIN_SRC emacs-lisp
(use-package midnight
  :custom
  (midnight-period 7200)
  :init
  (midnight-mode 1))
#+END_SRC

**** bui
:PROPERTIES:
:ID:       A2492483-216E-445A-BABB-B760FF83938E
:END:

#+BEGIN_SRC emacs-lisp
(use-package bui
  :demand t
  :hook
  (info-mode . bui-info-mode))
#+END_SRC

**** ibuffer

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :straight (ibuffer :type built-in)
  :bind ("C-x C-b" . ibuffer))
#+END_SRC

**** Crosshairs

Interactively get =point=

#+BEGIN_SRC emacs-lisp
(use-package crosshairs)
#+END_SRC

**** auto minor mode

#+BEGIN_SRC emacs-lisp
(use-package auto-minor-mode)
#+END_SRC

*** Window utilities
**** Window Count

#+NAME: win-count
#+BEGIN_SRC emacs-lisp
(defun window-count ()
  "Count number of windows in the current frame."
  (interactive)
  (length (window-list)))
#+END_SRC

**** Count Unique Windows
#+NAME: win-count-unique
#+BEGIN_SRC emacs-lisp
(defun window-count-unique ()
  "Count number of unique windows in the current frame"
  (interactive)
  (length (cl-delete-duplicates (mapcar #'window-buffer (window-list)))))
#+END_SRC

**** Window Buffer List

#+NAME: win-buf-list
#+BEGIN_SRC emacs-lisp
(defun window-buffer-list ()
  "Get list of buffers in an open window."
  (let ((windows))
    (dolist (frame (frame-list) windows)
      (with-selected-frame frame
      (setq windows (append (window-list) windows))))
        (map 'seq-uniq (lambda (w) (window-buffer w)) windows)))
#+END_SRC

#+NAME: win-buf-list-modes
#+BEGIN_SRC emacs-lisp
(defun buffer-list-modes ()
  "Restart org-mode in all org buffers in open windows."
  (let ((modes))
    (dolist (buf (window-buffer-list) modes)
      (with-current-buffer buf
        (setq modes (push major-mode modes))))
    (seq-uniq modes)))
#+END_SRC

*** File utilities
**** Unix-style =basename=

The Elisp =file-name-base= function has somewhat misleading nomenclature. The name seems to suggest that it would have the same behavior of the UNIX =basename= command, but the Emacs function actually behaves quites differently:

1. If the given file path is a directory, the Unix implementation discards the trailing slash and operates on the directory component as if it were a regular file. In Emacs, the same input will return an empty string.
2. The Emacs function removes the extension from the file - that is, the substring from the last-most '.' character to the end of the string.

As discussed in this 2011[[https://lists.gnu.org/archive/html/emacs-devel/2011-01/msg01217.html][ thread]] from the =emacs-devel= mailing list, it would be nice if Emacs also had a function that behaved similarly to the Unix command.

#+NAME: fd-basename
#+BEGIN_SRC emacs-lisp
(defun basename (pathname)
  "Return the filename or directory portion of PATHNAME"
  (if (or (file-directory-p pathname)
          (string-match "/$" pathname))
      (let ((dirname (directory-file-name pathname)))
        (file-name-nondirectory dirname))
    (file-name-nondirectory pathname)))
#+END_SRC

**** Copy File Path

#+NAME: fd-copy
#+BEGIN_SRC emacs-lisp
(defun file-path ()
  (destructuring-bind (file dir)
      (cond ((eq major-mode 'dired-mode)
             (list (substring-no-properties (thing-at-point 'symbol))
                   dired-directory))
            ((stringp buffer-file-name)
             (mapcar (lambda (f) (funcall f buffer-file-name))
                     '(file-name-nondirectory file-name-directory)))
            (t  (list (buffer-name (current-buffer)) default-directory)))
    (expand-file-name file dir)))

(defun copy-file-path-as-kill ()
  "Copies the file path and applies the result as an argument to
function FUNC. To copy the file path to the kill-ring, use the
 interactive function `copy-file-path-as-kill'."
  (interactive)
  (let ((path (file-path)))
    (kill-new path)
    (message "Copied %s" path)))

#+END_SRC

**** Remove wildcards from directory files list

#+NAME: fd-no-wildcards
#+BEGIN_SRC emacs-lisp
(defun directory-files-no-wildcards (directory &optional full nosort)
   "List directory contents without wildcards"
   (cddr (directory-files directory full nil nosort)))
#+END_SRC

**** Read File Contents

From [[http://ergoemacs.org/emacs/elisp_read_file_content.html][Ergo Emacs]]:
***** As String

#+NAME: read-file-as-string
#+BEGIN_SRC emacs-lisp
(defun read-file-contents (file)
  "Return contents of FILE."
  (with-temp-buffer
    (insert-file-contents file)
    (buffer-string)))
#+END_SRC

***** As List of Lines

#+NAME: read-file-lines
#+BEGIN_SRC emacs-lisp
(defun read-lines (file)
  "Return a list of lines in FILE."
  (with-temp-buffer
    (insert-file-contents file)
    (split-string (buffer-string) "\n" t)))
#+END_SRC

**** Resolve Path

#+NAME: core/path
#+BEGIN_SRC emacs-lisp

(defun resolve-path (&rest paths)
  "Concatenate path segments."
  (let ((paths- (mapcar #'directory-file-name paths)))
    (mapconcat 'identity paths- "/")))

#+END_SRC

**** User Directories
***** User Home

#+NAME: core/home
#+BEGIN_SRC emacs-lisp
(cl-defun user-home (&rest path-segments &key (slash nil) &allow-other-keys)
  "Resolves the absolute path formed PATH-SEGMENTS to the
   user home directory. If the optional argument SLASH is supplied,
the the returned file path will be formatted as a directory. "
  (let ((segments (seq-filter #'stringp path-segments)))
    (--> (getenv "HOME")
         (f-split it)
         (append it segments)
         (cdr it)
         (cons (concat "/" (car it)) (cdr it))
         (apply #'resolve-path it)
         (if slash (file-name-as-directory it) it))))

(user-home "hi/" :slash t)
#+END_SRC

***** Dropbox Directory

#+NAME: fd-dropbox
#+BEGIN_SRC emacs-lisp
(defalias #'dropbox-dir (apply-partially #'user-home "Dropbox"))
#+END_SRC

***** Project Directory

#+NAME: fd-projects
#+BEGIN_SRC emacs-lisp
(defalias #'projects-dir
 (apply-partially #'user-home "Developer" "Projects"))
#+END_SRC

**** Emacs Directories

#+NAME: fd-emacs
#+BEGIN_SRC emacs-lisp
(defalias #'emacs-dir (apply-partially #'user-home ".emacs.d")
  "Resolve PATH-SEGMENTS to `user-emacs-directory'.")
;; no littering directories
(defalias #'emacs-var-dir
  (apply-partially #'emacs-dir "var")
  "Resolve PATH-SEGMENTS to `no-littering-var-directory.'")
(defalias #'emacs-etc-dir
  (apply-partially #'emacs-dir "etc")
  "Resolve PATH-SEGMENTS to `no-littering-etc-directory.'")
(defalias #'emacs-local-dir
  (apply-partially #'emacs-etc-dir "local")
  "Resolve PATH-SEGMENTS to local repos directory ")
;; straight.el directories
(defalias #'straight-dir
  (apply-partially #'emacs-dir "straight")
  "Resolve PATH-SEGMENTS to straight.el installation directory.")

(defalias #'straight-repos-dir
  (apply-partially #'straight-dir "repos")
  "Resolve PATH-SEGMENTS to straight.el repos directory.")
(defalias #'straight-build-dir
  (apply-partially #'straight-dir "build")
  "Resolve PATH-SEGMENTS to straight.elj build directory")
;; org directories
(defalias #'org-dir
  (apply-partially #'dropbox-dir "org")
  "Resolve PATH-SEGMENTS to `org-directory'.")
(defalias #'agenda-dir
  (apply-partially #'org-dir "agenda")
  "Resolve PATH-SEGMENTs to directory of agenda files.")
#+END_SRC

**** Read only

See  [[https://emacs.stackexchange.com/a/38635][post on Emacs Stack Exchange]]

#+NAME: core/read-only
#+BEGIN_SRC emacs-lisp
(defvar protected-directory-list '("~/.emacs.d/straight"
                                   "/usr/local/Cellar"
                                   "~/Developer/git/CS161"
                                   "~/Developer/git/CS131"))
(add-hook 'find-file-hook
          (lambda ()
            (dolist (pattern protected-directory-list)
              (if (string-match (expand-file-name pattern) buffer-file-name)
                  (read-only-mode)))))
#+END_Src

** Package Manager
**  Goto local package repository

Function to jump to a repository installed by [[#straight][straight]]. An interactive minibuffer completion menu using ivy.

#+BEGIN_SRC emacs-lisp
(defun straight-installed-packages ()
  (--> straight--recipe-cache
       (hash-table-keys it)
       (seq-difference
        it
        (mapcar
         #'symbol-name
         straight-built-in-pseudo-packages))
       (sort it #'string-lessp)))

(defun straight-installed-p (pkg)
  (member (symbol-name pkg) (straight-installed-packages)))


(defun straight-browse-local-strategy (build-dir dir package)
  (lexical-let (pkg-directory pkg-file)
    (condition-case nil
        (if (and build-dir
                 (not (plist-get
                       (gethash package straight--recipe-cache)
                       :no-build)))
            (progn
              (setq pkg-directory (expand-file-name package dir))
              (and (file-directory-p pkg-directory)
                   (dired pkg-directory)))
          (let ((repo (plist-get
                                (gethash package straight--recipe-cache)
                                :local-repo)))
            (if repo
                (setq pkg-directory
                      (expand-file-name
                       repo
                       (replace-regexp-in-string "build" "repos" dir))
                      pkg-file
                      (car
                       (directory-files
                        pkg-directory t
                        (concat "\\README.*\\'\\|" package ".el"))))
              (setq pkg-directory
                    (file-name-directory (locate-library package))
                    pkg-file
                    (car
                     (directory-files
                      pkg-directory t
                      (concat package ".el\\(?:.gz\\)")))))
            (if pkg-file
                (and (file-exists-p pkg-file)
                     (find-file pkg-file))
              (and (file-directory-p pkg-directory)
                   (dired pkg-directory))))))))

(cl-defun straight-browse-local (&optional build-dir)
  "Go to a straight repository directory. If BUILD-DIR, then go to
  the build directory for that repository instead."
  (interactive "P")
  (lexical-let* ((dir (-> user-emacs-directory
                         (f-join "straight"
                                 (if build-dir "build" "repos"))))

                 (msg (format "(%s) Goto recipe: "
                              (upcase-initials (f-base dir))))
                 (pkg-keys (straight-installed-packages)))
    (ivy-read
     msg
     pkg-keys
     :action
     (lambda (package)
       (straight-browse-local-strategy build-dir dir package)))))

(define-key goto-map "r" #'straight-browse-local)
#+END_SRC

*** Browse straight repository at GitHub

#+BEGIN_SRC emacs-lisp
(defun straight-browse-remote (&optional package)
  "View a recipe PACKAGE on GitHub."
  (interactive "P")
  (cl-flet ((remote-url (pkg)
                        (let ((recipe (cdr (straight-recipes-retrieve pkg))))
                          (destructuring-bind (repo host)
                              `(,(plist-get recipe :repo)
                                ,(plist-get recipe :host))
                  (if (eq host 'github)
                      (concat "https://github.com/" repo)
                    (message "%s is not a GitHub repository." pkg))))))
    (let* ((pkg (if (interactive-p)
                    (completing-read
                     "Which recipe? "
                     (straight-recipes-list straight-recipe-repositories)
                     nil 'require-match)
                  package))
           (url (remote-url (intern pkg))))
      (browse-url url))))
#+END_SRC

*** straight ivy actions
:PROPERTIES:
:ID:       49F753CA-D547-42E1-91C6-4E3CB2B3A860
:END:

#+BEGIN_SRC emacs-lisp
(defun straight-browse-remote-action (pkg)
  "Ivy action to view a remote recipe in a browser."
  (with-ivy-window
    (straight-browse-remote pkg)))

(defun straight-browse-local-action (pkg)
  "ivy action to browse installed recipe. "
  (let ((repo-dir (expand-file-name "straight/repos" user-emacs-directory)))
    (straight-browse-local-strategy nil repo-dir pkg)))

(with-eval-after-load 'ivy
  (ivy-set-actions 'straight-use-package
                   '(("b" straight-browse-local-action "browse local")
                     ("B" straight-browse-remote-action "browse remote"))))
#+END_SRC

** Security
*** Network security
**** GnuTLS

As GitHub user [[https://github.com/wasamasa][wasamasa]] points out in /h?(er|is)|^\S+/ dotfiles,
[[https://gnutls.org/][GnuTLS]] throws several warnings when using the default 256 minimum
prime bits over a TLS handshake.

#+BEGIN_QUOTE
Minimum number of prime bits accepted by GnuTLS for key exchange.
During a Diffie-Hellman handshake, if the server sends a prime
number with fewer than this number of bits, the handshake is
rejected.  (The smaller the prime number, the less secure the
key exchange is against man-in-the-middle attacks.)
#+END_QUOTE


#+BEGIN_SRC emacs-lisp
(setq gnutls-min-prime-bits 4096)
#+END_SRC

*** Encryption
**** Use GPG2
***** Set GPG program to 'gpg2'.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (let* ((has-brew (not (string-empty-p
			 (shell-command-to-string
			  "which brew"))))
	 (gpg-path (if has-brew
		       (shell-command-to-string "brew --prefix gpg2")))
	 (has-gpg2 (if gpg-path
		             (file-exists-p
                  (replace-regexp-in-string "\n" "" gpg-path)))))
    (setq epg-gpg-program (if has-gpg2 "gpg2" "gpg"))))
#+END_SRC

***** Disable External Pin Entry

Switching between Emacs and an external tools is annoying.

By default, decrypting gpg files in Emacs will result in the pin entry
window being launched from the terminal session.

By disabling the agent info, we can force Emacs to handle this
internally. [fn:3]

#+BEGIN_SRC emacs-lisp
(setenv "GPG_AGENT_INFO" nil)
#+END_SRC

Or so I thought...

***** Internal Pinentry Problem and Solution

While I couldn't figure out how to get Emacs to handle gpg pinentry
internally, I was able to still find a satisfactory solution using the
~pinentry-mac~ tool.

Note that this solution requires macOS and using gpg2 for encryption.

See ticket [[https://github.com/Homebrew/homebrew-core/issues/14737][#1437]] from the [[https://github.com/Homebrew/homebrew-core][Homebrew/homebrew-core]] repository.

#+BEGIN_EXAMPLE
brew install pinentry-mac
echo "pinentry-program /usr/local/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
killall gpg-agent
#+END_EXAMPLE

**** Load Secrets

#+BEGIN_SRC emacs-lisp
(when (executable-find "gpg")
  (if (string-empty-p
       (shell-command-to-string
	      (concat "gpg --list-keys | grep " user-mail-address)))
      (print (format "GPG key(s) for %s not found"
                     (or user-full-name user-mail-address)))
    (add-to-list 'load-path (emacs-etc-dir "secrets"))
    (require 'secrets)))
#+END_SRC

** Keybindings
:PROPERTIES:
:ID:       EB6C7429-18A6-4131-8317-19918FDA2E88
:END:

*** Bind key

#+BEGIN_SRC emacs-lisp
(bind-keys :prefix-map my-prefix-map
           :prefix "M-m")
(bind-keys :prefix-map shell-command-map
           :prefix "M-m t")

(with-eval-after-load 'which-key
(which-key-add-key-based-replacements
  "M-m"  "🗝 Leader"
  "M-m t" " Shell"))
#+END_SRC

*** Hydra

#+NAME: core/hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC

**** Ivy hydra
:PROPERTIES:
:ID:       9D78F6B7-1B19-4A0F-9025-C00EC0142B1F
:END:

#+NAME: ivy/hydra
#+BEGIN_SRC emacs-lisp
(use-package ivy-hydra
  :after (hydra)
  :demand t)
#+END_SRC

**** Pretty Hydra

#+BEGIN_SRC emacs-lisp
(use-package major-mode-hydra
  :bind
  ("C-M-m" . major-mode-hydra)
  :config
  (setq major-mode-hydra-title-generator
        '(lambda (mode)
           (s-concat "\n" (s-repeat 10 " ")
                     (all-the-icons-icon-for-mode mode :v-adjust 0.05)
                     " " (symbol-name mode) " commands"))))

(use-package pretty-hydra
  :after (hydra)
  :demand t
  :init
  (eval-and-compile
    (pretty-hydra-define hydra-emacs (:hint nil :foreign-keys warn :quit-key "q")

      (
       "Evaluate" (("b" straight-eval-buffer "buffer")
                   ("r" eval-region "region")
                   ("f" eval-defun "function")
                   ("e" eval-last-sexp "last sexp"))

       "Restart" (("i" straight-reload-init "init")
                  ("q" restart-emacs "emacs")
                  ("O" org-mode-restart "org mode")
                  ("w" lsp-restart-workspace "workspace")
                  ("d" docker-restart "docker")
                  ("D" docker-machine-restart "docker machine")
                  ("u" straight-rebuild-package "package")
                  ("p" pyenv-restart-python "pyenv"))

       "Windows" (("x" ace-delete-window "delete")
                  ("m" ace-delete-other-windows "maximize")
                  ("s" ace-swap-window "swap")
                  ("a" ace-select-window "select")
                  ("o" other-window "cycle")
                  ("t" transpose-frame "transpose")))))
  :bind
  (:map my-prefix-map
        ("e" . hydra-emacs/body))
  :config
  (with-eval-after-load 'which-key
    (which-key-add-key-based-replacements
      "M-m e" "Emacs")))
#+END_SRC


*** Which Key

#+NAME: kb-which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
    :custom
    (which-key-enable-extended-define-key t)
    (which-key-allow-multiple-replacements t)
    (which-key-compute-remaps t)
    (which-key-separator " → " )
    :init
    (which-key-setup-minibuffer)
    (which-key-mode 1))
#+END_SRC

*** Speed Type

I got the blank-capped [[https://elitekeyboards.com/products.php?sub=pfu_keyboards,hhkbpro2&pid=pdkb400bn][HHKB2]] keyboard. I need all the help I can get.

#+NAME: kb-speed-type
#+BEGIN_SRC emacs-lisp
(use-package speed-type)
#+END_SRC

** System
*** Exec Path From Shell

The [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] package fixes this problem by copying
user environment variables from the shell.

The ~exec-path-from-shell~ package only works with posix-compliant
operating systems. This may or may not include Microsoft Windows[fn:4].

However, the ~exec-path-from-shell~ instructions recommends loading
the package on linux and macOS operating system. I don't use Windows
all that often anyways, so that's fine with me.

The ~:if~ key of ~use-package~ offers us a really concise way for
conditionally loading dependencies.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  ;; only load `exec-path-from-shell' package on macos and linux.
  :if (memq window-system '(mac ns))
  :config
  (progn
    (exec-path-from-shell-initialize)
    (setq exec-path-from-shell-check-startup-files nil)))
#+END_SRC

*** System Packages

Utilities for managing system packages in Emacs using an external
package manager.

#+NAME: os-sys-packages
#+BEGIN_SRC emacs-lisp

(use-package system-packages
  :init
  (with-eval-after-load 'cl-lib
    (defun system-packages/update-brew-commands (commands)
      "Update the brew commands supported in system-packages."
      (let ((brew-commands-alist
             (->> system-packages-supported-package-managers
                (assoc 'brew)
                cdr)))
        (dolist (command commands)
          (cl-destructuring-bind (cmd . cmd-string) command
            (setf (cdr (assoc cmd brew-commands-alist)) cmd-string))))))

  :config
  (with-eval-after-load 'system-packages
    (let ((commands-alist '((get-info . "brew info")
                            (verify-all-packages . "brew doctor")
                            (log . "brew log"))))
      (system-packages/update-brew-commands commands-alist))))
#+END_SRC

**** use-package-ensure-system-package

#+BEGIN_SRC emacs-lisp
(use-package use-package-ensure-system-package
  :after (system-packages)
  :demand t)
#+END_SRC

*** Anything

#+BEGIN_SRC emacs-lisp
(use-package anything
  :init
  (defun anything/goto-manual ()
    "Open up the anything PDF manual."
    (interactive)
    (find-file (straight-repos-dir "anything/doc/anything.pdf")))

  :config
  (require 'anything-config))

#+END_SRC

*** Prodigy

Interface for controlling external processes in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package prodigy)
#+END_SRC

*** macOS

I work on a macbook, so this section is where I'm loading all of my settings that rely on local file paths, macOS applications, and external programs.

**** MacOS Keys
***** Modifier Keys

macOS specific settings[fn:5].

Maps the modifier keys based on personal preferences.
Also sets terminal coding system to "utf-8".

#+NAME: macos-modifier-keys
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'super
      mac-option-modifier  'meta
      ns-control-modifier  'control
      ns-function-modifier 'hyper)
#+END_SRC

***** Some friendlier keystrokes

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (global-set-key (kbd "s-=" ) 'text-scale-increase)
  (global-set-key (kbd "s--")  'text-scale-decrease)
  ;; Default is <XF86Back> .. C-x <right>
  (global-set-key (kbd "s-[")  'previous-buffer)
  (global-set-key (kbd "s-]")  'next-buffer)
  (global-set-key (kbd "s-}")  'ns-next-frame)
  (global-set-key (kbd "s-{")  'ns-prev-frame)
  (global-set-key (kbd "s-L")  'mark-sexp))
#+END_SRC

***** Generate =mouse-2= on trackpad

As far as I know, there is no trackpad gesture to trigger the
=<mouse-2>= event in Emacs. The following snippet uses [[help:key-translation-map][key-translation-map]] to emulate the =<mouse-2>= event when clicking
the trackpad (=<mouse-1>=) like normal while holding down Command, or
"super", modifier key

#+NAME: macos-mouse-2
#+BEGIN_SRC emacs-lisp
;; From https://emacs.stackexchange.com/questions/20946/generate-mouse-2-event-from-macbook-trackpadTrackpage
(when (eq system-type 'darwin)
  (define-key key-translation-map (kbd "<s-mouse-1>") (kbd "<mouse-2>")))
#+END_SRC

*** MacOS Dev Utils

Small library for opening files and buffers in external text
editors and various other applications on macOS.

#+NAME: macos-dev-utils
#+BEGIN_SRC emacs-lisp
(use-package macos-utils
  :if (eq system-type 'darwin)
  :straight
  (macos-dev-utils :host github
                   :type git
                   :repo "jchaffin/macos-dev-utils"
                   :files (:defaults "macos-utils.el"))
  :bind-keymap
  ("M-m o" . macos-open-with-command-map)
  :config
  (which-key-add-key-based-replacements
    "M-m o" " Open With"
    "M-m o o" " Default"
    "M-m o s" " ST3"
    "M-m o a" " Atom"
    "M-m o v" " VSCode "
    "M-m o b" " BBEdit"
    "M-m o p" " PDFPen"
    "M-m o c" " Coda"
    "M-m o t" " iTerm"
    "M-m o t" " GitTower"))
#+END_SRC

**** Reveal in macOS Finder

#+NAME: macos-finder-config
#+BEGIN_SRC emacs-lisp
(use-package reveal-in-osx-finder
  :if (eq system-type 'darwin)
  :commands (reveal-in-osx-finder))
#+END_SRC

**** OSX Dictionary

Provides an interface to /Dictionary.app/ in Emacs. I am using this package in conjunction with [[#dictionary-el][dictionary.el]] right now. The latter package uses an open-source dictionary server to access dictionaries. I haven't tested it on a different OS yet, but it should provide comparable functionality to [[https://github.com/xuchunyang/osx-dictionary.el][osx-dictionary.el]] on machines not running macOS.

#+NAME: macos-dictionary
#+BEGIN_SRC emacs-lisp
(use-package osx-dictionary
  :if (eq system-type 'darwin)
  :defines (osx-dictionary-open-dictionary-app-at-point)
  :commands (osx-dictionbary-search-word-at-point
             osx-dictionary-search-input)
  :init
  (defun macos-dictionary-at-point ()
    "Open thing at point in Dictionary.app"
    (interactive)
    (shell-command (format "open dict://%s" (thing-at-point 'word)))))

#+END_SRC

**** OSX Trash

#+NAME: macos-trash
#+BEGIN_SRC emacs-lisp
(use-package osx-trash
  :if (and (eq system-type 'darwin) (not (boundp 'mac-system-move-file-to-trash-use-finder)))
  :init
  (osx-trash-setup)
  :custom
  (delete-by-moving-to-trash t))
#+END_SRC

**** OSX Clipboard

***** In Terminal

#+NAME: macos-pbcopy
#+BEGIN_SRC emacs-lisp
(use-package pbcopy
  :if (and (eq system-type 'darwin) (not (display-graphic-p)))
  :init (turn-on-pbcopy))
#+END_SRC

***** Separate Emacs clipboard from system

#+NAME: macos-simpleclip
#+BEGIN_SRC emacs-lisp
(use-package simpleclip)
#+END_SRC

**** OSX Lib

#+BEGIN_SRC emacs-lisp
(use-package osx-lib)
#+END_SRC

**** UTF-8 Encoding
:PROPERTIES:
:ID:       462A8F27-D713-45EA-9CED-BF716C14EF1D
:END:

UTF-8 is the recommanded coding system on macOS.

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")

(when (eq system-type 'darwin)
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))


(global-set-key (kbd "C-x C-m i") 'set-input-method)

#+END_SRC

** Files
:PROPERTIES:
:ID:       9DAB0C2D-D6AA-4143-9C7C-7CD306E21893
:END:

*** save place mode

- makuto's [[https://github.com/makuto/editorPreferences/blob/master/Emacs/emacsConfig.txt][emacsConfig.txt]]
- Xah Lee [[http://ergoemacs.org/emacs/emacs_make_modern.html][emacs make modern]]

#+BEGIN_SRC emacs-lisp
(save-place-mode 1)
#+END_SRC

*** Custom File :noexport:

By default, Emacs customizations[fn:6] done through the =customize=
interface write to =user-init-file=.

While I usually prefer configuring emacs programmatically, settings
that depend on resources outside of this repository, such as
org-agenda files, will impact portability and potentially break on
other machines.

#+BEGIN_SRC emacs-lisp
(let ((directory (emacs-etc-dir "custom"))
      (file (pcase system-type
              (`darwin "custom-macos.el")
              (`gnu/linux "custom-linux.el")
              (`windows "custom-windows.el"))))
  (setq custom-file (expand-file-name file directory))
  ;; Create custom file if it does not exist.
  (unless (file-exists-p custom-file)
    (with-temp-buffer
      (write-file custom-file))
    (load custom-file)))

(defun goto-custom ()
    (interactive)
    (find-file custom-file))

(define-key goto-map "C" #'goto-custom)
#+END_SRC

*** Backup Files

This might come back to bite me one day but I never use them.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

*** Autosave

#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil
 auto-save-no-message t)
#+END_SRC

*** Lockfiles

Causes a conflict with ~lsp-mode~.

#+NAME: lockfiles-spec
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

*** Shortcuts

#+BEGIN_SRC emacs-lisp

(defun goto-init ()
  "Open the emacs init file.
If multiple configurations are detected, this value is determined by the
value of `user-emacs-directory', else go to the`user-init-file'."
  (interactive)
  (find-file user-init-file))

(defun goto-literate ()
  "Open the literate Emacs config file."
  (interactive)
  (find-file dotemacs-literate-config-file))

(defun goto-tangled-init ()
  "Go to the tangled elisp file."
  (interactive)
  (let ((base (file-name-sans-extension dotemacs-literate-config-file)))
    (find-file (concat base ".el"))))

(bind-keys :map goto-map
           ("i" . goto-init)
           ("l" . goto-literate)
           ("t" . goto-tangled-init))
#+END_SRC

*** Auto Revert Mode
:PROPERTIES:
:ID:       0082E12B-58E5-48B9-8E5A-132EE31F99B3
:END:

#+NAME: buffer/revert
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :straight (autorevert :type built-in)
  :init
  (global-auto-revert-mode t))
#+END_SRC

*** Bookmark+
#+BEGIN_SRC emacs-lisp
(use-package bookmark+)
#+END_SRC

** Apps

*** Finder

#+BEGIN_SRC emacs-lisp
;;;###autoload
(defun explorer (&optional path)
  "Open Finder or Windows Explorer in the current directory."
  (interactive (list (if (buffer-file-name)
			 (file-name-directory (buffer-file-name))
		       (expand-file-name  "~/"))))
  (cond
   ((string= system-type "gnu/linux")
    (shell-command "nautilus"))
   ((string= system-type "darwin")
    (shell-command (format "open -b com.apple.finder%s"
			   (if path (format " \"%s\""
					    (file-name-directory
					     (expand-file-name path))) ""))))
   ((string= system-type "windows-nt")
    (shell-command (format "explorer %s"
			   (replace-regexp-in-string
			    "/" "\\\\"
			    path))))))

(defalias 'finder 'explorer "Alias for `explorer'.")


(defun bash (&optional path)
  "Open a bash window.
PATH is optional, and defaults to the current directory."
  (interactive (list (if (buffer-file-name)
			 (file-name-directory (buffer-file-name))
		       (expand-file-name default-directory))))
  (cond
   ((string= system-type "gnu/linux")
    (shell-command "gnome-terminal"))
   ((string= system-type "darwin")
    (shell-command
     (format "open -b com.apple.terminal%s"
	     (if path (format " \"%s\"" path) ""))))
   ((string= system-type "windows-nt")
    (shell-command "start \"\" \"%SYSTEMDRIVE%\\Program Files\\Git\\bin\\bash.exe\" --login &"))))


(defun excel ()
  "Open Microsoft Excel."
  (interactive)
  (cond
   ((string= system-type "gnu/linux")
    (error "Excel is not on Linux."))
   ((string= system-type "darwin")
    (shell-command
     (shell-command "open -b com.microsoft.Excel")))
   ((string= system-type "windows-nt")
    (shell-command "start excel"))))


(defun word ()
  "Open Microsoft Word."
  (interactive)
  (cond
   ((string= system-type "gnu/linux")
    (error "Word is not on Linux."))
   ((string= system-type "darwin")
    (shell-command
     (shell-command "open -b com.microsoft.Word")))
   ((string= system-type "windows-nt")
    (shell-command "start winword"))))


(defun powerpoint ()
  "Open Microsoft Powerpoint."
  (interactive)
  (cond
   ((string= system-type "gnu/linux")
    (error "Powerpoint is not on Linux."))
   ((string= system-type "darwin")
    (shell-command
     (shell-command "open -b com.microsoft.Powerpoint")))
   ((string= system-type "windows-nt")
    (shell-command "start powerpnt"))))


(defun google ()
  "Open default browser to google.com."
  (interactive)
  (browse-url "http://google.com"))
#+END_SRC

*** Counsel OSX App

#+NAME: macos-counsel-osx-app
#+BEGIN_SRC emacs-lisp
(use-package counsel-osx-app
  :if (eq system-type 'darwin)
  :after (:all all-the-icons counsel)
  :preface
  (defun wk-osx-app-icon ()
    `(,(concat
        (propertize " " 'display '(raise -0.20)) "Apps")))
  :custom
  (counsel-osx-app-location '("/Applications" "/Applications/Setapp"))
  :after (ivy)
  :commands
  (counsel-osx-app))

#+END_SRC

** Text editing
:PROPERTIES:
:ID:       11FDD2DB-E7F5-4EB9-AD41-9B5DFAC004E0
:END:
*** Editing
**** Multiple Cursors

#+NAME: cursor/mc
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :custom
  (mc/always-run-for-all t)
  :init
  (global-unset-key (kbd "M-<down-mouse-1>"))
  :bind
  (("C-c C-s-." . mc/edit-lines)
   ("C->" . mc/mark-next-like-this)
   ("C-M->" . mc/mark-next-lines)
   ("C-c C->" . mc/mark-all-like-this)
   ("M-<mouse-1>" . mc/add-cursor-on-click))
  :config
  (when (eq system-type 'darwin)
    (global-set-key (kbd "s-d")  'mc/mark-next-like-this)
    (global-set-key (kbd "s-D")  'mc/mark-all-dwin)
    (global-set-key (kbd "M-s-d" 'mc/edit-beginnings-of-lines))))
#+END_SRC

**** better beginning of line
From Bozhidar Batsov, the author or prelude.

#+BEGIN_SRC emacs-lisp

(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.
Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.
If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)
(global-set-key (kbd "s-<left>") 'smarter-move-beginning-of-line)

#+END_SRC

**** Cleanup Whitespace

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq require-final-newline t)
#+END_SRC

**** End sentences at single space.

#+BEGIN_SRC emacs-lisp
(setq-default sentence-end-double-space nil)

  #+END_SRC

**** Fix word
:PROPERTIES:
:ID:       ADAC2F3D-0C61-4700-B25B-894F5C32379A
:END:

#+BEGIN_SRC emacs-lisp
(use-package fix-word
  :commands (fix-word-upcase fix-word-capitalize fix-word-downcase)
  :demand t
  :bind
  (("M-u" . fix-word-upcase)
   ("M-l" . fix-word-downcase)
   ("M-c" . fix-word-capitalize)))
#+END_SRC

*** Deleting
**** Delete Selection Mode

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

**** smart hungry delete

#+BEGIN_SRC emacs-lisp
(use-package smart-hungry-delete
  :init
  (smart-hungry-delete-add-default-hooks))
#+END_SRC

*** Search
**** ack

#+NAME: search/ack
#+BEGIN_SRC emacs-lisp
(use-package ack
  :if (executable-find "ack")
  )
#+END_SRC

**** grep+

#+BEGIN_SRC emacs-lisp
(use-package grep+)
#+END_SRC

**** ag

#+NAME: ag-config
#+BEGIN_SRC emacs-lisp
(use-package ag)
#+END_SRC

**** wgrep ag

#+BEGIN_SRC emacs-lisp
(use-package wgrep-ag)
#+END_SRC

**** ripgrep

#+NAME: ripgrep
#+BEGIN_SRC emacs-lisp
(use-package rg
  :ensure-system-package
  (rg . ripgrep))

#+END_SRC

***** projectile ripgrep

#+NAME: project-ripgrep
#+BEGIN_SRC emacs-lisp

  (use-package projectile-ripgrep
      :after (projectile)
      ;; takes a cons in the form of `(binary . package-name)`
      :ensure-system-package (rg . ripgrep))

#+END_SRC

**** Codesearch

#+BEGIN_SRC emacs-lisp
(use-package codesearch)
#+END_SRC

***** Counsel code search
#+BEGIN_SRC emacs-lisp
(use-package counsel-codesearch
    :requires codesearch)
#+END_SRC

***** Projectile code search

#+NAME: project-code-search
#+BEGIN_SRC emacs-lisp
(use-package projectile-codesearch)
#+END_SRC

*** Jump
**** dumb jump

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump)
#+END_SRC

**** smart jump

#+BEGIN_SRC emacs-lisp
(use-package smart-jump)
#+END_SRC

*** Regions
**** Whole line or region

#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region)
#+END_SRC

**** Wrap region

#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :init
  (require 'wrap-region)
  (wrap-region-add-wrappers
   '(("*" "*" nil org-mode)
     ("~" "~" nil org-mode)
     ("/" "/" nil org-mode)
     ("=" "=" nil org-mode)
     ("+" "+" nil org-mode)
     ("_" "_" nil org-mode)
     ("$" "$" nil (org-mode latex-mode))
     ("⟦" "⟧" "|" (org-mode latex-mode))
     ("⟨" "⟩" "<" (org-mode latex-mode))))
  (wrap-region-global-mode t))
#+END_SRC

**** Expand Region

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  ("s-'" .  er/expand-region)
  ("s-S-'" . er/contract-region))
#+END_SRC

*** Replace
**** Visual regexp

#+BEGIN_SRC emacs-lisp
(use-package visual-regexp
  :bind
  ("C-c v r" . vr/replace)
  ("C-c v q" . vr/query-replace)
  ("C-c v m" . vr/mc-mark))


(use-package visual-regexp-steroids
  :after visual-regexp
  :demand t)
#+END_SRC

**** Replace from region

#+BEGIN_SRC emacs-lisp
(use-package replace-from-region)
#+END_SRC

*** Checking
**** Flyspell

#+NAME: flyspell-base
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :init
    (with-eval-after-load 'org
      (add-hook 'org-mode-hook 'flyspell-mode))
    :config
    (progn
      (when (executable-find "hunspell")
        (setq-default ispell-program-name "hunspell")
        (setq-default ispell-dictionary "en_US")
        (setq ispell-really-hunspell t))))
#+END_SRC

***** Flyspell Correct

#+NAME: flyspell-correct-config
#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct-ivy
    :after (:all flyspell ivy)
    :demand t
    :config
    (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-previous-word-generic))
#+END_SRC

**** Langtool

LanguageTool is a Java plugin which provides style and grammar
checking for natural language.

#+NAME: sc-langtool
#+BEGIN_SRC emacs-lisp
(use-package langtool
  :if (eq system-type 'darwin)
  :after (flyspell)
  :demand t
  :custom
  (langtool-language-tool-jar
   "/usr/local/opt/languagetool/libexec/languagetool-commandline.jar")
  (langtool-mother-tongue "en")
  (langtool-disabled-rules '("DASH_RULE"))
  :init
  (defun langtool-autoshow-detail-popup (overlays)
    (when (require 'popup nil t)
      ;; Do not interrupt current popup
      (unless (or popup-instances
                 ;; suppress popup after type `C-g` .
                 (memq last-command '(keyboard-quit)))
        (let ((msg (langtool-details-error-message overlays)))
          (popup-tip msg)))))
  :config
  (setq langtool-autoshow-message-function 'langtool-autoshow-detail-popup))
#+END_SRC

**** Academic Phrases

#+NAME: sc-academic
#+BEGIN_SRC emacs-lisp
(use-package academic-phrases)
#+END_SRC

**** Proselint

#+NAME: sc-proselint
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'flycheck
    (flycheck-define-checker proselint
                             "A linter for prose."
                             :command ("proselint" source-inplace)
                             :error-patterns
                             ((warning line-start (file-name) ":" line ":" column ": "
                                       (id (one-or-more (not (any " "))))
                                       (message) line-end))
                             :modes (text-mode org-mode markdown-mode gfm-mode))
    (add-to-list 'flycheck-checkers 'proselint))

#+END_SRC

**** Dictionary.el
:PROPERTIES:
:ID:       98EF59F6-66E8-47B3-A437-B1D53A74832A
:CUSTOM_ID: dictionary-el
:END:

The [[https://github.com/myrkr/dictionary-el][dictionary.el]] package provides an Emacs client which uses an open source
dictionary server to lookup words. What it lacks in bells and
whistles, it makes up for in compatibility and hackability [fn:7].

#+NAME: completion/dictionary-el
#+BEGIN_SRC emacs-lisp
(use-package dictionary
  :commands (dictionary-lookup-definition))
#+END_SRC

**** Typo Mode
:PROPERTIES:
:ID:       7F09312B-CA58-4884-896C-DDC323FB3B83
:END:
#+NAME: writing-typo
#+BEGIN_SRC emacs-lisp
 (use-package typo)
#+END_SRC

**** Writegood
:PROPERTIES:
:ID:       10DB611C-6B5A-4441-8FAB-E6996B14D19C
:END:

#+BEGIN_SRC emacs-lisp
 (use-package writegood-mode)
#+END_SRC

** Projects
*** Projectile

#+NAME: project-projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :custom
  (projectile-completion-system 'ivy)
  (projectile-switch-project-action #'projectile-dired)
  (projectile-find-dir-includes-top-level t)
  (projectile-enable-caching t)
  :init
  (el-patch-feature projectile)

  (el-patch-defun projectile-run-compilation (cmd)
    "Run external or Elisp compilation command CMD."
    (if (functionp cmd)
        (funcall cmd)
      (compile cmd (el-patch-add t))))

  (defvar dotemacs/ignored-project-directories
    '("~/.emacs.d/straight"))

  (defun projectile-ignore-projects-in-directory (project-root)
    "Ignore directories in `dotemacs/ignored-project-directories'."
    (cl-flet ((ignored-dir-or-subdir-p
               (path)
               (f-descendant-of?
                (f-expand project-root)
                path)))
      (->> dotemacs/ignored-project-directories
         (seq-filter #'ignored-dir-or-subdir-p)
         seq-empty-p not)))

  (setq projectile-ignored-project-function
        #'projectile-ignore-projects-in-directory)

  :config
  (when (featurep 'which-key)
    (which-key-add-key-based-replacements "C-c p" " Projectile")

    (push '((nil . "projectile-\\(.+\\)") . (nil . "\\1"))
          which-key-replacement-alist))

  (setq projectile-globally-ignored-directories
       (append projectile-globally-ignored-directories
                '("gradle" "target" ".meghanada"
                  ".gradle" "build" "bin" "node_modules"
                  "ltximg" "CMakeFiles" ".cquery_cached_index"))))

#+END_SRC

**** Projectile Codesearch

#+NAME: project-codesearch
#+BEGIN_SRC emacs-lisp
  (use-package projectile-codesearch
      :after (projectile)
      :bind (:map projectile-command-map
                  ("s c" . projectile-codesearch-search)))
#+END_SRC

**** Projectile Ripgrep

#+NAME: project-ripgrep
#+BEGIN_SRC emacs-lisp

  (use-package projectile-ripgrep
      :after (projectile)
      ;; takes a cons in the form of `(binary . package-name)`
      :ensure-system-package (rg . ripgrep))

#+END_SRC

**** Projectile Treemacs

#+NAME: projectile/treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs-projectile
  :after (treemacs)
  :demand t)
#+END_SRC

*** Find File in Project

#+NAME: project-ffip
#+BEGIN_SRC emacs-lisp
(use-package find-file-in-project
  :bind ("s-p" . ffip)
  :custom
  (ffip-use-rust-fd t)
  (add-to-list 'ffip-prune-patterns "*/straight"))
#+END_SRC

** File System
*** Dired

#+BEGIN_SRC emacs-lisp
(use-package dired
  :demand t
  :straight (dired :type built-in)
  :custom
  ;; When split frames with two dired buffers,
  ;; use other buffer as the current directory.
  (dired-dwim-target t)
  :config
  (when (symbolp 'org-file-apps)
    (add-to-list 'org-file-apps '(directory . emacs))))
#+END_SRC

**** Dired+

Adds extensions and functionality to dired mode.

#+NAME: dired-plus-config
#+BEGIN_SRC emacs-lisp
(use-package dired+
  :demand t
  :init
  ;; from [[https://jblevins.org/log/dired-open][Integrating OS X and Emacs Dired]]:
  (defun dired-do-open-with (&optional arg)
    "Open the marked (or next ARG) files."
    (interactive "P")
    (cl-flet ((dired-open-with (file)
                               (start-process "default app" nil "open" file)))
      (let ((file-list (dired-get-marked-files t arg nil nil t)))
        (mapcar #'dired-open-with file-list))))

  (defun dired/reuse-buffer ()
    "Reuse the existing dired buffer when moving to the
parent directory."
	  (interactive)
    (find-alternate-file ".."))

  :bind (:map dired-mode-map
              ;; When moving to parent directory by `^´, Dired by default
              ;; creates a new buffer for each movement up. This rebinds
              ;; `^´ to use the same buffer.
              ("^" . dired/reuse-buffer)
              ("z" . dired-do-open-with))

  :hook
  (dired-mode . dired-hide-details-mode))
#+END_SRC

**** Dired Sidebar
:PROPERTIES:
:ID:       2ABE4F83-BA00-441E-8F77-857B455834AC
:END:

#+NAME: dired-sidebar-config
#+BEGIN_SRC emacs-lisp
 (use-package dired-sidebar
     :commands (dired-sidebar-toggle-sidebar)
     :custom
     (dired-sidebar-should-follow-file nil)
     (dired-sidebar-theme 'none)
     :bind
     ("C-c d" . dired-sidebar-toggle-sidebar)
     :hook
     (dired-sidebar-mode . dired-sidebar-refresh-buffer))
#+END_SRC

**** Dired toggle sudo

#+BEGIN_SRC emacs-lisp
(use-package dired-toggle-sudo)
#+END_SRC

**** Find Dired

#+BEGIN_SRC emacs-lisp
(use-package find-dired
  :demand t
  :init (setq find-ls-option '("-print0 | xargs -0 ls -od" . "-od")))
#+END_SRC

**** Peep dired

#+BEGIN_SRC emacs-lisp
(use-package peep-dired
  :after dired
  :bind (:map dired-mode-map
              ("P" . peep-dired)))

#+END_SRC

**** Image dired

#+BEGIN_SRC emacs-lisp
(use-package image-dired)

(use-package image-dired+
  :after image-dired)

#+END_SRC

*** Pack

#+BEGIN_SRC emacs-lisp
(use-package pack
    :bind
  (:map dired-mode-map
        ("P" .  pack-dired-dwim)))
#+END_SRC

*** Neotree

[[https://github.com/jaypei/emacs-neotree][Neotree]][fn:8] is a [[https://github.com/scrooloose/nerdtree][Nerdtree]]-like file explorer for managing projects in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :after (projectile)
  :demand t
  :commands (neotree-project-dir)
  :bind
  (([f8] . neotree-project-dir))
  :custom
  (neo-theme (if (display-graphic-p) 'icons 'arrow))
  (neo-smart-open t)
  :config
  (progn
    ;; @source https://www.emacswiki.org/emacs/NeoTree
    (defun neotree-project-dir ()
      "Open NeoTree using the git root"
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                 (progn
                   (neotree-dir project-dir)
                   (neotree-find file-name)))
          (message "Project root not found."))))))
#+END_SRC

*** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :custom
    (treemacs-python-executable (or (executable-find "python3") (executable-find "python")))
    (treemacs-collapse-dirs
     (if (executable-find "python3") 3 0))
    (treemacs-deferred-git-apply-delay   0.5)
    (treemacs-display-in-side-window     t)
    (treemacs-file-event-delay           5000)
    (treemacs-file-follow-delay          0.2)
    (treemacs-follow-after-init          t)
    (treemacs-follow-recenter-distance   0.1)
    (treemacs-goto-tag-strategy          'refetch-index)
    (treemacs-indentation                2)
    (treemacs-indentation-string         " ")
    (treemacs-is-never-other-window      nil)
    (treemacs-max-git-entries            5000)
    (treemacs-no-png-images              nil)
    (treemacs-project-follow-cleanup     nil)
    (treemacs-persist-file
     (no-littering-expand-var-file-name "treemacs-persist"))
    (treemacs-recenter-after-file-follow nil)
    (treemacs-recenter-after-tag-follow  nil)
    (treemacs-show-cursor                nil)
    (treemacs-show-hidden-files          t)
    (treemacs-silent-filewatch           nil)
    (treemacs-silent-refresh             nil)
    (treemacs-sorting                    'alphabetic-desc)
    (treemacs-space-between-root-nodes   t)
    (treemacs-tag-follow-cleanup         t)
    (treemacs-tag-follow-delay           1.5)
    (treemacs-width                      35)
    :config
    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'extended))
      (`(t . _)
       (treemacs-git-mode 'simple)))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
#+END_SRC

*** Speedbar

**** same frame
#+NAME: speed-sr
#+BEGIN_SRC emacs-lisp
(use-package sr-speedbar)
#+END_SRC

**** Projectile Speedbar
#+NAME: projectile-speedbar
#+BEGIN_SRC emacs-lisp
(use-package projectile-speedbar
  :after (:all speedbar projectile)
  :bind ("M-<f2>" . projectile-speedbar-open-current-buffer-in-tree))
#+END_SRC

*** Search
**** Codesearch

#+BEGIN_SRC emacs-lisp
(use-package codesearch)
#+END_SRC

**** Avy

Jump to arbitrary point in Buffer

#+NAME: search/avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :demand t
    :bind
    ("C-:" . avy-goto-char))
#+END_SRC

**** ack

#+NAME: search/ack
#+BEGIN_SRC emacs-lisp
(use-package ack
  :ensure-system-package (ack . ack))
#+END_SRC

**** ag

#+NAME: ag-config
#+BEGIN_SRC emacs-lisp
(use-package ag)
#+END_SRC

**** grep+

#+BEGIN_SRC emacs-lisp
(use-package grep+)

#+END_SRC

**** rg

#+NAME: ripgrep
#+BEGIN_SRC emacs-lisp
(use-package rg
  :ensure-system-package
  (rg . ripgrep))

#+END_SRC

**** Undo Tree

Visualize buffer modifications during an Emacs session as an
interactive tree .

#+NAME: search/undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :custom
  (undo-tree-auto-save-history t)
  (undo-tree-visualizer-timestamps t)
  (undo-tree-visualizer-diff t)
  :init
  (global-undo-tree-mode)
  :config
  (when (eq system-type 'darwin)
    (global-set-key (kbd "s-z") 'undo-tree-undo)
    (global-set-key (kbd "s-Z") 'undo-tree-redo)))
#+END_SRC

** Shell
:PROPERTIES:
:ID:       055F15AE-FAFA-416A-ABC5-8DBB9D9D7CBF
:END:
*** Terminal Colors
**** Ansi Color

#+NAME: sh/ansi
#+BEGIN_SRC emacs-lisp
(use-package ansi-color
  :custom
  (ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
  :init
  (defun colorize-compilation-buffer ()
    "Escape ANSI color sequence in the compilation buffer."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))

  (defun display-ansi-colors ()
    "Display ANSI color sequences in the current buffer."
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max)))

  ;; :config
  ;; (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
  ;; (add-hook 'comint-output-filter-functions 'ansi-color-process-output)
  )
#+END_SRC

**** xterm color

#+NAME: sh/xtcolor
#+BEGIN_SRC emacs-lisp

 (use-package xterm-color
     :init
     ;; Comint and Shell
     (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
     (setq comint-output-filter-functions
           (remove 'ansi-color-process-output comint-output-filter-functions))

     (defun esh/xterm-color ()
       "Initialize xterm coloring for eshell."
    (with-eval-after-load 'eshell
      (setq-local xterm-color-preserve-properties t)
      (make-local-variable 'eshell-preoutput-filter-functions)
      (add-hook 'eshell-preoutput-filter-functions 'xterm-color-filter)
      (setq-local eshell-output-filter-functions
                  (remove 'eshell-handle-ansi-color
                          eshell-output-filter-functions))))

     :hook
     (eshell-mode . esh/xterm-color))

#+END_SRC

*** Emacs shell
**** eshell

#+NAME: esh/eshell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :custom
  (pcomplete-cycle-completions nil)
  (eshell-cmpl-cycle-completions nil)
  (eshell-buffer-maximum-lines 20000)
  (eshell-history-size 350)
  (eshell-hist-ignoredups t)
  (eshell-buffer-shorthand t)
  (eshell-highlight-prompt t)
  (eshell-plain-echo-behavior t)

  :init
  (defvar company-default-idle-delay nil)


  (defun esh/protect-prompt ()
    "Protect Eshell prompt like the prompt in `comint-mode'."
      (let ((inhibit-field-text-motion t))
        (add-text-properties
         (point-at-bol)
         (point)
         '(rear-nonsticky t
           inhibit-line-move-field-capture t
           field output
           read-only t
           front-sticky (field inhibit-line-move-field-capture)))))

  (defun esh/toggle-shell-completion-based-on-path ()
    "Deactivates automatic completion on remote paths. "
    (when (featurep 'company)
      (unless (numberp company-default-idle-delay)
        (setq company-default-idle-delay company-idle-delay))

      (if (file-remote-p default-directory)
          (setq-local company-idle-delay nil)
        (setq-local company-idle-delay company-default-idle-delay))))

  (defun esh/company ()
    "Change the company frontend to be compatible with short eshell
windows. Additionally, modify company backends in the local buffer."
    (when (featurep 'company)
      (setq-local company-frontends '(company-preview-frontend))
      (set (make-local-variable 'company-backends)
           (append '(company-capf) company-backends))))


  (defun esh/disable-semantic ()
    (when (featurep 'semantic)
      (semantic-mode -1)))

  :hook
  (eshell-mode . esh/company)
  (eshell-mode . esh/disable-semantic)
  (eshell-directory-change . esh/toggle-shell-completion-based-on-path))
#+END_SRC

**** eshell bookmark

#+NAME: esh/bmk
#+BEGIN_SRC emacs-lisp
(use-package eshell-bookmark
  :hook
  (eshell-mode . eshell-bookmark-setup))
#+END_SRC

**** eshell-z

#+NAME: esh/z
#+BEGIN_SRC emacs-lisp
(use-package eshell-z)
#+END_SRC

*** ~M-x shell~

#+NAME: sh/shell
#+BEGIN_SRC emacs-lisp
(use-package shell
  :init

  (defun string-trim-final-newline (string)
    (let ((len (length string)))
      (cond
       ((and (> len 0) (eql (aref string (- len 1)) ?\n))
        (substring string 0 (- len 1)))
       (t string))))


  (defun shell-command-to-string-trim-final-newline
      (orig-fun &rest args)
    (let ((res (apply orig-fun args)))
      (string-trim-final-newline res)))

  (advice-add 'shell-command-to-string
              :around #'shell-command-to-string-trim-final-newline)


  (defun inferior-shell (&optional ARG)
    "Wrapper to open shell in current window"
    (interactive)
    (switch-to-buffer "*shell*")
    (shell "*shell*"))

  (defun shell/comint-input-sender-hook ()
    "Check certain shell commands.
  Executes the appropriate behavior for certain commands."
    (setq comint-input-sender
          (lambda (proc command)
            (cond
             ;; Check for clear command and execute it.
             ((string-match "^[ \t]*clear[ \t]*$" command)
              (comint-send-string proc "\n")
              (let ((inhibit-read-only  t))
                (erase-buffer)))
             ;; Check for man command and execute it.
             ((string-match "^[ \t]*man[ \t]*" command)
              (comint-send-string proc "\n")
              (setq command (replace-regexp-in-string
                             "^[ \t]*man[ \t]*" "" command))
              (setq command (replace-regexp-in-string
                             "[ \t]+$" "" command))
              (funcall 'man command))
             ;; Send other commands to the default handler.
             (t (comint-simple-send proc command))))))

  (defun shell/disable-hl-line-mode ()
    "Locally disable `global-hl-line-mode'."
    (setq-local global-hl-line-mode nil))

  :hook
  (shell-mode . shell/comint-input-sender-hook)
  (shell-mode . shell/disable-hl-line-mode))
#+END_SRC

*** Term

#+NAME: sh/term
#+BEGIN_SRC emacs-lisp
(use-package term
  :custom
  (ansi-term-color-vector
   [term
    term-color-black
    term-color-red
    term-color-green
    term-color-yellow
    term-color-blue
    term-color-magenta
    term-color-cyan
    term-color-white])
  :init
  (defun term-send-tab ()
    "Send tab in term mode."
    (interactive)
    (term-send-raw-string "\t"))

  (defun ansi-term-handle-close ()
    "Close current term buffer when `exit' from term buffer."
    (when (ignore-errors (get-buffer-process (current-buffer)))
      (set-process-sentinel
       (get-buffer-process (current-buffer))
       (lambda (proc change)
         (when (string-match "\\(finished\\|exited\\)"
                             change)
           (kill-buffer (process-buffer proc))
           (when (> (count-windows) 1)
             (delete-window)))))))
  :hook
  (term-mode . ansi-term-handle-close))
#+END_SRC

*** Multi Term

#+NAME: sh/multiterm
#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :after (term)
  :bind
  (:map term-mode-map
  ( "C-c C-j" . term-line-mode))
  :init
  (defun multiterm (&optional ARG)
    "Wrapper to be able to call multi-term from shell-pop"
     (interactive)
     (multi-term))

  :config
  (add-to-list 'term-bind-key-alist '("<tab>" . term-send-tab)))
#+END_SRC

*** Shell Pop

#+NAME: sh/pop
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :custom
  (shell-pop-window-position 'bottom)
  (shell-pop-window-size 30)
  (shell-pop-term-shell shell-file-name)
  (shell-pop-full-span t)
  :init
  (defun resize-shell-pop-to-desired-width ()
    (when (and (string= (buffer-name) shell-pop-last-shell-buffer-name)
             (memq shell-pop-window-position '(left right)))
      (enlarge-window-horizontally
       (- (/ (* (frame-width) shell-default-width) 100)
          (window-width)))))

  (defmacro make-shell-pop-command (func &optional shell)
    "Create a function to open a shell via the function FUNC.
SHELL is the SHELL function to use (i.e. when FUNC represents a terminal)."
    (let* ((name (symbol-name func)))
      `(defun ,(intern (concat "shell-pop-" name)) (index)
         ,(format
           (concat "Toggle a popup window with `%S'.\n"
                   "Multiple shells can be opened with a numerical prefix "
                   "argument. Using the universal prefix argument will "
                   "open the shell in the current buffer instead of a "
                   "popup buffer.") func)
         (interactive "P")
         (require 'shell-pop)
         (if (equal '(4) index)
             ;; no popup
             (,func ,shell)
           (shell-pop--set-shell-type
            'shell-pop-shell-type
            (backquote (,name
                        ,(concat "*" name "*")
                        (lambda nil (,func ,shell)))))
           (shell-pop index)
           (resize-shell-pop-to-desired-width)))))

  (make-shell-pop-command eshell)
  (make-shell-pop-command term shell-pop-term-shell)
  (make-shell-pop-command ansi-term shell-pop-term-shell)
  (make-shell-pop-command inferior-shell)
  (make-shell-pop-command multiterm))
#+END_SRC

*** With Editor

#+NAME: sh/witheditor
#+BEGIN_SRC emacs-lisp
(use-package with-editor
  :hook
  ((shell-mode term-exec eshell-mode) . with-editor-export-editor))
#+END_SRC

*** SSH

#+NAME: remote/ssh
#+BEGIN_SRC emacs-lisp
(use-package ssh
  :init
  (defun ssh/enable-path-completion ()
    "Enable directory tracking and path autocompletion
over ssh."
    (setq ssh-directory-tracking-mode 'ftp)
    (shell-dirtrack-mode t)
    (setq dirtrackp nil))

  :hook
  (ssh-mode . ssh/enable-path-completion))
#+END_SRC

**** SSH tunnels

#+BEGIN_SRC emacs-lisp
(use-package ssh-tunnels)
#+END_SRC

**** SSH Deploy

#+BEGIN_SRC emacs-lisp
(use-package ssh-deploy)

#+END_SRC

*** SCP

#+NAME: remote/scp
#+BEGIN_SRC emacs-lisp
(use-package scp
  :preface
  (setq enable-local-variables :all enable-local-eval t)
  :init
  (cl-defun scp/setup (&optional host user password remote-path port)
    "Set the connection information for the current project using
directory local variables."
    (interactive (list
                  (read-string "Host: "
                               tramp-default-host)
                  (read-string "User: "
                               (or tramp-default-user
                                  (getenv "USER")))
                  (read-string "Password: ")
                  (read-string "Remote Path: "
                               (concat
                                "~/"
                                (basename default-directory)))
                  (read-string "Port: " "22")))
    (let ((vars
           (mapcar* #'cons
                    '(host user password remote-path port)
                    (list host user password remote-path port))))
      (dolist (var vars)
        (add-dir-local-variable nil (car var) (cdr var))))))
#+END_SRC

*** Tramp

#+NAME: remote/tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :custom
  ;; use ssh by default
  (tramp-default-method "ssh")
  (tramp-default-user "classbin"))
#+END_SRC

**** Docker Tramp
:PROPERTIES:
:ID:       0BC85ED8-9B18-4CDA-9C45-B4B54BFE632E
:END:

#+NAME: docker/tramp
#+BEGIN_SRC emacs-lisp
(use-package docker-tramp)
#+END_SRC

**** Kubernetes Tramp

#+BEGIN_SRC emacs-lisp
(use-package kubernetes-tramp)
#+END_SRC

*** sh-script mode

#+BEGIN_SRC emacs-lisp
(use-package sh-mode
  :straight (sh-mode :type built-in)
  :custom
  (sh-indentation 2)
  :init
  (defun sh-mode/disable-org-link ()
    (org-link-minor-mode -1))
  :hook
  (sh-mode  . sh-mode/disable-org-link))

#+END_SRC

**** LAMMPS
#+BEGIN_SRC emacs-lisp
(use-package lammps-mode
  :mode (("in\\." . lammps-mode)
         ("\\.lmp\\'" . lammps-mode)))

#+END_SRC
** Documentation
:PROPERTIES:
:ID:       67707BA1-09DE-4175-BD74-4BA869BFBAA9
:END:

*** Help
**** Help+

#+BEGIN_SRC emacs-lisp
(use-package help+
    :demand t)
#+END_SRC

***** help-mode+

#+BEGIN_SRC emacs-lisp
(use-package help-mode+
    :demand t)
#+END_SRC

***** help-macro+

#+BEGIN_SRC emacs-lisp
(use-package help-macro+
    :demand t)
#+END_SRC

***** help-fns+

#+BEGIN_SRC emacs-lisp
(use-package help-fns+
    :demand t)
#+END_SRC

**** Helpful

#+NAME: help-helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :init
    (bind-keys
     :prefix-map helpful-prefix-map
     :prefix "M-m h"
     ("f" . helpful-callable)
     ("v" . helpful-variable)
     ("k" . helpful-key)
     ("C" . helpful-command)
     ("d" . helpful-at-point)
     ("F" . helpful-function))
    :config
    (which-key-add-key-based-replacements
      "M-m h" " Helfpul"
      "M-m h f" "describe callable"
      "M-m h k" "describe key"
      "M-m h C" "describe command"
      "M-m h d" "describe at point "
      "M-m h F" "describe function"))

#+END_SRC

**** Help find org mode

#+BEGIN_SRC emacs-lisp
(use-package help-find-org-mode
  :init
  (help-find-org-mode 1))
#+END_SRC

*** Elisp refs

#+BEGIN_SRC emacs-lisp
(use-package elisp-refs)
#+END_SRC

*** Info+
:PROPERTIES:
:ID:       81C8F5CC-5F6E-417F-B549-BE2523A726BB
:END:

#+BEGIN_SRC emacs-lisp
(use-package info+)
#+END_SRC

** Frames
:PROPERTIES:
:ID:       0D07CBD4-1F78-4228-A86F-73257A4BA467
:END:
*** Frame+
:PROPERTIES:
:ID:       4B926D23-5661-4301-B4D6-39967E34EA23
:END:

#+NAME: frame-plus
#+BEGIN_SRC emacs-lisp
(use-package frame+)
#+END_SRC

*** Frame fns
#+BEGIN_SRC emacs-lisp
(use-package frame-fns)
#+END_SRC

*** Frame cmds
:PROPERTIES:
:ID:       BBFEF753-9BE3-4B00-9CF1-36AA98244704
:END:

#+BEGIN_SRC emacs-lisp
(use-package frame-cmds)
#+END_SRC

*** Transpose frame
#+BEGIN_SRC emacs-lisp
(use-package transpose-frame
  :bind ("C-x M-t" . transpose-frame))
#+END_SRC

*** Posframe
#+NAME: posframe
#+BEGIN_SRC emacs-lisp
  (use-package posframe)
#+END_SRC

** Window
:PROPERTIES:
:ID:       39D49D11-3663-4F0F-A2CE-2CE4FE8CB2CB
:END:
*** Winner Mode

[[https://www.emacswiki.org/emacs/WinnerMode][Winner mode]] is a global minor mode that allows easy switching across
different window configurations.

#+NAME: winner-mode-config
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :straight (winner :type built-in)
    :init
    (winner-mode 1)
    :hook
    ((org-shiftup-final . windmove-up)
     (org-shiftleft-final . windmove-left)
     (org-shiftdown-final . windmove-down)
     (org-shiftright-final . windmove-right)))
#+END_SRC

*** Shackle
#+BEGIN_SRC emacs-lisp
(use-package shackle
  :init
  (shackle-mode 1)
  :config
  (setq shackle-rules '((compilation-mode :noselect t))
        shackle-default-rule '(:select t)))

#+END_SRC
*** Poporg

#+BEGIN_SRC emacs-lisp
(use-package poporg
  :bind ("C-c \"" . poporg-dwim))
#+END_SRC

*** Ace Window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :custom-face
    (aw-leading-char-face
     ((t (:inverse-video t :inherit avy-lead-face :height 2.0))))
    :bind
    ("M-o" . ace-window)
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-background nil)
    :init
    (ace-window-display-mode)
    :config
    (set-face-foreground 'aw-leading-char-face (face-background 'default)))
#+END_SRC

*** Golden Ratio

#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :custom
    (golden-ratio-auto-scale t))
#+END_SRC

*** Purpose

#+NAME: purpose
#+BEGIN_SRC emacs-lisp
(use-package window-purpose)
#+END_SRC

** Faces
:PROPERTIES:
:ID:       DB2AF151-88E9-4976-8E1D-EA289AFA9630
:END:
*** Faces+

#+BEGIN_SRC emacs-lisp
(use-package faces+)
#+END_SRC

*** Face functions

#+BEGIN_SRC emacs-lisp
(use-package face-fns)
#+END_SRC

*** Face remap+

#+BEGIN_SRC emacs-lisp
(use-package face-remap+)
#+END_SRC

*** Face Explorer

#+BEGIN_SRC emacs-lisp
(use-package face-explorer)
#+END_SRC

*** Font lock
**** FontLock+

#+NAME: font-lock-plus
#+BEGIN_SRC emacs-lisp
(use-package font-lock+
  :demand t)
#+END_SRC

***** Italicize font lock keyword face
:PROPERTIES:
:ID:       C72C2D39-2562-4E7F-B9BC-0F4D0881670B
:END:

#+NAME: theme-italicize-for-modes
#+BEGIN_SRC emacs-lisp
(defcustom dotemacs-italicize-keyword-modes '(emacs-lisp-mode js2-mode)
    "Major modes for which an italicized font lock keyword
  face shall be used."
    :type '(symbol))

  (defun dotemacs/italicize-keyword-fn ()
  (face-remap-add-relative 'font-lock-keyword-face
                           '(:slant italic
                             :family "Operator Mono")))

  (defun dotemacs/italicize-keyword-faces ()
    (cl-flet ((mode->hook (mode)
                (intern (concat (symbol-name mode) "-hook"))))
      (cl-loop
         for mode in dotemacs-italicize-keyword-modes
         for hooksym = (mode->hook mode)
         do
           (add-hook hooksym 'dotemacs/italicize-keyword-fn))))

(add-hook 'load-theme-hook #'dotemacs/italicize-keyword-faces)
#+END_SRC

****** Per buffer Themes

#+NAME: theme/per-buffer
#+BEGIN_SRC emacs-lisp
(use-package per-buffer-theme)
#+END_SRC

**** Font lock studio

#+BEGIN_SRC emacs-lisp
(use-package font-lock-studio)
#+END_SRC

*** Button Lock
:PROPERTIES:
:ID:       24DBC7FD-6AE3-4A2B-A42E-8FBC2E8127C5
:END:

#+NAME: button/lock
#+BEGIN_SRC emacs-lisp
(use-package button-lock)
#+END_SRC

** Minibuffer
:PROPERTIES:
:ID:       356E9F9B-4A80-4D65-9846-2B37DB270206
:END:
*** Prompt Properties

Don't let the cursor go into the minibuffer prompt.

From Xah Lee's [[http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html][emacs-stop-cursor-enter-prompt]], found in the [[https://github.com/syl20bnr/spacemacs/blob/bd7ef98e4c35fd87538dd2a81356cc83f5fd02f3/layers/%2Bdistributions/spacemacs-base/config.el#L128-L131][config.el]] file of the spacemacs base layer.

#+NAME: mb-prompt
#+BEGIN_SRC emacs-lisp
(setq minibuffer-prompt-properties
      '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
#+END_SRC

*** Ivy

[[https://github.com/abo-abo/swiper][Ivy]] is a completion and selection framework in the same vein
as helm.

It doesn't have the same kind of ecosystem or interopability,
but its easy to configure, offers a minimalistic interface,
and is every bit as good of a completion tool as helm is,
if not better.

I prefer the default regex matcher, but if you want fuzzy matching as a fallback or replacement checkout this [[https://oremacs.com/2016/01/06/ivy-flx/][article]].

#+NAME: core/ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :bind (("C-c C-r" . ivy-resume))
  :init
  (ivy-mode +1)
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-initial-inputs-alist nil)
  (ivy-sort-max-size 50000)
  (ivy-re-builders-alist
   '((swiper . ivy--regex-plus)
     (read-file-name-internal . ivy--regex-fuzzy)
     (t . ivy--regex-ignore-order)))
  (ivy-use-selectable-prompt nil)
  :config
  (defvar ivy-recursive-restore-in-progress nil)

  (defun ivy-note-when-inside-recursive-restore (orig-fun &rest args)
    (let ((ivy-recursive-restore-in-progress t))
      (apply orig-fun args)))

  (defun ivy-no-read-while-exiting-recursion (orig-fun &rest args)
    (if ivy-recursive-restore-in-progress
        (error "Cannot use `ivy-read' while restoring recursive state.")
      (apply orig-fun args)))

  (advice-add 'ivy-recursive-restore :around
              #'ivy-note-when-inside-recursive-restore)

  (advice-add 'ivy-read :around #'ivy-no-read-while-exiting-recursion)

  (ivy-set-actions 'ivy-switch-
                   '(("k" (lambda (x) (kill-buffer x) (ivy--reset-state ivy-last)) "kill")
                     ("j" ivy--switch-buffer-other-window-action "other")))

  ;; * ivy navigation
  (defun ivy-org-jump-to-visible-headline ()
    "Jump to visible headline in the buffer."
    (interactive)
    (org-mark-ring-push)
    (avy-with avy-goto-line (avy--generic-jump "^\\*+" nil avy-style)))

  (defun ivy-jump-to-visible-sentence ()
    "Jump to visible sentence in the buffer."
    (interactive)
    (org-mark-ring-push)
    (avy-with avy-goto-line (avy--generic-jump (sentence-end) nil avy-style))
    (forward-sentence))

  (defun ivy-org-jump-to-heading ()
    "Jump to heading in the current buffer."
    (interactive)
    (let ((headlines '()))
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward
	              ;; this matches org headings in elisp too.
	              "^\\(;; \\)?\\(\\*+\\)\\(?: +\\(.*?\\)\\)?[ 	]*$"  nil t)
	        (cl-pushnew (list
		                   (format "%-80s"
			                         (match-string 0))
		                   (cons 'position (match-beginning 0)))
		                  headlines)))
      (ivy-read "Headline: "
	              (reverse headlines)
	              :action (lambda (candidate)
			                    (org-mark-ring-push)
			                    (goto-char (cdr (assoc 'position candidate)))
			                    (outline-show-entry)))))


  (defun ivy-org-jump-to-agenda-heading ()
    "Jump to a heading in an agenda file."
    (interactive)
    (let ((headlines '()))
      ;; these files should be open already since they are agenda files.
      (loop for file in (org-agenda-files) do
	          (with-current-buffer (find-file-noselect file)
	            (save-excursion
	              (goto-char (point-min))
	              (while (re-search-forward org-heading-regexp nil t)
		              (cl-pushnew (list
			                         (format "%-80s (%s)"
				                               (match-string 0)
				                               (file-name-nondirectory file))
			                         :file file
			                         :position (match-beginning 0))
			                        headlines)))))
      (ivy-read "Headline: "
	              (reverse headlines)
	              :action (lambda (candidate)
			                    (org-mark-ring-push)
			                    (find-file (plist-get (cdr candidate) :file))
			                    (goto-char (plist-get (cdr candidate) :position))
			                    (outline-show-entry)))))


  (defun ivy-org-jump-to-heading-in-files (files &optional fontify)
    "Jump to org heading in FILES.
Optional FONTIFY colors the headlines. It might slow things down
a lot with large numbers of org-files or long org-files. This
function does not open the files."
    (let ((headlines '()))
      (loop for file in files do
	          (with-temp-buffer
	            (insert-file-contents file)
	            (when fontify
	              (org-mode)
	              (font-lock-fontify-buffer))
	            (goto-char (point-min))
	            (while (re-search-forward org-heading-regexp nil t)
	              (cl-pushnew (list
			                       (format "%-80s (%s)"
				                             (match-string 0)
				                             (file-name-nondirectory file))
			                       :file file
			                       :position (match-beginning 0))
			                      headlines))))
      (ivy-read "Headline: "
	              (reverse headlines)
	              :action (lambda (candidate)
			                    (org-mark-ring-push)
			                    (find-file (plist-get (cdr candidate) :file))
			                    (goto-char (plist-get (cdr candidate) :position))
			                    (outline-show-entry)))))


  (defun ivy-org-jump-to-heading-in-directory (&optional recursive)
    "Jump to heading in an org file in the current directory.
Use a prefix arg to make it RECURSIVE.
Use a double prefix to make it recursive and fontified."
    (interactive "P")
    (let ((fontify nil))
      (when (equal recursive '(16))
        (setq fontify t))
      (ivy-org-jump-to-heading-in-files
       (f-entries "."
		              (lambda (f)
		                (and
		                 (f-ext? f "org")
		                 (not (s-contains? "#" f))))
		              recursive)
       fontify)))


  (defun ivy-org-jump-to-project-headline (&optional fontify)
    "Jump to a headline in an org-file in the current project.
The project is defined by projectile. Use a prefix arg FONTIFY
for colored headlines."
    (interactive "P")
    (ivy-org-jump-to-heading-in-files
     (mapcar
      (lambda (f) (expand-file-name f (projectile-project-root)))
      (-filter (lambda (f)
	               (and
		              (f-ext? f "org")
		              (not (s-contains? "#" f))))
	             (projectile-current-project-files)))
     fontify))


  (defun ivy-org-jump-to-open-headline (&optional fontify)
    "Jump to a headline in an open org-file.
Use a prefix arg FONTIFY for colored headlines."
    (interactive "P")
    (ivy-org-jump-to-heading-in-files
     (mapcar 'buffer-file-name
	           (-filter (lambda (b)
		                    (-when-let (f (buffer-file-name b))
			                    (f-ext? f "org")))
		                  (buffer-list)))
     fontify)))
#+END_SRC

**** Ivy rtags
:PROPERTIES:
:ID:       D38BB737-FE4B-4DD6-8208-0F538ED777CB
:END:

#+NAME: ivy/rtags
#+BEGIN_SRC emacs-lisp
(use-package ivy-rtags
  :after (rtags)
  :init
  (setq rtags-display-result-backend 'ivy))

#+END_SRC

**** Ivy xref
#+NAME: ivy/xref
#+BEGIN_SRC emacs-lisp
(use-package ivy-xref
  :init
  (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))
#+END_SRC

**** Ivy todos

#+NAME: ivy/todo
#+BEGIN_SRC emacs-lisp

  (use-package ivy-todo
    :config
    (setq ivy-todo-file (agenda-dir "ivy-todo.org")))


#+END_SRC

**** Ivy rich

#+NAME: ivy/rich
#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :after ivy

  :custom
  (ivy-rich-switch-buffer-align-virtual-buffer t)
  (ivy-format-function #'ivy-format-function-line)
  :init
(defun ivy-rich-switch-buffer-icon (candidate)
    "Use `all-the-icons' icons in buffer list."
    (with-current-buffer
	      (get-buffer candidate)
	    (let ((icon (all-the-icons-icon-for-mode major-mode)))
	      (if (symbolp icon)
	          (all-the-icons-icon-for-mode 'fundamental-mode)
	        icon))))


  (setq ivy-rich-display-transformers-list
   '(ivy-switch-buffer
     (:columns
	    ((ivy-rich-switch-buffer-icon :width 4)
	     (ivy-rich-candidate (:width 60))
	     (ivy-rich-switch-buffer-size (:width 15))
	     (ivy-rich-switch-buffer-major-mode
	      (:width 30 :face warning))
	     (ivy-rich-switch-buffer-project (:width 15 :face success))
	     (ivy-rich-switch-buffer-path
	      (:width (lambda (x)
		              (ivy-rich-switch-buffer-shorten-path
		               x (ivy-rich-minibuffer-width 0.3))))))
	    :predicate
	    (lambda (cand) (get-buffer cand)))
     counsel-M-x
     (:columns
	    ((counsel-M-x-transformer (:width 100))
	     (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
     counsel-describe-function
     (:columns
	    ((counsel-describe-function-transformer (:width 40))
	     (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
     counsel-describe-variable
     (:columns
	    ((counsel-describe-variable-transformer (:width 40))
	     (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
     counsel-recentf
     (:columns
	    ((ivy-rich-candidate (:width 0.8))
	     (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))))
  (ivy-rich-mode 1))
#+END_SRC

**** Ivy pages

#+NAME: ivy/pages
#+BEGIN_SRC emacs-lisp
  (use-package ivy-pages
    :after (ivy))
#+END_SRC

**** Ivy Posframe

#+NAME: ivy/posframe
#+BEGIN_SRC emacs-lisp
(use-package ivy-posframe)
#+END_SRC

**** Ivy yasnippet
:PROPERTIES:
:ID:       FC448B14-3574-43EB-B7A7-1777E6507C58
END:

#+BEGIN_SRC emacs-lisp
(use-package ivy-yasnippet)
#+END_SRC

**** Ivy Purpose

#+BEGIN_SRC emacs-lisp
(use-package ivy-purpose
  :after (window-purpose)
  :init
  (ivy-purpose-setup))
#+END_SRC

**** Ivy Posframe
:PROPERTIES:
:ID:       5C226016-03A6-4D63-905E-BB5C18A58F71
:END:

#+NAME: ivy/posframe
#+BEGIN_SRC emacs-lisp
(use-package ivy-posframe)
#+END_SRC

*** Counsel
**** counsel mode

#+NAME: core/counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind (("<f1> l" . counsel-find-library)
           ("C-c l" . counsel-load-library)
           ("C-c g" . counsel-git)
           ("C-c G" . counsel-git-grep)
           ("C-c k" . counsel-ag)
           ("C-x l" . counsel-locate)
           ("C-x C-b" . counsel-ibuffer)
           ([remap insert-char] . counsel-unicode-char)
           (:map minibuffer-local-map
                 ("C-r" . counsel-minibuffer-history))
           (:map prog-mode-map
                 ("C-c C-j" . counsel-imenu))
           (:map org-mode-map
                 ("C-c C-j" . counsel-org-goto)
                 ("C-c M-t" . counsel-org-tag)
                 ("C-c f"   . counsel-org-file)))
    :init
    (counsel-mode +1)
    :config
    (setq-default counsel-git-grep-cmd counsel-git-grep-cmd-default)
    (setq counsel-mode-override-describe-bindings t)
    :blackout t)

#+END_SRC

**** Counsel Projectile

[[https://github.com/ericdanan/counsel-projectile][Counsel Projectile]] provides a project management interface via ivy and
friends.

#+NAME: counsel/projectile
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
    :after (:all projectile counsel)
    :demand t
    :custom
    (counsel-projectile-org-capture-templates
     '(("t" "[${name}] Task" entry
        (file "${root}/${name}.org")
        "* ☛ TODO %?\n  %u\n  %a")
       ("n" "[${name}] Note" entry
        (file+headline "${root}/notes.org" "Notes")
        "* ☛ %a %?\n  %u\n")))
    :init
    (counsel-projectile-mode t)
    ;; ppUse Dired
    (setcar counsel-projectile-switch-project-action 4))
#+END_SRC

**** counsel Gtags

#+NAME: counsel/ggtags
#+BEGIN_SRC emacs-lisp
(use-package counsel-gtags
  :custom
	(counsel-gtags-ignore-case t)
  (counsel-gtags-auto-update t)
  :hook
  (c-mode-common . counsel-gtags-mode))
#+END_SRC

**** counsel iTunes

#+NAME: counsel/itunes
#+BEGIN_SRC emacs-lisp
(use-package counsel-itunes
  :if (executable-find "osascript")
  :straight (counsel-itunes
             :host github
             :repo "jchaffin/counsel-itunes")
  :preface
  (bind-keys
   :prefix-map itunes-prefix-map
   :prefix "M-m i")
  :bind
  (:map itunes-prefix-map
        ("c" . counsel-itunes-current-track)
        ("p" . counsel-itunes-playlist)
        ("t" . counsel-itunes-tracklist)
        ("SPC" . counsel-itunes-play-pause)
        ("-" . counsel-itunes-volume-down)
        ("+" . counsel-itunes-volume-up)
        ("b" . counsel-itunes-previous-track)
        ("n" . counsel-itunes-next-track)
        ("s" . counsel-itunes-shuffle))
  :config
  (with-eval-after-load 'which-key
    (which-key-add-key-based-replacements
      "M-m i"     " iTunes"
      "M-m i c"   "ℹ Info"
      "M-m i p"   " Playlist"
      "M-m i SPC" "⏯ Play/Pause"
      "M-m i t"   " Tracklist"
      "M-m i -"   "🔉 Volume Down"
      "M-m i +"   "🔊 Volume Up"
      "M-m i b"   "⏮ Previous Track "
      "M-m i n"   "⏭ Next Track"
      "M-m i s"   "🔀 Shuffle"))
  :after (:all counsel ivy)
  :demand t)

#+END_SRC

**** counsel Spotify

#+NAME: counsel/spotify
#+BEGIN_SRC emacs-lisp
(use-package counsel-spotify)

#+END_SRC

**** counsel Dash

Counsel dash provides a simple wrapper around [[https://github.com/areina/helm-dash][helm-dash]] bindings to provide
ivy integration with dash docsets. This is not great, as installing
=helm-dash= requires installing =helm= itself.

#+NAME: counsel/dash
#+BEGIN_SRC emacs-lisp
  (use-package counsel-dash
    :after (:all counsel)
    :if (eq system-type 'darwin)
    :ensure-system-package
    ("/Applications/Dash.app" . "brew cask install dash"))

#+END_SRC

**** counsel Codesearch

#+NAME: counsel/codesearch
#+BEGIN_SRC emacs-lisp
(use-package counsel-codesearch
    :requires codesearch)
#+END_SRC

**** counsel Tramp

#+NAME: counsel/tramp
#+BEGIN_SRC emacs-lisp
(use-package counsel-tramp
  :after (counsel))
#+END_SRC

**** counsel org clock

#+BEGIN_SRC emacs-lisp
(use-package counsel-org-clock
  :straight (:host github
                   :repo "akirak/counsel-org-clock")
  :after (:all org ivy)
  :demand t)
#+END_SRC

*** Swiper

#+NAME: core/swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
    :custom
    (enable-recursive-minibuffers t)
    (swiper-stay-on-quit t)
    :bind
    ("\C-s" . counsel-grep-or-swiper)
    :config
    (if (eq system-type 'darwin)
        (global-set-key (kbd "s-f") 'swiper)))
#+END_SRC

*** Omnibox

#+NAME: mb-omnibox
#+BEGIN_SRC emacs-lisp
;; Omnibox
(use-package omnibox
  :commands omnibox-M-x
  :bind (:map omnibox-mode-map
              ("M-x" . omnibox-M-x)))
#+END_SRC

** Completion
:PROPERTIES:
:ID:       2527EA69-7553-43C5-A1E6-5084BD977200
:END:
*** Abbrev

#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :straight (abbrev :type built-in)
  :custom
  (abbrev-file-name (emacs-etc-dir "abbrev/defs.el")))
#+END_SRC

*** Prescient

Filter and sort completion candidates.

**** prescient.el

Package ~prescient~ is a library for intelligent sorting and
filtering in various contexts.

#+NAME: prescient/mode
#+BEGIN_SRC emacs-lisp
(use-package prescient
  :config
  ;; Remember usage statistics across Emacs sessions.
  (prescient-persist-mode +1))
#+END_SRC

**** company prescient

Package ~company-prescient~ provides intelligent sorting and
filtering for candidates in Company completions.

#+NAME: prescient/company
#+BEGIN_SRC emacs-lisp
(use-package company-prescient
  :after (:all prescient company)
  :demand t
  :config
  ;; Use `prescient' for Company menus.
  (company-prescient-mode +1))
#+END_SRC

**** ivy prescient

Package ~ivy-prescient~ provides intelligent sorting and filtering
for candidates in Ivy menus.

#+NAME: prescient/ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy-prescient
  :init
  ;; Use `prescient' for Ivy menus.
  (ivy-prescient-mode +1))

#+END_SRC

*** Company

Emacs has two popular packages for code completion --
[[https://github.com/auto-complete/auto-complete][autocomplete]] and [[https://github.com/company-mode/company-mode][company]]. This reddit [[https://www.reddit.com/r/emacs/comments/2ekw22/autocompletemode_vs_companymode_which_is_better/][thread]] was enough for
me to go with company.


If you need more convincing, [[https://github.com/company-mode/company-mode/issues/68][company-mode/company-mode#68]]
offers a comprehensive discussion on the two.

The ticket is from the ‘company-mode‘ repository, so there's
probably some bias there, but company-mode hasn't provided
any reason for me reconsider my choice.

#+NAME: company/mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :commands global-company-mode
  :custom
  (company-tooltip-align-annotations t)
  (company-show-numbers t)
  (company-idle-delay 0.2)
  :config
  (company-tng-configure-default)
  (setq company-frontends
        '(company-tng-frontend
          company-pseudo-tooltip-frontend
          company-echo-metadata-frontend))
  :hook
  (after-init . global-company-mode))
#+END_SRC

**** Company posframe

#+BEGIN_SRC emacs-lisp
(use-package company-posframe
  :after (:all company posframe)
  :demand t
  :init
  (company-posframe-mode 1))

#+END_SRC

**** Company Dict

#+NAME: completion/company-dict
#+BEGIN_SRC emacs-lisp
(use-package company-dict
  :after (company)
  :demand t
  :init
  (add-to-list 'company-backends 'company-dict)
  :config
  (setq company-dict-enable-fuzzy t
        company-dict-enable-yasnippet t))
#+END_SRC

**** Company Quick Help

[[https://github.com/expez/company-quickhelp][Company Quick Help]] emulates =autocomplete= documentation-on-idle behavior, but using the less-buggy =pos-tip= package rather than =popup-el=.

#+NAME: company/quickhelp
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :after (company)
  :commands (company-quickhelp-manual-begin)
  :bind
  (:map company-active-map
        ("C-c h" . company-quickhelp-manual-begin))
  :config
  (company-quickhelp-mode 1))
#+END_SRC

**** Company Box

#+NAME: company/box
#+BEGIN_SRC emacs-lisp
(use-package company-box
    :custom (company-box-enable-icon nil))
#+END_SRC

*** Autoinsert

#+BEGIN_SRC emacs-lisp
(use-package autoinsert
  :init
  (defun autoinsert-yas-expand()
    "Replace text in yasnippet template."
    (yas-expand-snippet (buffer-string) (point-min) (point-max)))
  (setq auto-insert-query nil)
  (auto-insert-mode 1)
  :config
  (define-auto-insert "\\.el$" [ "default-elisp.el" autoinsert-yas-expand ])
  :hook
  (find-file . auto-insert))

#+END_SRC

*** YASnippet

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system based off the TextMate snippet syntax.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
    :bind
    (:map goto-map
          ("s" . goto-snippet-dir))

    :preface
    (defvar snippet-directory (emacs-etc-dir "yasnippet" "snippets")
      "Directory for yasnippets.")
    (defun goto-snippet-dir ()
      "Goto `snippet-directory'."
      (interactive)
      (let ((default-directory snippet-directory))
        (dired default-directory)))

    :init
    (yas-global-mode 1)
    :config
    (defun yas/org-very-safe-expand ()
      (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))


    (add-hook 'org-mode-hook
              (lambda ()
                (make-variable-buffer-local 'yas/trigger-key)
                (setq yas/trigger-key [tab])
                (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                (define-key yas/keymap [tab] 'yas/next-field)))

    (when (featurep 'which-key)
      (which-key-add-key-based-replacements
        "C-c &" " YASnippet")))
#+END_SRC

**** Ivy YASnippet

#+BEGIN_SRC emacs-lisp
(use-package ivy-yasnippet)
#+END_SRC

**** Autoyas

#+NAME: snippets-autoyas
#+BEGIN_SRC emacs-lisp
(use-package auto-yasnippet)
#+END_SRC

*** header2

#+BEGIN_SRC emacs-lisp
(use-package header2)
#+END_SRC

*** Skeletor

#+NAME: skeletor-spec
#+BEGIN_SRC emacs-lisp
  (use-package skeletor
    :custom
    (skeletor-user-directory (emacs-etc-dir "skeletor/project-skeletons"))
    (skeletor-completing-read-function 'ivy-completing-read)
    (skeletor-python-bin-search-path
     '("/usr/local/bin" "/usr/bin"))
    (skeletor-project-directory (projects-dir))

    :init

    (defun skeletor-add-pyenv-pythons ()
      "Add python binaries managed by pyenv to
   `skeletor-python-bin-search-path'."
      (let* ((pyenv-dir (or (getenv "PYENV_ROOT")
                           (user-home ".pyenv")))
             (pyenv-version-dir
              (and pyenv-dir (resolve-path pyenv-dir "versions")))
             (pyenv-versions
              (directory-files-no-wildcards pyenv-version-dir t))
             (python-bins
              (mapcar
               (lambda (d)
                 (resolve-path d "bin"))
               pyenv-versions)))
        (dolist (python-bin python-bins)
          (add-to-list 'skeletor-python-bin-search-path
                       python-bin))))

    (when (executable-find "pyenv")
      (skeletor-add-pyenv-pythons))

    :config
    (add-to-list 'skeletor-global-substitutions
                 (cons "__TIME__"
                       (lambda () (format-time-string "%c"))))

    (skeletor-define-template "cmake-unix-makefiles"
      :requires-executables
      '(("cmake". "https://cmake.org")
        ("make" . "https://www.gnu.org/software/make"))

      :substitutions
      (list
       (cons "__DESCRIPTION__"
             (lambda ()
               (read-string "Description: ")))
       (cons "__TARGET_NAME__"
             (lambda ()
               (read-string "Target: ")))
       (cons "__PROJECT-VARS__" ".dir-locals"))

      :after-creation
      (lambda (dir)
        (skeletor-async-shell-command "mkdir build")
        (skeletor-async-shell-command
         (concat "("
                 " cd build &&"
                 " cmake -G 'Unix Makefiles'"
                 " -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .. "
                 ")"))
        (skeletor-async-shell-command
         "ln -s `pwd`/build/compile_commands.json .")
        (dired dir)
        (revert-buffer)))



    (defun skeletor/projectile-ignore ()
      (with-eval-after-load 'projectile
        (add-to-list
         'projectile-project-ignored-directories
         skeletor--directory)))

    :hook
    (project-mode . skeletor/projectile-ignore))

#+END_SRC

*** Expand Region

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  ("s-'" .  er/expand-region)
  ("s-S-'" . er/contract-region))
#+END_SRC

*** Code Library

#+BEGIN_SRC emacs-lisp
(use-package code-library
    :custom
    (code-library-directory (emacs-etc-dir "codelibrary"))
    (code-library-sync-to-gist t))
#+END_SRC

**** Ivy Bibtex

#+BEGIN_SRC emacs-lisp
(use-package ivy-bibtex
  :after (:all ivy bibtex)
  :demand t
  :bind
  ("C-x c" . ivy-bibtex)
  :custom
  (bibtex-completion-notes-template-one-file
   "** ${title} (${year}):
 :PROPERTIES:
 :Custom_ID: ${=key=}
 :AUTHOR: ${author-or-editor}
 :JOURNAL: ${journal}
 :YEAR: ${year}
 :DOI: ${doi}
 :VOLUME: ${volume}
 :END:

")
  (bibtex-completion-additional-search-fields '(tags))
  (bibtex-completion-bibliography
   `(,(org-dir "ref/references.bib")
     ,(dropbox-dir "courses/comsci131/comsci131.bib")
     ,(dropbox-dir "courses/comsci161/comsci161.bib")
     ,(dropbox-dir "courses/ling102/ling102.bib")
     ,(dropbox-dir "courses/ling165c/ling165c.bib")))
  (bibtex-completion-library-path
   `(,(seq-filter #'file-directory-p (directory-files-no-wildcards (dropbox-dir "Documents/pdfs") t))
     ,(dropbox-dir "courses/comsci131/materials/pdfs")
     ,(dropbox-dir "courses/comsci161/materials/pdfs")
     ,(dropbox-dir "courses/ling102/materials/pdfs")
     ,(dropbox-dir "courses/ling165c/materials/pdfs")))
  (bibtex-completion-notes-path (org-dir "ref/notes.org"))
  :init
  (defun org-noter-insert-noter-document ()
    (interactive)
    (if-let ((key  (cdr-safe (assoc "CUSTOM_ID" (org-entry-properties)))))
        (if-let ((pdfs  (bibtex-completion-find-pdf key bibtex-completion-find-additional-pdfs)))
            (org-set-property "NOTER_DOCUMENT" (abbreviate-file-name (car pdfs))))))
  :config
  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (start-process "open" "*open*" "open" fpath)))
  (add-to-list 'ivy-re-builders-alist '(ivy-bibtex . ivy--regex-ignore-order)))

#+END_SRC

** Images
:PROPERTIES:
:ID:       36DECCD2-7A7F-4B6A-A3AA-88C6CC72CFBE
:END:

*** Artist Mode

Artist mode is a built-in Emacs package.

#+BEGIN_SRC emacs-lisp
(use-package artist
  :bind (:map artist-mode-map
               ("C-c C-a p" . artist-select-op-pen-line)))
#+END_SRC

*** UML Diagrams
**** Ditaa

#+NAME: uml-ditaa
#+BEGIN_SRC emacs-lisp

(when (and (eq system-type 'darwin)
           (executable-find "brew")
           (executable-find "ditaa"))
  (let ((ditaa-path (replace-regexp-in-string
                     "\n"  ""
                     (shell-command-to-string
                      "realpath $(brew --prefix ditaa)/libexec/*.jar"))))
    (setq org-ditaa-jar-path ditaa-path)))

#+END_SRC

**** PlantUML

#+NAME: uml-plantuml
#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :if (executable-find "plantuml")
  :defines (org-plantuml-jar-path plantuml-jar-path)
  :init
  (defun dotemacs/plantuml-resolve-jar-path ()
      (when (executable-find "plantuml")
        (replace-regexp-in-string
         "\n" ""
         (shell-command-to-string
          "realpath $(brew --prefix plantuml)/libexec/plantuml.jar"))))
  (when (eq system-type 'darwin)
    (setq org-plantuml-jar-path (dotemacs/plantuml-resolve-jar-path))
    (setq plantuml-jar-path (dotemacs/plantuml-resolve-jar-path))))
#+END_SRC

*** Graphviz

#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode
  :if (executable-find "dot")
  :mode "\\.dot\\'"
  :defines graphiz-dot-program-set
  :bind ((:map graphviz-dot-mode-map
               ("M-s g" . graphviz-dot-program-set)))
  :config
  (defun graphviz-dot-program-set (&optional program)
    "Set the process for `graphviz-dot-dot-program' interactively."
    (interactive)
    (let ((dot-program (or program (completing-read "Process: " graphviz-dot-layout-programs))))
      (setq graphviz-dot-dot-program dot-program)))

  (defun dotemacs/graphviz-dot-mode-setup ()
    "Setup graphviz dot mode."
    (define-key graphviz-dot-mode-map "{" nil)
    (define-key graphviz-dot-mode-map "}" nil)
    (add-to-list 'org-babel-load-languages '(dot . t))
    (setq org-src-lang-modes
          (append '(("dot" . graphviz-dot))
                  (delete '("dot" . fundamental) org-src-lang-modes))))

  (with-eval-after-load 'graphviz-dot-mode
    (dotemacs/graphviz-dot-mode-setup)))

#+END_SRC

*** Thesaurus

This library needs to allow setting transfer protocol on the user
end. It's hardcoded to use port 80. HTTP doesn't really work on my
school's WLAN.

#+BEGIN_SRC emacs-lisp

(use-package thesaurus
  :config
  (progn
    ;; `thesaurus-bhl-api-key' is set in secrets
    (setq thesaurus-prompt-mechanism 'counsel-imenu
          url-proxy-services nil)))

#+END_SRC

*** Image+
:PROPERTIES:
:ID:       51961976-3E9D-4438-947A-912D21993F1D
:END:

[[https://github.com/mhayashi1120/Emacs-imagex][Image+]] provides extensions for image file manipulation in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package image+
    :if (display-graphic-p)
    :after (image)
    :config
    (eval-after-load 'image+
      `(when (require 'hydra nil t)
         (defhydra imagex-sticky-binding (global-map "C-x C-l")
           "Manipulating image"
           ("+" imagex-sticky-zoom-in "zoom in")
           ("-" imagex-sticky-zoom-out "zoom out")
           ("M" imagex-sticky-maximize "maximize")
           ("O" imagex-sticky-restore-original "restore orginal")
           ("S" imagex-sticky-save-image "save file")
           ("r" imagex-sticky-rotate-right "rotate right")
           ("l" imagex-sticky-rotate-left "rotate left")))))
#+END_SRC

*** Blimp

#+BEGIN_SRC emacs-lisp
(use-package blimp)
#+END_SRC

** Media
*** emms


#+BEGIN_SRC emacs-lisp
(use-package emms
  :custom
  (emmms-info-asynchronously nil)
  (emms-playlist-buffer-name "*Music*")
  :bind
  (:map emms-playlist-mode-map
        ("SPC" . emms-pause))
  :init
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  :config
  (require 'emms-player-simple)
  (require 'emms-source-file)
  (require 'emms-mark)
  (setq emms-playlist-default-major-mode 'emms-mark-mode)
  (require 'emms-source-playlist)
  (require 'emms-browser)
  ;; add flv and ogv
  (define-emms-simple-player mplayer '(file url)
    (regexp-opt '(".ogg" ".mp3" ".mp4" ".wav" ".mpg"
                  ".mpeg" ".wmv" ".wma" ".mov" ".avi"
                  ".divx" ".ogm" ".asf" ".mkv" "http://"
                  "mms://" ".rm" ".rmvb" ".mp4" ".flac"
                  ".vob" ".m4a" ".flv" ".ogv" ".pls"))
    "mplayer" "-slave" "-quiet" "-really-quiet" "-fullscreen"))

#+END_SRC

*** org emms

#+BEGIN_SRC emacs-lisp
(use-package org-emms
  :after (emms)
  :demand t)
#+END_SRC

*** bongo

#+BEGIN_SRC emacs-lisp
(use-package bongo)
#+END_SRC

*** org player

#+BEGIN_SRC emacs-lisp
(use-package org-player
  :straight (org-player :local-repo "~/.emacs.d/etc/local/org-player")
  :after (bongo))
#+END_SRC

* Org
:PROPERTIES:
:ID:       C2106106-C5F8-4B9B-815D-058678CB9242
:END:
** Latex
:PROPERTIES:
:ID:       C2BC6BE6-0295-4540-8E6F-9C8620FCBE0B
:CUSTOM_ID: sec:latex
:END:
*** Auctex

#+BEGIN_SRC emacs-lisp
(use-package auctex
  :bind (:map LaTeX-mode-map
              ("M-s l" . TeX-engine-set)))
#+END_SRC

**** company auctex
:PROPERTIES:
:ID:       EF3C7FFE-2A5E-4DF9-A2E6-FC0FBC9E8F9D
:END:

#+NAME: latex-company-auctex
#+BEGIN_SRC emacs-lisp
(use-package company-auctex
  :demand t
  :after (:all company tex)
  :init
  (company-auctex-init))
#+END_SRC

**** auctex latexmk
:PROPERTIES:
:ID:       68110AC8-A864-46E1-B4CC-C3297F78C7B4
:END:

#+NAME: latex-auctex-latexmk
#+BEGIN_SRC emacs-lisp
(use-package auctex-latexmk
  :after (tex)
  :custom
  (auctex-latexmk-inherit-TeX-PDF-mode t)
  :init
  (auctex-latexmk-setup))
#+END_SRC

*** Tex

#+NAME: latex-tex
#+BEGIN_SRC emacs-lisp
(use-package tex
  :straight auctex
  :custom
  (TeX-command-default
   (if (executable-find "latexmk") "LatexMk" "LaTeX"))
  (TeX-command-extra-options "-shell-escape")
  (TeX-error-overview-open-after-TeX-run t)
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-syntactic-comment t)
  ;; nonstopmode
  (TeX-interactive-mode nil)
  ;; Don't insert line-break at inline math
  (LaTeX-fill-break-at-separators nil)
  (LaTeX-item-indent nil)
  :init
  ;; https://emacs.stackexchange.com/a/19475
  (defun latex/pdfview ()
    "Use `pdf-view-mode' to open PDF files.
This requires the pdf-tools package to be installed."
    (when (file-exists-p (or pdf-info-epdfinfo-program ""))
      (add-to-list 'TeX-view-program-list '("PDF Tools" TeX-pdf-tools-sync-view))
      (setf (alist-get 'output-pdf TeX-view-program-selection) '("PDF Tools"))
      (setq TeX-source-correlate-start-server t)
      (add-hook 'TeX-after-compilation-finished-functions
                #'TeX-revert-document-buffer)))

  (defun latex/setup ()
    ;; Use the shell escape flag with `TeX-command'.
    (when (fboundp 'flyspell-mode)
      (flyspell-mode +1))
    (when (fboundp 'doc-view-mode)
      (add-hook 'doc-view-mode 'auto-revert-mode))
    (when (fboundp 'display-line-numbers-mode)
      (display-line-numbers-mode +1))
    (when (fboundp 'ggtags-mode)
      (ggtags-mode +1))
    (when (fboundp 'typo-mode)
      (typo-mode -1))
    (when (fboundp 'smartparens-mode)
      (smartparens-mode +1)))

  :hook
  (LaTeX-mode . latex/pdfview)
  (LaTeX-mode . latex/setup)
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . TeX-fold-mode)
  (LaTeX-mode . TeX-source-correlate-mode)
  (LaTeX-mode . TeX-PDF-mode)

)

#+END_SRC

**** Tex commands

Credits to @jkitchin and scimax.

#+BEGIN_SRC emacs-lisp

(defvar tlmgr-installed-packages nil
  "Cached list of installed LaTeX packages.")


(defun tlmgr-installed (&optional refresh)
  "Get a list of installed LaTeX packages. Uses a cached value if
possible unless REFRESH is non-nil."
  (unless (or tlmgr-installed-packages refresh)
    (setq tlmgr-installed-packages
	  (mapcar (lambda (s)
		    (split-string (substring s 2) ":" t))
		  (split-string
		   (shell-command-to-string "tlmgr list --only-installed") "\n" t))))
  tlmgr-installed-packages)


(defun texdoc (package)
  "Run texdoc on the PACKAGE."
  (interactive (list (completing-read "Package: " (tlmgr-installed))))
  (shell-command (format "texdoc %s" package)))


(defun kpsewhich (symbol)
  "Run kpsewhich on SYMBOL."
  (interactive "sSymbol: ")
  (message (shell-command-to-string (format "kpsewhich %s" symbol))))


(defun latex/setup ()
  "Display buffer with LaTeX setup information."
  (interactive)
  (message "Please wait while I gather some information. This can take a while.")
  (with-current-buffer (get-buffer-create "*latex-setup*")
    (erase-buffer)
    (org-mode)
    (insert (s-format "#+TITLE: LaTeX setup

This file describes how LaTeX is setup on your computer.

,* Executables

latex: ${(executable-find \"latex\")}
pdflatex: ${(executable-find \"pdflatex\")}
bibtex: ${(executable-find \"bibtex\")}
biber: ${(executable-find \"biber\")}

tlmgr: ${(executable-find \"tlmgr\")}
kpsewhich: ${(executable-find \"kpsewhich\")}
texdoc: ${(executable-find \"texdoc\")}

Configuration:
${(shell-command-to-string \"tlmgr conf texmf\")}

,* Latex classes org-mode knows about

Here are some relevant variables
help:org-format-latex-header
help:org-latex-default-packages-alist
help:org-latex-packages-alist
help:org-latex-pdf-process

Note: Not every class has a corresponding style file. Click on the texdoc link to learn more about the class.

Missing files should be installed in the TEXMFHOME directory listed above. See https://en.wikibooks.org/wiki/LaTeX/Installing_Extra_Packages for help.

"
		      (lambda (arg &optional extra)
			(eval (read arg)))))
    (loop for (org-name header-string cls) in
	  (-uniq (loop for latex-class in org-latex-classes
		       collect
		       (list (car latex-class)
			     (nth 1 latex-class)
			     (let ((header-string (nth 1 latex-class)))
			       (when (string-match "documentclass.*?{\\(.*?\\)}" header-string)
				 (match-string 1 header-string))))))
	  do
	  (let ((cls-path (s-trim (shell-command-to-string (format "kpsewhich %s.cls" cls))))
		(sty-path (s-trim (shell-command-to-string (format "kpsewhich %s.sty" cls)))))
	    (insert (s-format "
,** ${org-name} creates documents with this LaTeX documentclass: ${cls}
This is the header that is expanded.

${header-string}

LaTeX path for class: [[${cls-path}]]

 [[elisp:(shell-command \"texdoc ${cls}\"][texdoc ${cls}]]

Latex style path: [[${sty-path}]]

"
			      (lambda (arg &optional extra)
				(eval (read arg)))))))

    (insert "* org-mode default latex packages\n\n")
    (loop for (options package snippet compilers) in org-latex-default-packages-alist
	  do
	  (insert (s-format "- ${package} (options=${options}) [[elisp:(shell-command \"texdoc ${package}\"][texdoc ${package}]]\n"
			    (lambda (arg &optional extra)
			      (eval (read arg))))))

    (insert "\n* org-mode defined latex packages\n\n")
    (loop for (options package snippet compilers) in org-latex-packages-alist
	  do
	  (insert (s-format "- ${package} [${options}] [[elisp:(shell-command \"texdoc ${package}\"][texdoc ${package}]]\n"
			    (lambda (arg &optional extra)
			      (eval (read arg))))))

    (insert "\n\n* org-mode LaTeX compiling setup\n\n")
    (insert (format "org-latex-pdf-process = \"%s\"\n" org-latex-pdf-process))
    (if (functionp org-latex-pdf-process)
	(insert "%s" (describe-function org-latex-pdf-process))))

  (switch-to-buffer "*latex-setup*")
  (goto-char (point-min)))
#+END_SRC

*** TeX Site

#+BEGIN_SRC emacs-lisp
(use-package tex-site
  :straight auctex)

#+END_SRC

*** Math
:PROPERTIES:
:ID:       1DCF30B4-5549-4415-B588-FE9C5056F0A3
:END:

**** Company Math

#+NAME: latex-math-completion
#+BEGIN_SRC emacs-lisp
(use-package company-math
  :after (company)
  :demand t
  :init
  (add-to-list 'company-backends 'company-math-symbols-unicode))
#+END_SRC

**** Math Symbols

Entered on [2018-06-13 Wed 11:42]

#+NAME: latex-math-symbols
#+BEGIN_SRC emacs-lisp
  (use-package math-symbols
    :init

    (defun latex/font (math-input before after)
     "Insert a LaTeX font.

   MATH-INPUT is the input method to toggle in math environments.

   The BEFORE and AFTER arguments are the strings to insert around
   the marked region, when active. If the thing at point is a word,
   then wrap the word. Otherwise the two elements are joined at point."
     (cond ((texmathp)
            (if current-input-method
                (set-input-method nil)
              (set-input-method math-input)))
           ((region-active-p)
            (save-excursion
              (goto-char (region-beginning))
              (insert before)
              (goto-char (region-end))
              (insert after)))
           ((thing-at-point 'word)
            (save-excursion
              (goto-char (beginning-of-thing 'word))
              (insert before)
              (goto-char (end-of-thing 'word))
              (insert after)))
           (t
            (save-excursion
              (insert (concat before after)))
            (goto-char (+ (point) (length before))))))

    (defun latex/prettify-symbols-extra ()
      (if osx-browse-mode
          (osx-browse-mode nil))

      (when (fboundp 'prettify-symbols-mode)
        (prettify-symbols-mode 1))

      (setq prettify-symbols-alist
            '(("\\complement" . "∁"))))

    (setq-default abbrev-mode t)
    (setq latex-mode-abbrev-table nil)

    (define-abbrev-table 'latex-mode-abbrev-table
        '(("uiff"  "⟷")
          ("uif"  "⟶")
          ("uand" "∧")
          ("ulambda" "𝜆")
          ("uor" "∨")
          ("uxor" "⨁")
          ("uexists" "∃")
          ("unexists" "∄")
          ("usubset" "⊂")
          ("unsubset" "⊄")))

    (defun latex/unbind-osx-browse ()
      (when (fboundp 'osx-browse-mode)
        (let ((map osx-browse-mode-map))
          (define-key map (kbd "s-b") nil)
          (define-key map (kbd "s-i") nil))))

    (defun latex/font-italic ()
      "Insert a literal italic typeset command, or toggle input method
  in math environments with unicode math enabled."
      (interactive)
      (latex/font "math-symbols-italic" "\\textit{" "}"))

    (defun latex/font-bold ()
      "Insert a literal bold typeset command, or toggle input method
  in math environments with unicode math enabled."
      (interactive)
      (latex/font "math-symbols-bold" "\\textbf{" "}")
      (let ((map LaTeX-mode-map))
        (define-key map (kbd "s-b") 'latex/font-bold)
        (define-key map (kbd "s-i") 'latex/font-italic)))

    :hook
    (LaTeX-mode . latex/unbind-osx-browse)
    (LaTeX-mode . latex/prettify-symbols-extra))

#+END_SRC

**** Unicode math input

#+BEGIN_SRC emacs-lisp
(use-package unicode-math-input)
#+END_SRC

*** Extra

#+BEGIN_SRC emacs-lisp
(use-package latex-extra
  :custom
  (latex/no-fill-environments
   '("align" "align*" "forest" "forest*"
     "equation" "equation*" "exe"
     "tabular" "tikzpicture" "prooftree"))

    :bind (:map LaTeX-mode-map
                ("C-c C-a" . latex/compile-commands-until-done)
                ("C-c C-n" . latex/next-section)
                ("C-c C-u" . latex/up-section)
                ("C-c C-f" . latex/next-section-same-level)
                ("C-M-f"   . latex/forward-environment)
                ("C-M-b"   . latex/backward-environment)
                ("C-M-a"   . latex/beginning-of-environment)
                ("C-c C-p" . latex/previous-section)
                ("C-c C-b" . latex/previous-section-same-level)
                ("C-c C-q" . latex/clean-fill-indent-environment))

    :init
    (defun latex/extra ()
      (latex-extra-mode +1))

    :hook
    (LaTeX-mode . latex/extra))

#+END_SRC

*** Reftex


RefTeX is a citation and reference tool maintained by the
AucTeX team.

Since Emacs 24.3, its built in with the Emacs distribution.

#+NAME: latex-reftex
#+BEGIN_SRC emacs-lisp
(use-package reftex
  :init
  (defun reftex/setup ()
    (turn-on-reftex)
    (setq reftex-plug-into-AUCTeX
          '(nil nil t t t)
          reftex-use-fonts t
          reftex-default-bibliography
          `(,(org-dir "ref/references.bib"))))
  :hook
  (LaTeX-mode . reftex/setup))
#+END_SRC

**** Company Reftex
:PROPERTIES:
:ID:       7E380FB6-09B2-4E73-87D1-5515402B58D1
:END:

#+NAME: latex-company-reftex
#+BEGIN_SRC emacs-lisp
(use-package company-reftex
  :demand t
  :after (:all company reftex))
#+END_SRC

*** Magic Latex Buffer

Prettify dedicated org-mode latex buffers.

#+NAME: latex-magic-latex-buffer
#+BEGIN_SRC emacs-lisp
  (use-package magic-latex-buffer
      :custom
      (magic-latex-enable-block-highlight t)
      (magic-latex-enable-suscript nil)
      (magic-latex-enable-pretty-symbols t)
      (magic-latex-enable-block-align nil)
      (magic-latex-enable-inline-image nil)
      :hook
      (LaTeX-mode . magic-latex-buffer))
#+END_SRC

*** Texinfo

#+NAME: latex-texinfo
#+BEGIN_SRC emacs-lisp
(use-package texinfo
  :defines texinfo-section-list
  :commands texinfo-mode
  :mode
  ("\\.texi\\'" . texinfo-mode))
#+END_SRC

*** Preview
**** Tex Preview

#+BEGIN_SRC emacs-lisp
(use-package preview
  :straight auctex)
#+END_SRC

**** LaTeX Preview Pane

Not tangling right now because it's creating a new buffer after every
save.

#+NAME: latex-latex-preview-pane
#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
    :after (:all pdf-tools tex)
    :init (latex-preview-pane-enable))
#+END_SRC

**** Use single directory for storing latex fragments

#+NAME: org-preview-directory
#+BEGIN_SRC emacs-lisp
(let ((ltximg (file-truename '"~/.ltximg/")))
  (when (file-directory-p ltximg)
    (setq org-preview-latex-image-directory ltximg)))
#+END_SRC

**** Clear Cache

#+NAME: org-preview-clear-cache
#+BEGIN_SRC emacs-lisp
(defun org-preview-clear-cache ()
  (interactive)
  (let ((preview-cache
         (f-join default-directory org-preview-latex-image-directory)))
    (if (f-directory? preview-cache)
        (f-delete preview-cache t)
      (message "%s" "Directory 'ltximg' does not exist."))))
#+END_SRC

**** Set the default preview process

#+NAME: org-preview-default
#+BEGIN_SRC emacs-lisp
(if (image-type-available-p 'imagemagick)
    (setq org-preview-latex-default-process 'imagemagick)
  (setq org-preview-latex-default-process 'dvisvgm))
#+END_SRC

**** Format Options

#+NAME: org-preview-format
#+BEGIN_SRC emacs-lisp
 (when (boundp 'org-format-latex-options)
  (plist-put org-format-latex-options :scale 1.2))

 #+END_SRC

**** Justify Fragments

#+BEGIN_SRC emacs-lisp
;; * Fragment overlays

(defun org-latex-fragment-tooltip (beg end image imagetype)
  "Add the fragment tooltip to the overlay and set click function to toggle it."
  (overlay-put (ov-at) 'help-echo
	       (concat (buffer-substring beg end)
		       "\nmouse-1 to toggle."))
  (overlay-put (ov-at) 'local-map (let ((map (make-sparse-keymap)))
				    (define-key map (kbd "C-c C-x C-l") 'org-toggle-latex-fragment)
				    (define-key map [mouse-1]
				      `(lambda ()
					 (interactive)
					 (org-remove-latex-fragment-image-overlays ,beg ,end)))
				    map)))

(advice-add 'org--format-latex-make-overlay :after 'org-latex-fragment-tooltip)

(defun org-latex-fragment-justify (justification)
  "Justify the latex fragment at point with JUSTIFICATION.
JUSTIFICATION is a symbol for 'left, 'center or 'right."
  (interactive
   (list (intern-soft
          (completing-read "Justification (left): " '(left center right)
                           nil t nil nil 'left))))

  (let* ((ov (ov-at))
	 (beg (ov-beg ov))
	 (end (ov-end ov))
	 (shift (- beg (line-beginning-position)))
	 (img (overlay-get ov 'display))
	 (img (and (and img (consp img) (eq (car img) 'image)
			(image-type-available-p (plist-get (cdr img) :type)))
		   img))
	 space-left offset)
    (when (and img
	       ;; This means the equation is at the start of the line
	       (= beg (line-beginning-position))
	       (or
		(string= "" (s-trim (buffer-substring end (line-end-position))))
		(eq 'latex-environment (car (org-element-context)))))
      (setq space-left (- (window-max-chars-per-line) (car (image-size img)))
	    offset (floor (cond
			   ((eq justification 'center)
			    (- (/ space-left 2) shift))
			   ((eq justification 'right)
			    (- space-left shift))
			   (t
			    0))))
      (when (>= offset 0)
	(overlay-put ov 'before-string (make-string offset ?\ ))))))

(defun org-latex-fragment-justify-advice (beg end image imagetype)
  "After advice function to justify fragments."
  (org-latex-fragment-justify (or (plist-get org-format-latex-options :justify) 'left)))

(advice-add 'org--format-latex-make-overlay :after 'org-latex-fragment-justify-advice)

(defun org-inject-latex-fragment (orig-func &rest args)
  "Advice function to inject latex code before and/or after the equation in a latex fragment.
You can use this to set \\mathversion{bold} for example to make it bolder."
  (setf (car args)
	(concat
	 (or (plist-get org-format-latex-options :latex-fragment-pre-body) "")
	 (car args)
	 (or (plist-get org-format-latex-options :latex-fragment-post-body) "")))
  (apply orig-func args))

(advice-add 'org-create-formula-image :around #'org-inject-latex-fragment)
#+END_SRC

**** Parsing keywords

#+NAME: org-preview-parsing
#+BEGIN_SRC emacs-lisp
(defun org-preview/process-keyword  (p)
  (interactive)
  (org-element-map (org-element-parse-buffer) 'keyword
    (lambda (k)
      (if (string= p (org-element-property :key k))
          (intern (org-element-property :value k))))
    nil t))

(defun org-preview/process-compiler ()
  (or (org-preview/process-keyword "LATEX_COMPILER")
     org-latex-compiler))

(defun org-preview/set-process ()
  (or (org-preview/process-keyword "PREVIEW")
     org-preview-latex-default-process))

(defun org-preview/process-class ()
  (or (org-preview/process-keyword "LATEX_CLASS")
     org-latex-default-class))

(defun org-preview/uclaling-p ()
  (let ((latex-class (org-preview/process-class)))
    (string= "uclaling" latex-class)))

(defun org-preview/uclacs-p ()
  (let ((latex-class (org-preview/process-class)))
    (string= "uclacs" latex-class)))

#+END_SRC

**** XeLaTeX

#+NAME: org-preview-xelatex
#+BEGIN_SRC emacs-lisp
(defcustom xelatex-preview-header org-format-latex-header
  "The preamble to use for previewing LaTeX fragments with XeLaTeX."
  :type 'string)

(defcustom xelatex-preview-process-alist
  '((dvipng
     :programs
     ("xelatex" "dvipng")
     :description "dvi > png"
     :message "You need to install the programs: xelatex and dvipng"
     :image-input-type "dvi"
     :image-output-type "png"
     :image-size-adjust (1.3 1.3)
     :latex-compiler
     ("xelatex -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
    (dvisvgm
     :programs
     ("latex" "dvisvgm")
     :description "dvi > svg"
     :message "you need to install the programs: xelatex and dvisvgm."
     :use-xcolor t
     :image-input-type "xdv"
     :image-output-type "svg"
     :image-size-adjust
     (1.7 . 1.5)
     :latex-compiler
     ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("dvisvgm %f -n -b min -c %S -o %O"))
    (imagemagick
     :programs ("xelatex" "convert")
     :description "pdf > png"
     :message "You need to install xelatex and imagemagick"
     :use-xcolor t
     :image-input-type "pdf"
     :image-output-type "png"
     :image-size-adjust (1.0 1.0)
     :latex-compiler ("xelatex -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("convert -density %D -trim -antialias %f -quality 100 %O")))
  "Preview engines for xelatex."
  :type '(alist
          :tag "LaTeX to image backends"
          :value-type (plist)))

(defun org-preview-reparse-local-variables ()
  (interactive)
  (hack-local-variables))

(defun org-preview-xelatex ()
  (interactive)

  (let ((preview-file (emacs-etc-dir "preview/uclaling-preview.tex")))
    (set (make-local-variable 'org-preview-latex-process-alist)
         xelatex-preview-process-alist)

    (when (assoc 'latex org-babel-load-languages)
      (set (make-local-variable 'org-edit-latex-frag-master) preview-file))

    (set (make-local-variable 'org-format-latex-header)
         (read-file-contents preview-file))))
#+END_SRC

**** LuaLaTeX

#+NAME: org-preview-lualatex
#+BEGIN_SRC emacs-lisp
(defcustom lualatex-preview-header nil
  "The preamble to use for previewing LaTeX fragments with LuLaTeX."
  :type 'string)

(defcustom lualatex-preview-process-alist
  '((dvipng
     :programs
     ("lualatex" "dvipng")
     :description "dvi > png"
     :message "You need to install the programs: lualatex and dvipng"
     :image-input-type "dvi"
     :image-output-type "png"
     :image-size-adjust (1.3 1.3)
     :latex-compiler
     ("lualatex -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
    (dvisvgm
     :programs
     ("latex" "dvisvgm")
     :description "dvi > svg"
     :message "you need to install the programs: lualatex and dvisvgm."
     :use-xcolor t
     :image-input-type "xdv"
     :image-output-type "svg"
     :image-size-adjust
     (1.7 . 1.5)
     :latex-compiler
     ("lualatex -no-pdf -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("dvisvgm %f -n -b min -c %S -o %O"))
    (imagemagick
     :programs ("lualatex" "convert")
     :description "pdf > png"
     :message "You need to install lualatex and imagemagick"
     :use-xcolor t
     :image-input-type "pdf"
     :image-output-type "png"
     :image-size-adjust (1.0 1.0)
     :latex-compiler ("lualatex -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("convert -density %D -trim -antialias %f -quality 100 %O")))
  "Preview engines for lualatex."
  :type '(alist
          :tag "LaTeX to image backends"
		      :value-type (plist)))


(defun org-preview-lualatex ()
  (interactive)
  (let ((preview-file (emacs-etc-dir "preview/uclacs-preview.tex")))
    (set (make-local-variable 'org-preview-latex-process-alist)lualatex-preview-process-alist)

    (when (assoc 'latex org-babel-load-languages)
      (set (make-local-variable 'org-edit-latex-frag-master)
           preview-file))

    (set (make-local-variable 'org-format-latex-header)
         (if (org-preview/uclacs-p)
             (concat lualatex-preview-header
                     (read-file-contents preview-file))
           lualatex-preview-header))))
#+END_SRC

**** Dynamic latex previews

Generate latex fragments based on the latex compiler and class in the current buffer.

#+NAME: org-preview-dynamic
#+BEGIN_SRC emacs-lisp
(defun org-preview-with-compiler ()
  (let ((latex-compiler (org-preview/process-compiler)))
    (when-let (preview-process (org-preview/set-process))
      (set (make-local-variable 'org-preview-latex-default-process)
           preview-process))
    (when (or (string= latex-compiler "xelatex")
              (string= latex-compiler "xetex"))
      (call-interactively #'org-preview-xelatex))
    (when (string= latex-compiler "lualatex")
      (call-interactively #'org-preview-lualatex))))

(add-hook 'org-mode-hook #'org-preview-with-compiler)
#+END_SRC

*** cdlatex

#+NAME: latex-cdlatex
#+BEGIN_SRC emacs-lisp
(use-package cdlatex
  :custom
  ;; Disable auto label insertion in expanded template.
  ;; Labels conflict when used in conjunction with `org-ref'
  (cdlatex-insert-auto-labels-in-env-templates t)
  :hook
  ;; with AucTeX LaTeX mode
  ;; (LaTeX-mode . turn-on-cdlatex)
  ;; with Emacs latex mode
  ;; (latex-mode . turn-on-cdlatex)
  (org-mode . org-cdlatex-mode))
#+END_SRC

*** Edit Latex

#+NAME: org-latex-edit-latex
#+BEGIN_SRC emacs-lisp
(use-package org-edit-latex)
#+END_SRC

** Research
*** Setup

#+BEGIN_SRC emacs-lisp
(defcustom dotemacs-bibliography (expand-file-name "ref/references.bib" org-directory)
  "The default bibliography file."
  :type 'file
  :group 'dotemacs)
(defcustom dotemacs-bibliography-notes-directory (expand-file-name "ref/notes" org-directory)
  "Bibliograhpy notes directory"
  :type 'file
  :group 'dotemacs)
(defcustom dotemacs-bibliography-notes (expand-file-name "ref/notes.org")
  "Bib notes file"
  :type 'file
  :group 'dotemacs)
(defcustom dotemacs-bibliography-notes-template
  "** %y - %t
    :PROPERTIES:
    :Custom_ID: %k
    :AUTHOR: %9a
    :JOURNAL: %j
    :YEAR: %y
    :VOLUME: %v
    :PAGES: %p
    :DOI: %D
    :URL: %U
    :END:

"
  "Bib notes format"
  )





#+END_SRC
*** Citations

**** BibTeX

#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :custom
  (bibtex-BibTeX-entry-alist
   '(("Article" "Article in Journal"
      (("author")
       ("title" "Title of the article (BibTeX converts it to lowercase)"))
      (("journal")
       ("year"))
      (("volume" "Volume of the journal")
       ("number" "Number of the journal (only allowed if entry contains volume)")
       ("pages" "Pages in the journal")
       ("month")
       ("note")))
     ("InProceedings" "Article in Conference Proceedings"
      (("author")
       ("title" "Title of the article in proceedings (BibTeX converts it to lowercase)"))
      (("booktitle" "Name of the conference proceedings")
       ("year"))
      (("editor")
       ("volume" "Volume of the conference proceedings in the series")
       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
       ("series" "Series in which the conference proceedings appeared")
       ("pages" "Pages in the conference proceedings")
       ("month")
       ("address")
       ("organization" "Sponsoring organization of the conference")
       ("publisher" "Publishing company, its location")
       ("note")))
     ("Conference" "Article in Conference Proceedings"
      (("author")
       ("title" "Title of the article in proceedings (BibTeX converts it to lowercase)"))
      (("booktitle" "Name of the conference proceedings")
       ("year"))
      (("editor")
       ("volume" "Volume of the conference proceedings in the series")
       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
       ("series" "Series in which the conference proceedings appeared")
       ("pages" "Pages in the conference proceedings")
       ("month")
       ("address")
       ("organization" "Sponsoring organization of the conference")
       ("publisher" "Publishing company, its location")
       ("note")))
     ("InCollection" "Article in a Collection"
      (("author")
       ("title" "Title of the article in book (BibTeX converts it to lowercase)")
       ("booktitle" "Name of the book"))
      (("publisher")
       ("year"))
      (("editor")
       ("volume" "Volume of the book in the series")
       ("number" "Number of the book in a small series (overwritten by volume)")
       ("series" "Series in which the book appeared")
       ("type" "Word to use instead of \"chapter\"")
       ("chapter" "Chapter in the book")
       ("pages" "Pages in the book")
       ("edition" "Edition of the book as a capitalized English word")
       ("month")
       ("address")
       ("note")))
     ("InBook" "Chapter or Pages in a Book"
      (("author" nil nil 0)
       ("editor" nil nil 0)
       ("title" "Title of the book")
       ("chapter" "Chapter in the book"))
      (("publisher")
       ("year"))
      (("volume" "Volume of the book in the series")
       ("number" "Number of the book in a small series (overwritten by volume)")
       ("series" "Series in which the book appeared")
       ("type" "Word to use instead of \"chapter\"")
       ("address")
       ("edition" "Edition of the book as a capitalized English word")
       ("month")
       ("pages" "Pages in the book")
       ("note")))
     ("Proceedings" "Conference Proceedings"
      (("title" "Title of the conference proceedings")
       ("year"))
      nil
      (("booktitle" "Title of the proceedings for cross references")
       ("editor")
       ("volume" "Volume of the conference proceedings in the series")
       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
       ("series" "Series in which the conference proceedings appeared")
       ("address")
       ("month")
       ("organization" "Sponsoring organization of the conference")
       ("publisher" "Publishing company, its location")
       ("note")))
     ("Book" "Book"
      (("author" nil nil 0)
       ("editor" nil nil 0)
       ("title" "Title of the book"))
      (("publisher")
       ("year"))
      (("volume" "Volume of the book in the series")
       ("number" "Number of the book in a small series (overwritten by volume)")
       ("series" "Series in which the book appeared")
       ("address")
       ("edition" "Edition of the book as a capitalized English word")
       ("month")
       ("note")))
     ("Booklet" "Booklet (Bound, but no Publisher)"
      (("title" "Title of the booklet (BibTeX converts it to lowercase)"))
      nil
      (("author")
       ("howpublished" "The way in which the booklet was published")
       ("address")
       ("month")
       ("year")
       ("note")))
     ("PhdThesis" "PhD. Thesis"
      (("author")
       ("title" "Title of the PhD. thesis")
       ("school" "School where the PhD. thesis was written")
       ("year"))
      nil
      (("type" "Type of the PhD. thesis")
       ("address" "Address of the school (if not part of field \"school\") or country")
       ("month")
       ("note")))
     ("MastersThesis" "Master's Thesis"
      (("author")
       ("title" "Title of the master's thesis (BibTeX converts it to lowercase)")
       ("school" "School where the master's thesis was written")
       ("year"))
      nil
      (("type" "Type of the master's thesis (if other than \"Master's thesis\")")
       ("address" "Address of the school (if not part of field \"school\") or country")
       ("month")
       ("note")))
     ("TechReport" "Technical Report"
      (("author")
       ("title" "Title of the technical report (BibTeX converts it to lowercase)")
       ("institution" "Sponsoring institution of the report")
       ("year"))
      nil
      (("type" "Type of the report (if other than \"technical report\")")
       ("number" "Number of the technical report")
       ("address")
       ("month")
       ("note")))
     ("Manual" "Technical Manual"
      (("title" "Title of the manual"))
      nil
      (("author")
       ("organization" "Publishing organization of the manual")
       ("address")
       ("edition" "Edition of the manual as a capitalized English word")
       ("month")
       ("year")
       ("note")))
     ("Unpublished" "Unpublished"
      (("author")
       ("title" "Title of the unpublished work (BibTeX converts it to lowercase)")
       ("note"))
      nil
      (("month")
       ("year")))
     ("Misc" "Miscellaneous" nil nil
      (("author")
       ("title" "Title of the work (BibTeX converts it to lowercase)")
       ("howpublished" "The way in which the work was published")
       ("month")
       ("year")
       ("note")))
     ("Online" "Online Resource"
      (("author" nil nil 0)
       ("editor" nil nil 0)
       ("title" nil nil nil)
       ("year" nil nil 1)
       ("date" nil nil 1)
       ("url" nil nil nil))
      nil
      (("subtitle" nil nil)
       ("titleaddon" nil nil)
       ("language" nil nil)
       ("howpublished" nil nil)
       ("type" nil nil)
       ("version" nil nil)
       ("note" nil nil)
       ("organization" nil nil)
       ("location" nil nil)
       ("date" nil nil)
       ("month" nil nil)
       ("year" nil nil)
       ("addendum" nil nil)
       ("pubstate" nil nil)
       ("doi" nil nil)
       ("eprint" nil nil)
       ("eprintclass" nil nil)
       ("eprinttype" nil nil)
       ("url" nil nil)
       ("urldate" nil nil)))))
  (bibtex-autokey-year-length 4)
  (bibtex-autokey-name-year-separator "-")
  (bibtex-autokey-year-title-separator "-")
  (bibtex-autokey-titleword-separator "-")
  (bibtex-autokey-titlewords 2)
  (bibtex-autokey-titlewords-stretch 1)
  (bibtex-autokey-titleword-length 5)
  :config
  (defun bibtex-create-entries-buffer ()
  "Create a buffer listing the available bibtex
entry types and required fields."
  (interactive)
  (let ((buf (get-buffer-create "*BibTeX Entries*")))
    (with-current-buffer buf
      (org-mode)
      (insert "#+TITLE: BibTeX specification\n")
      (insert "* Entries\n")
      (loop for (type doc required crossref optional) in bibtex-BibTeX-entry-alist
            do
            (insert (format "\n** %s (%s)\n" type doc))
            (insert "\n*** Required fields\n\n")
            (loop for field in required do
	                (insert (format "- %s" (car field)))
	                (message "%s" field)
	                (if (>= (length field) 2)
		                  (insert (format " :: %s\n" (nth 1 field)))
	                  (insert "\n")))
            (insert "\n*** Optional if Crossref present but otherwise required fields\n\n")
            (loop for field in crossref do
	                (insert (format "- %s" (car field)))
	                (if (>= (length field) 2)
		                  (insert (format " :: %s\n" (nth 1 field)))
	                  (insert "\n")))
            (insert "\n*** Optional fields\n\n")
            (loop for field in optional do
	                (insert (format "- %s" (car field)))
	                (if (>= (length field) 2)
		                  (insert (format " :: %s\n" (nth 1 field)))
	                  (insert "\n")))))
    (switch-to-buffer-other-window buf)))
  :hook
  (bibtex-mode . hs-minor-mode))

#+END_SRC

**** Google Scholar

#+BEGIN_SRC emacs-lisp
(use-package gscholar-bibtex
  :init
  (with-eval-after-load 'reftex
    (setq gscholar-bibtex-database-file (car reftex-default-bibliography))))
#+END_SRC

**** Org Ref
:PROPERTIES:
:ID:       1038C1B0-F5E1-4246-A360-B29BFBA82AC2
:END:

#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :straight (org-ref :type git
                     :host github
                     :files
                     (:defaults "org-ref.org" "org-ref.bib" "citeproc" "org-ref-pkg.el")
                     :repo "jkitchin/org-ref"
                     :fork (:host github :repo org-ref "jchaffin/org-ref"))
  :after ivy
  :commands (org-ref-org-menu)
  :custom
  (org-ref-completion-library 'org-ref-ivy-cite)
  (org-ref-default-bibliography (list (org-dir "ref/references.bib")))
  (org-ref-bibliography-notes (org-dir "ref/notes.org"))
  (org-ref-notes-directory (org-dir "ref/notes"))
  (org-ref-pdf-directory (dropbox-dir "Documents/pdfs/" :slash t))
  (org-ref-note-tilte-format
   "** %y - %t
  :PROPERTIES:
  :Custom_ID: %k
  :AUTHOR: %9a
  :JOURNAL: %j
  :YEAR: %y
  :VOLUME: %v
  :PAGES: %p
  :DOI: %D
  :URL: %U
  :END:

")
  (org-ref-show-citation-on-enter t)
  (org-ref-show-broken-links t)
    (org-ref-ref-types '("ref" "eqref" "pageref" "nameref"
                       "autoref" "cref" "Cref" "vref"))
  :init
  (setq org-latex-prefer-user-labels t)
  ;; https://github.com/jkitchin/org-ref/issues/428
  (progn
    (require 'doi-utils)
    (require 'org-ref-url-utils)
    (require 'org-id)
    (require 'org-ref-latex)
    (require 'org-ref-bibtex)
    (require 'org-ref-pdf)
    (require 'org-ref-scopus)
    (require 'org-ref-isbn)
    (require 'org-ref-pubmed)
    (require 'org-ref-arxiv)
    (require 'org-ref-sci-id)
    (require 'org-ref-wos)
    (require 'org-ref-worldcat)
    (require 'x2bib)
    (require 'ivy-bibtex))
  (require 'org-ref)
  :config
  (bind-key "C-c r" 'org-ref-bibtex-hydra/body bibtex-mode-map)
  (with-eval-after-load 'org-ref
    (defun org-ref-vref-export (keyword desc format)
     "An export function for vref links."
     (cond
      ((eq format 'html)
       (format "<a href=\"#%s\">%s</a>" keyword (or desc keyword)))
      ((eq format 'latex) (format "\\vref{%s}" keyword))
      (eq format 'md) (format "[%s](#%s)" keyword keyword)))

    (defface org-ref-vref-face
      `((t (:inherit org-link :foreground "dark khaki")))
      "Face for ref links in org-ref.")

    (defun org-ref-vref-face-fn (label)
      "Return a face for a ref link."
      (save-match-data
        (cond ((or (not org-ref-show-broken-links)
	                 (member label (org-ref-get-labels)))
               'org-ref-vref-face)
              (t 'font-lock-warning-face))))

    (org-ref-link-set-parameters "vref"
      :follow #'org-ref-ref-follow
      :export #'org-ref-vref-export
      :complete #'org-ref-complete-link
      :face 'org-ref-vref-face-fn
      :help-echo #'org-ref-ref-help-echo)

    (remove-hook 'org-ref-clean-bibtex-entry-hook 'orcb-check-journal))

  (defun org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
           (key (car results))
           (pdf-file (funcall org-ref-get-pdf-filename-function key)))
      (if (file-exists-p pdf-file)
          (find-file pdf-file)
        (message "No PDF found for %s" key))))
  (setq org-ref-open-pdf-function 'org-ref-open-pdf-at-point))
#+END_SRC

**** Ebib
#+BEGIN_SRC emacs-lisp
(use-package ebib)
#+END_SRC

*** PDFs
**** PDF Tools

[[https://github.com/politza/pdf-tools][PDF Tools]] adds several features and enhancements for interacting with
PDF documents in Emacs. It serves as a replacement for DocView mode.

Credits to Dr. Ben Maughan over at Pragmatic Emacs for this
[[http://pragmaticemacs.com/category/emacs/][blogpost]] demonstrating how to get the most out of this package.

#+NAME: pdf/tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :mode (("\\.pdf\\'" . pdf-view-mode))
  :bind (:map pdf-view-mode-map
              ("C-s" . isearch-forward)
              ;; PDF View annotions
              ("+"   . pdf-view-enlarge)
              ("h"   . pdf-annot-add-highlight-markup-annotation)
              ("t"   . pdf-annot-add-text-annotation)
              ("D"   . pdf-annot-delete))
  :init
  (pdf-tools-install)
  :config
  (setq-default pdf-view-display-size 'fit-page)
  :custom
  (pdf-annot-activate-created-annotations t)
  (pdf-view-resize-factor 2))
#+END_SRC

**** Org PDF View

Now we can open pdf files with =org-pdfview= [fn:10]:

#+NAME: pdf/org
#+BEGIN_SRC emacs-lisp
  (use-package org-pdfview
    :after (:all pdf-tools)
    :demand t
    :init
    (defun ofa/pdf-open ()
      "Open Org mode links to pdf files in Emacs rather than the
  system viewer."
      (add-to-list 'org-file-apps
                   '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link)))))
    :hook
    (org-mode . ofa/pdf-open))
#+END_SRC

**** Pdf Extras

** Outlines
*** Navi

#+BEGIN_SRC emacs-lisp
(use-package navi)
#+END_SRC

*** Outshine
#+BEGIN_SRC emacs-lisp
(use-package outshine
  :init
  (defvar outline-minor-mode-prefix "\M-#")
  :config
  (setq outshine-use-speed-commands t)
  :hook
  ((emacs-lisp-mode lisp-mode) . outshine-mode))
#+END_SRC
*** foldout
:PROPERTIES:
:ID:       7A037F3A-7569-44C4-858A-B298381AC21D
:END:

~foldout.el~, which is part of Emacs, is a nice little companion for
~outline-mode~.  With ~foldout.el~ one can narrow to a subtree and
later unnarrow.  ~foldout.el~ is useful for Org mode out of the box.

There is one annoyance though (at least for me):
~foldout-zoom-subtree~ opens the drawers.

This can be fixed e.g. by using the following slightly modified
version of ~foldout-zoom-subtree~ which uses function ~org-show-entry~
instead of ~outline-show-entry~.

#+BEGIN_SRC emacs-lisp
  (defun foldout-zoom-org-subtree (&optional exposure)
    "Same as `foldout-zoom-subtree' with often nicer zoom in Org mode."
    (interactive "P")
    (cl-letf
        (((symbol-function #'outline-show-entry) (lambda () (org-show-entry))))
      (foldout-zoom-subtree exposure)))
#+END_SRC

*** Org Links :structure:

**** Prompt for description
#+begin_src emacs-lisp
(defun org-link-describe (link desc)
  (if (file-exists-p link)
      desc
    (read-string "Description: " desc)))

(setf org-make-link-description-function #'org-link-describe)
#+end_src

**** Tag links


#+NAME: org-links-tags
#+BEGIN_SRC emacs-lisp
(defun dotemacs/tag-link (tag)
  "Display a list of TODO headlines with tag TAG.
With prefix argument, also display headlines without a TODO keyword."
  (org-tags-view (null current-prefix-arg) tag))

(org-add-link-type
 "tag" 'dotemacs/tag-link)
#+END_SRC

**** Replace link by link description

#+BEGIN_SRC emacs-lisp
(defun afs/org-replace-link-by-link-description ()
    "Replace an org link by its description or if empty its address"
  (interactive)
  (if (org-in-regexp org-bracket-link-regexp 1)
      (let ((remove (list (match-beginning 0) (match-end 0)))
        (description (if (match-end 3)
                 (org-match-string-no-properties 3)
                 (org-match-string-no-properties 1))))
    (apply 'delete-region remove)
    (insert description))))
(bind-key "C-c C-M-u" 'afs/org-replace-link-by-link-description)
#+END_SRC

**** Browse url links

#+BEGIN_SRC emacs-lisp
(defun org-extract-link ()
  "Extract the link location at point and put it on the killring."
  (interactive)
  (when (org-in-regexp org-bracket-link-regexp 1)
    (kill-new (org-link-unescape (org-match-string-no-properties 1)))))

(defun browse-url-extract-org-link (orig-fun &rest args)
  "If `thing-at-point' is a org-link, then call `org-extract-link'
  and apply ORIG-FUN with the extracted url in the car of original ARGS."
  (when (and (eq major-mode 'org-mode)
             (string= (car (org-thing-at-point)) "link"))
    (setcar args (org-extract-link)))
  (apply orig-fun args))

(advice-add 'browse-url :around #'browse-url-extract-org-link)

#+END_SRC

**** Org Elisp Help Links

#+NAME: org-links-elisp-help
#+BEGIN_SRC emacs-lisp
(use-package org-elisp-help)
#+END_SRC

**** YouTube links

From [[http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html][Endless Parentheses]] blogpost:

Embed YouTube Links in =iframe=.

#+NAME: org-links-youtube
#+BEGIN_SRC emacs-lisp
(org-link-set-parameters
 "youtube"
 :follow (lambda (path)
	   (browse-url (format "https://youtu.be/%s" path)))
 :export (lambda (path desc backend)
	   (cond
	    ((eq 'md backend)
	     (format "[%s](%s)

<a href=\"https://www.youtube.com/watch?v=%s\">
<img src=\"http://img.youtube.com/vi/%s/0.jpg\"></a>"
		     (or desc (format "https://youtu.be/%s" path))
		     (format "https://youtu.be/%s" path)
		     path path))))
 :help-echo "A youtube video. Click to open in browser.")

#+END_SRC

**** org link minor mode

#+NAME: org-links-minor
#+BEGIN_SRC emacs-lisp
(use-package org-link-minor-mode
  :hook (prog-mode . org-link-minor-mode))
#+END_SRC

**** Latex links

#+NAME: org-links-latex
#+BEGIN_SRC emacs-lisp
;; From https://orgmode.org/worg/org-tutorials/org-latex-export.html
(org-add-link-type
 "latex" nil
 (lambda (path desc format)
   (cond
    ((eq format 'html)
     (format "<span class=\"%s\">%s</span>" path desc))
    ((eq format 'latex)
     (format "\\%s{%s}" path desc)))))

(org-add-link-type
 "latex-opt" nil
 (lambda (path desc format)
   (when (eq format 'latex)
     (let* ((desc-list (split-string desc ";"))
            (opt (nth 1 desc-list))
            (arg (nth 0 desc-list)))
       (format "\\%s%s{%s}" path
               (if (equal "" opt) opt (format "[%s]" opt))
               arg)))))
;; See https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg00982.html
(setq org-latex-link-with-unknown-path-format "\\textsc{%s}")
#+END_SRC

**** Org Bookmark Heading

#+NAME: org-links-bookmark
#+BEGIN_SRC emacs-lisp
(use-package org-bookmark-heading)
#+END_SRC

**** Check for possibly problematic old link escapes
:PROPERTIES:
:ID:       628ECB9A-4F8A-453E-8521-318C008FD287
:END:

#+BEGIN_SRC emacs-lisp
(defun org-check-percent-escapes ()
  "*Check buffer for possibly problematic old link escapes."
  (interactive)
  (when (eq major-mode 'org-mode)
    (let ((old-escapes '("%20" "%5B" "%5D" "%E0" "%E2" "%E7" "%E8" "%E9"
                         "%EA" "%EE" "%F4" "%F9" "%FB" "%3B" "%3D" "%2B")))
      (unless (boundp 'warning-suppress-types)
        (setq warning-suppress-types nil))
      (widen)
      (show-all)
      (goto-char (point-min))
      (while (re-search-forward org-any-link-re nil t)
        (let ((end (match-end 0)))
          (goto-char (match-beginning 0))
          (while (re-search-forward "%[0-9a-zA-Z]\\{2\\}" end t)
            (let ((escape (match-string-no-properties 0)))
              (unless (member (upcase escape) old-escapes)
                (warn "Found unknown percent escape sequence %s at buffer %s, position %d"
                      escape
                      (buffer-name)
                      (- (point) 3)))))
          (goto-char end))))))
#+END_SRC

**** Org occur open

#+BEGIN_SRC emacs-lisp
(defun org-occur-open (uri)
  "Visit the file specified by URI, and run `occur' on the fragment
  (anything after the first '#') in the uri."
  (let ((list (split-string uri "#")))
    (org-open-file (car list) t)
    (occur (mapconcat 'identity (cdr list) "#"))))
(org-add-link-type "occur" 'org-occur-open)
#+END_SRC

** Org Coding
*** Org Babel
:PROPERTIES:
:ID:       8209391F-1D45-46CC-8184-78F393D467CA
:END:

#+BEGIN_SRC emacs-lisp
(use-package ob
  :straight org-plus-contrib
  :custom
  (org-babel-uppercase-example-markers t)
  :config
  (defun org-babel-remove-result-buffer ()
    "Remove results from every code block in buffer."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward org-babel-src-block-regexp nil t)
        (org-babel-remove-result)))))
#+END_SRC

**** Ob Http

#+NAME: org-ob-http
#+BEGIN_SRC emacs-lisp
  (use-package ob-http
    :after (ob)
    :demand t)
#+END_SRC

**** Ob async

#+BEGIN_SRC emacs-lisp
  (use-package ob-async)
#+END_SRC

**** Ob Diagrams

#+BEGIN_SRC emacs-lisp
(use-package ob-diagrams)
#+END_SRC

**** Load Languages
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (clojure . t)
       (dot . t)
       (ditaa . t)
       (http . t)
       (latex . t)
       (lisp . t)
       (perl . t)
       (python . t)
       (plantuml . t)
       (java . t)
       (ruby . t)
       (R . t)
       (shell . t)
       (org . t))))
#+END_SRC

*** Library of Babel

#+BEGIN_SRC emacs-lisp
(defvar lob-directory (directory-file-name (no-littering-expand-etc-file-name "lob"))
  "Directory where library of babel org files reside.")

(unless (file-directory-p lob-directory)
  (make-directory lob-directory t))

(defun load-lob ()
  "Load the library of babel files."
  (interactive)
  (cl-loop for org-file in (f-entries lob-directory (lambda (f) (f-ext? f "org")) t)
	   do
	   (message "ingesting %s" org-file)
	   (org-babel-lob-ingest org-file)))

(load-lob)
#+END_SRC

*** Org speed commands

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-speed-commands-user (cons "P" 'org-set-property))
(add-to-list 'org-speed-commands-user (cons "d" 'org-deadline))

;; Mark a subtree
(add-to-list 'org-speed-commands-user (cons "m" 'org-mark-subtree))

;; Widen
(add-to-list 'org-speed-commands-user (cons "S" 'widen))

;; kill a subtree
(add-to-list 'org-speed-commands-user (cons "k" (lambda ()
						  (org-mark-subtree)
						  (kill-region
						   (region-beginning)
						   (region-end)))))

;; Jump to headline
(add-to-list 'org-speed-commands-user
	     (cons "q" (lambda ()
			 (avy-with avy-goto-line
			   (avy--generic-jump "^\\*+" nil avy-style)))))

(defun org-teleport (&optional arg)
  "Teleport the current heading to after a headline selected with avy.
With a prefix ARG move the headline to before the selected
headline. With a numeric prefix, set the headline level. If ARG
is positive, move after, and if negative, move before."
  (interactive "P")
  ;; Kill current headline
  (org-mark-subtree)
  (kill-region (region-beginning) (region-end))
  ;; Jump to a visible headline
  (avy-with avy-goto-line (avy--generic-jump "^\\*+" nil avy-style))
  (cond
   ;; Move before  and change headline level
   ((and (numberp arg) (> 0 arg))
    (save-excursion
      (yank))
    ;; arg is what we want, second is what we have
    ;; if n is positive, we need to demote (increase level)
    (let ((n (- (abs arg) (car (org-heading-components)))))
      (cl-loop for i from 1 to (abs n)
	       do
	       (if (> 0 n)
		   (org-promote-subtree)
		 (org-demote-subtree)))))
   ;; Move after and change level
   ((and (numberp arg) (< 0 arg))
    (org-mark-subtree)
    (goto-char (region-end))
    (when (eobp) (insert "\n"))
    (save-excursion
      (yank))
    ;; n is what we want and second is what we have
    ;; if n is positive, we need to demote
    (let ((n (- (abs arg) (car (org-heading-components)))))
      (cl-loop for i from 1 to (abs n)
	       do
	       (if (> 0 n) (org-promote-subtree)
		 (org-demote-subtree)))))

   ;; move to before selection
   ((equal arg '(4))
    (save-excursion
      (yank)))
   ;; move to after selection
   (t
    (org-mark-subtree)
    (goto-char (region-end))
    (when (eobp) (insert "\n"))
    (save-excursion
      (yank))))
  (outline-hide-leaves))

(add-to-list 'org-speed-commands-user (cons "T" 'org-teleport))
#+END_SRC

** Org Tasks
*** ID

#+BEGIN_SRC emacs-lisp
(use-package org-id
  :straight org-plus-contrib
  :custom
  (org-id-link-to-org-use-id 'create-if-interactive)
  (org-link-search-must-match-exact-headline 'query-to-create)
  (org-id-locations-file
   (expand-file-name "var/org/id-locations.el" user-emacs-directory))
  :demand t)
#+END_SRC

**** Attach

#+NAME: org-docmgr-attach
#+BEGIN_SRC emacs-lisp
  (use-package org-attach
    :straight org-plus-contrib
    :custom
    (org-attach-auto-tag "attach")
    (org-attach-store-link-p t))
#+END_SRC

*** Capture :tasks:

#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :straight org-plus-contrib
  :custom
  (org-default-notes-file (expand-file-name "notes.org" org-directory))
  :preface
  (defvar org-contacts-template
    (mapconcat #'identity
               '("* %(org-contacts-template-name)"
                ":PROPERTIES:"
                ":EMAIL: %(org-contacts-template-email)"
                ":PHONE:"
                ":ALIAS:"
                ":NICKNAME:"
                ":IGNORE:"
                ":ICON:"
                ":NOTE: %^{NOTE}"
                ":ALIAS:"
                ":BIRTHDAY:"
                ":END:") "\n")
    "Template for org-contacts.")
  :init
  (with-eval-after-load 'org-capture
    (setq org-capture-templates
          `(("l" "Protocol Link" entry
             (file+headline ,org-default-notes-file "Inbox")
             "* [[%:link][%:description]] \n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?\n")
            ("t" "Global Todo" entry (file+headline "~/Dropbox/org/agenda/TODOs.org" "Tasks")
             "* ☛ TODO %?\n  %i\n  %a")
            ("j" "Journal" entry (file+olp+datetree "~/Dropbox/org/journal.org")
             "* %?\nEntered on %U\n  %i\n  %a")
            ("c" "Contact" entry (file "contacts.org")
             ,org-contacts-template
             :empty-lines 1))))
  :config
  (advice-add 'org-capture :around #'org-pretty-tags-inhibit-overlays))
#+END_SRC

**** Alfred capture
:PROPERTIES:
:ID:       A54EEE41-A32C-468D-A736-9CF314311FF6
:END:

#+BEGIN_SRC emacs-lisp
(defun make-orgcapture-frame ()
  (interactive)
  (make-frame
   '((name . " *alfred capture*")
     (width . 80) (height . 16)
     (top . 400) (left . 300)
     (font . "-*-Fira Code-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1" )
     (select-frame-by-name " *alfred capture*")
     (org-capture))))
#+END_SRC

*** Habit

#+BEGIN_SRC emacs-lisp
(use-package org-habit
  :straight org-plus-contrib)
#+END_SRC

*** Agenda

I use per-project agenda files for the most part (now being managed
using [[#org-projectile][org-projectile]]), but I like having a designated global one for miscellaneous or arbitrary tasks.


#+NAME: agenda/org-agenda
#+BEGIN_SRC emacs-lisp
(use-package org-agenda
  :straight org-plus-contrib
  :demand t
  :custom-face
  (org-agenda-date
   ((t (:underline nil :foreground "#57c7ff" :inherit (variable-pitch)))))
  (org-agenda-calendar-event
   ((t (:foreground "#cc9393" :inherit (default)))))
  :custom
  ;; Agenda Files
  (org-agenda-diary-file (expand-file-name "diary.org" org-directory))
  (org-agenda-category-icon-alist
   `(("global"     ,(list "")  nil nil :ascent center)
     ("schedule"   ,(list "📅")   nil nil :ascent center)
     ("LING 165C"  ,(list "⟦ ⟧")  nil nil :ascent center)
     ("LING 102"   ,(list "🗣")  nil nil :ascent center)
     ("COMSCI 161" ,(list "♟") nil nil :ascent center)
     ("COMSCI 131" ,(list "💻") nil nil :ascent center)))
  ;; Agenda startup
  (org-agenda-inhibit-startup t)
  ;; Org skip
  (org-agenda-skip-unavailable-files t)
  (org-agenda-skip-scheduled-if-deadline-is-shown t)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-timestamp-if-done t)
  (org-agenda-skip-scheduled-delay-if-deadline 21) ;; ignore if 21 days after scheduled
  ;; Ignore
  (org-agenda-todo-ignore-scheduled t)
  (org-agenda-todo-ignore-deadlines t)
  (org-agenda-todo-ignore-timestamp t)
  (org-agenda-todo-ignore-with-date t)
;; TODO keywords
  (org-todo-keywords
   '((sequence "☛ TODO(t)" "|" " DONE(d)" )
     (sequence "|" "✘ CANCELLED(c)")))
  (org-todo-keyword-faces
   '(("✘ CANCELLED" . (:foreground "yellow"))
     (" DONE" . org-done)
     ("☛ TODO" . org-todo)))
  ;; Org Tags
  (org-tags-column 0)
  (org-complete-tags-always-offer-all-agenda-tags t)
  ;; Agenda sort
  (org-sort-agenda-notime-is-late nil)
  ;; Agenda View
  (org-agenda-block-separator "─")
  (org-agenda-remove-tags t)
  (org-agenda-time-leading-zero t)

  (org-agenda-columns-add-appointments-to-effort-sum t)
  (org-agenda-mouse-1-follows-link t)
  ;; http://cachestocaches.com/2016/9/my-workflow-org-agenda/
  ;; Org Refile
  (org-refile-targets (quote ((nil  :maxlevel . 9)
                              (org-agenda-files :maxlevel . 9))))
  :init
  (defun agenda-skip-cancelled ()
    (org-agenda-skip-entry-if 'todo '("✘ CANCELLED")))
  (setq org-agenda-skip-function-global #'agenda-skip-cancelled)
  ;; Agenda File Faces
  (defvar-local org-use-level-faces nil)
  (defvar org-level-remap-face nil)
  (defun halidom/remap-org-level-faces ()
    "Use minimal foreground face in `org-agenda-files' buffers."
    (let ((foreground (face-foreground 'default nil 'default)))
      (unless org-use-level-faces
        (mapcar
         (lambda (face)
           (add-to-list 'org-level-remap-face
                        (face-remap-add-relative
                         face
                         :foreground foreground)))
         org-level-faces)
        (setq-local org-use-level-faces t))))
  (defun org-agenda-file-face ()
    (cond ((org-agenda-file-p) (halidom/remap-org-level-faces))
          (org-use-level-faces
           (mapcar
            (lambda (f)
              (setq face-remapping-alist (delq f face-remapping-alist)))
            org-level-remap-face))))
  (add-hook 'org-mode-hook #'org-agenda-file-face)
  (defvar halidom/default-agenda-file "~/Dropbox/org/todos/TODOs.org"
    "The file path of the default agenda file.")
  (when (file-exists-p halidom/default-agenda-file)
    (add-to-list 'org-agenda-files halidom/default-agenda-file)))
#+END_SRC

**** Super agenda

#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda)
#+END_SRC

**** Agenda ng

#+NAME: agenda/ng
#+BEGIN_SRC emacs-lisp
(use-package org-agenda-ng
  :straight
  (org-agenda-ng :host github
                 :repo "alphapapa/org-agenda-ng"
                 :files ("org-agenda-ng.el")))

#+END_SRC

**** Org ql

#+BEGIN_SRC emacs-lisp
(use-package org-ql
    :straight
    (org-ql
      :type git
      :host github
      :repo "alphapapa/org-agenda-ng"
      :files ("org-ql.el")))
#+END_SRC

***** QL Agenda

#+BEGIN_SRC emacs-lisp
(use-package org-ql-agenda
    :straight
    (org-ql-agenda
      :type git
      :host github
      :repo "alphapapa/org-agenda-ng"
      :files ("org-ql-agenda.el")))
#+END_SRC

**** Org Sidebar

#+NAME: agenda/sidebar
#+BEGIN_SRC emacs-lisp
(use-package org-sidebar
  :straight
  (org-sidebar
   :host github
   :repo "alphapapa/org-sidebar")
  :init
  (require 'org-ql)
  (require 'dash-functional)
  (require 'org-sidebar)
  :config
  (cl-defmacro course-sidebar (name description)
    `(progn
       (org-sidebar-defsidebar
         ,(intern (concat name "/sidebar"))
         :header ,description
         :sidebars (((and (not (done))
                          (todo)
                          (or (deadline <=)
                              (scheduled <=))
                          (not (tags "optional")))))
         :super-groups
         ',(append
            '((:name "❗️Overdue" :scheduled past :deadline past)
              (:name " Today" :scheduled today :deadline today)))
         :files ,(expand-file-name
                  (concat "~/Dropbox/courses/" name "/" name ".org")))
       (defun ,(intern (concat name "-sidebar")) ()
         (interactive)
         (funcall ',(intern (concat name "/sidebar"))))))
  (defvar org-course-courses
    '(("comsci161" . "Intro to A.I.")
      ("comsci131" . "Programming Languages")
      ("ling165c"  . "Semantics II")
      ("ling102"   . "Phonetics")))
    (cl-loop for (course . description) in org-course-courses do
           (eval `(course-sidebar ,course ,description))))
#+END_SRC

**** Org Now


#+BEGIN_SRC emacs-lisp
(use-package org-now
  :straight (org-now
             :type git
             :host github
             :repo "alphapapa/org-now"))
#+END_SRC

**** Org Timeline


#+NAME: emacs-lisp
#+BEGIN_SRC emacs-lisp
(use-package org-timeline
  :init
  (require 'org-timeline)
  :config
  (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append))
#+END_SRC

**** Org Projectile
:PROPERTIES:
:ID:       D469E868-7FCB-45FD-AB3E-609018F4BC58
:CUSTOM_ID: org-projectile
:END:

#+NAME: org-taskmgr-projectile
#+BEGIN_SRC emacs-lisp
(use-package org-projectile
  :commands (org-projectile-files-to-agenda org-projectile-per-project-function)
  :after (:all projectile org-agenda)
  :bind (:map projectile-command-map
              ("n" . org-projectile-project-todo-completing-read))
  :custom
  (org-projectile-per-project-filepath #'org-projectile-per-project-function)
  (org-projectile-capture-template "* ☛ TODO %?\n  %i\n  %a")
  :init
  (defun org-projectile-per-project-function (project-path)
    (let  ((project-agenda-file
            (--> project-path (split-string it "/" t) nreverse car (concat it ".org"))))
      (if (file-exists-p (expand-file-name project-agenda-file project-path))
          project-agenda-file "TODOs.org")))
  (defvar-local org-default-agenda-file
    (file-truename "~/Dropbox/org/todos/TODOS.org"))
  (defun org-projectile-files-to-agenda ()
    "Add projectile project files to agenda."
    (interactive)
    (cl-flet*
        ((project-agenda-filepath (p)
                                  (expand-file-name
                                   (funcall #'org-projectile-per-project-function p) p))
         (todo-file-p (p)
                      (file-exists-p (project-agenda-filepath p)))
         (build-agenda (ps)
                       (setq org-agenda-files
                             (seq-uniq (append org-agenda-files ps)))))
      (->> projectile-known-projects
         (seq-filter #'todo-file-p)
         (mapcar #'project-agenda-filepath)
         build-agenda)))
  :hook
  ((org-agenda-mode dashboard-mode) . org-projectile-files-to-agenda)
  :config
  (org-projectile-per-project))

#+END_SRC


*** Calendar
**** Google Calendar


The [[https://github.com/myuhe/org-gcal.el][org-gcal]] package provides org-mode integration with Google
Calendar.

#+NAME: org-taskmgr-gcal
#+BEGIN_SRC emacs-lisp
  (use-package org-gcal
    :preface
    (defvar gcal-agenda-file (org-dir "agenda/schedule.org"))
    :init
    (require 'secrets)
    (require 'org-gcal)
    :custom
    (org-gcal-file-alist
     `(("jchaffin@g.ucla.edu" . ,gcal-agenda-file)))
    :config
    (require 'org-agenda)
    (unless (member gcal-agenda-file org-agenda-files)
      (add-to-list 'org-agenda-files gcal-agenda-file)))
#+END_SRC

**** Google maps

#+NAME: org-taskmgr-maps
#+BEGIN_SRC emacs-lisp
(use-package google-maps)
#+END_SRC

**** calfw

#+NAME: org-taskmgr-calfw
#+BEGIN_SRC emacs-lisp
(use-package calfw
  :custom-face
  (cfw:face-title              ((t (:height 2.0 :weight bold :inherit (variable-pitch)))))
  (cfw:face-grid               ((t (:foreground "DarkGrey"))))
  (cfw:face-header             ((t (:weight bold :foreground "red"))))
  (cfw:face-day-title          ((t (:weight bold))))
  (cfw:face-select             ((t (:background "#0195FF"))))
  (cfw:face-today              ((t (:weight bold :background "#182633"))))
  (cfw:face-toolbar            ((t (:background "#3B3B3B"))))
  (cfw:face-holiday            ((t (:weight bold :background "#51481F"))))
  (cfw:face-sunday             ((t (:inherit (cfw:face-saturday)))))
  (cfw:face-toolbar-button-off ((t (:weight bold :background "Gray10"))))
  (cfw:face-toolbar-button-on  ((t (:background "red"))))
  :custom
  (cfw:render-line-breaker 'cfw:render-line-breaker-wordwrap)
  (cfw:display-calendar-holidays nil)
  (cfw:fchar-junction ?╋)
  (cfw:fchar-vertical-line ?┃)
  (cfw:fchar-horizontal-line ?━)
  (cfw:fchar-left-junction ?┣)
  (cfw:fchar-right-junction ?┫)
  (cfw:fchar-top-junction ?┯)
  (cfw:fchar-top-left-corner ?┏)
  (cfw:fchar-top-right-corner ?┓)

  :hook
  (cfw:details-mode . org-link-minor-mode))

(use-package calfw-org
  :demand t
  :init
  (require 'calfw)
  (defun cfw:open-calendar ()
   (interactive)
   (let ((cp
          (cfw:create-calendar-component-buffer
           :view 'month
           :contents-sources
           (list
            (cfw:org-create-file-source
             "⟦ ⟧ LING 165C" "~/Dropbox/courses/ling165c/ling165c.org" "#91E5DD")
            (cfw:org-create-file-source
             "🗣 LING 103" "~/Dropbox/courses/ling102/ling102.org" "purple")
            (cfw:org-create-file-source
             "💻 COMSCI 131 " "~/Dropbox/courses/comsci131/comsci131.org" "tomato1")
            (cfw:org-create-file-source
             "♟ COMSCI 161" "~/Dropbox/courses/comsci131/comsci161.org" "khaki1")
            (cfw:org-create-file-source
             "📅 Schedule" "~/Dropbox/org/agenda/schedule.org" (face-foreground 'org-agenda-calendar-event))))))

     (switch-to-buffer (cfw:cp-get-buffer cp)))))
#+END_SRC

**** Manipulate hours/minutes/seconds in table formulas
:PROPERTIES:
:ID:       6C19B664-DF90-4312-A985-20885879D722
:END:

#+BEGIN_SRC emacs-lisp
(defun org-time-string-to-seconds (s)
  "Convert a string HH:MM:SS to a number of seconds."
  (cond
   ((and (stringp s)
         (string-match "\\([0-9]+\\):\\([0-9]+\\):\\([0-9]+\\)" s))
    (let ((hour (string-to-number (match-string 1 s)))
          (min (string-to-number (match-string 2 s)))
          (sec (string-to-number (match-string 3 s))))
      (+ (* hour 3600) (* min 60) sec)))
   ((and (stringp s)
         (string-match "\\([0-9]+\\):\\([0-9]+\\)" s))
    (let ((min (string-to-number (match-string 1 s)))
          (sec (string-to-number (match-string 2 s))))
      (+ (* min 60) sec)))
   ((stringp s) (string-to-number s))
   (t s)))
(defun org-time-seconds-to-string (secs)
  "Convert a number of seconds to a time string."
  (cond ((>= secs 3600) (format-seconds "%h:%.2m:%.2s" secs))
        ((>= secs 60) (format-seconds "%m:%.2s" secs))
        (t (format-seconds "%s" secs))))

(defmacro with-time (time-output-p &rest exprs)
  "Evaluate an org-table formula, converting all fields that look
like time data to integer seconds.  If TIME-OUTPUT-P then return
the result as a time value."
  (list
   (if time-output-p 'org-time-seconds-to-string 'identity)
   (cons 'progn
         (mapcar
          (lambda (expr)
            `,(cons (car expr)
                    (mapcar
                     (lambda (el)
                       (if (listp el)
                           (list 'with-time nil el)
                         (org-time-string-to-seconds el)))
                     (cdr expr))))
          `,@exprs))))

#+END_SRC

*** Clock

**** Pomodoro
:PROPERTIES:
:ID:       3600535E-2C20-4E33-8572-E933319E87B3
:CUSTOM_ID: org-pomodoro
:END:

#+NAME: org-taskmgr-pomodoro
#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
  :bind (:map org-mode-map
              ("C-c M-RET p" . org-pomodoro))
  :config
  (defalias #'org-pomodoro-path
    (apply-partially #'emacs-etc-dir "org/pomodoro"))

  (setq org-pomodoro-audio-player "/usr/bin/afplay"
        org-pomodoro-tick-sound
        (org-pomodoro-path "clock-ticking-2.wav")
        ;; Start Settings
        org-pomodoro-start-sound-p t ;; enable starting sound
        org-pomodoro-start-sound-args "--volume 0.08"
        org-pomodoro-start-sound
        (org-pomodoro-path "Victory.wav")
        ;; Finished Settings
        org-pomodoro-finished-sound-args "--volume 0.2"
        org-pomodoro-finished-sound
        (org-pomodoro-path "Waves.wav")
        ;; Short Break Settings
        org-pomodoro-short-break-length 5
        org-pomodoro-short-break-sound-args "--volume 0.2"
        org-pomodoro-short-break-sound org-pomodoro-finished-sound
        ;; Long Break Settings
        org-pomodoro-long-break-length 15
        org-pomodoro-long-break-sound-args "--volume 0.2"
        org-pomodoro-long-break-sound
        (org-pomodoro-path "Complete.wav")))
#+END_SRC

**** org mru clock

The [[https://github.com/unhammer/org-mru-clock][org-mru-clock]] package prefills clock history with clocks from
org agenda files.

#+NAME: org-taskmgr-mru-clock
#+BEGIN_SRC emacs-lisp
(use-package org-mru-clock
  :after (:all org-agenda ivy)
  :demand t
  :bind (("C-c C-x i" . org-mru-clock-in)
         ("C-c C-x C-j" . org-mru-clock-select-recent-task))
  :init
  (progn
    (setq org-mru-clock-how-many 50
          org-mru-completing-read #'ivy-completing-read)))
#+END_SRC

Check out this [[http://mbork.pl/2018-04-28_org-mru-clock][article]] for how these two packages compare.[fn:11].

**** Org clock convenience

#+BEGIN_SRC emacs-lisp
(use-package org-clock-convenience)
#+END_SRC

**** Org Clock

#+BEGIN_SRC emacs-lisp
(use-package org-clock
  :straight org-plus-contrib
  :custom
  (org-clock-persist t)
  :init
  (org-clock-persistence-insinuate))

#+END_SRC

***

*** Org Brain

#+NAME: org-ideamgr-brain
#+BEGIN_SRC emacs-lisp
(use-package org-brain
  :if (eq system-type 'darwin)
  :defines (org-brain-path)
  :init
  (setq org-brain-path (concat (file-name-as-directory org-directory) "brain"))
  :config
  (progn
    (setq org-id-track-globally t
          org-brain-visualize-default-choices 'all
          org-brain-title-max-length 12)))
#+END_SRC

** Org Appearance

These settings subjectively improve the overall viewable-ness of
org-mode buffers.
*** Toggle Hooks

Some of the UI features I'm using are highly experimental and cause certain derived modes such as [[elisp-function:bind-key-autoloads:org-capture][org-capture]] to break.

#+BEGIN_SRC emacs-lisp
(defvar org-hook--enabled t)
(defvar org-tmp-hook nil)
(defun org-toggle-hook ()
  "Enable/disable running hooks in `org-mode-hook'."
  (interactive)
  (if org-hook--enabled
      (progn
        (setq org-tmp-hook org-mode-hook)
        (setq org-mode-hook nil))
    (setq org-mode-hook org-tmp-hook)
    (setq org-tmp-hook nil))
  (setq org-hook--enabled (not org-hook--enabled)))
#+END_SRC

*** Org indent

#+BEGIN_SRC emacs-lisp
(use-package org-indent
  :straight org-plus-contrib
  :hook (org-mode . org-indent-mode))
#+END_SRC

*** Per-image display width

#+NAME: org-ui-fixedwidth-image
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images "inlineimages") ;; default with images open
(setq org-image-actual-width nil) ;; default width
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+END_SRC

*** Inline images

#+BEGIN_SRC emacs-lisp
(defvar org-inline-image-resize-function
  #'org-inline-image-resize
  "Function that takes a filename and resize argument and returns
 a new filename pointing to the resized image.")


(defun org-inline-image-resize (fname resize-options)
  "Resize FNAME with RESIZE-OPTIONS.
RESIZE-OPTIONS are passed to \"mogrify resized-fname -resize resize-options\".
RESIZE-OPTIONS could be:

N% to scale the image by a percentage.
N to set the width, keeping the aspect ratio constant.
xN to set the height, keeping the aspect ratio constant.
NxM! to set the width and height, ignoring the aspect ratio.

See http://www.imagemagick.org/Usage/resize/#resize for more options."
  (let* ((md5-hash (with-temp-buffer (insert-file-contents fname)
				                             (insert (format "%s" resize-options))
				                             (md5 (buffer-string))))
	       (resized-fname (concat (expand-file-name
				                         md5-hash
				                         temporary-file-directory)
				                        "."
				                        (file-name-extension fname)))
	       (cmd (format "mogrify -resize %s %s"
		                  resize-options
		                  resized-fname)))
    (if (not (executable-find "mogrify"))
	      (progn
	        (message
           (concat "No mogrify executable found. To eliminate this message, "
                   "set `org-inline-image-resize-function' to nil or "
                   "install imagemagick from "
                   "http://www.imagemagick.org/script/binary-releases.php"))
	        fname)
      (unless (file-exists-p resized-fname)
	      (copy-file fname resized-fname)
	      (shell-command cmd))
      resized-fname)))
#+END_SRC

*** Org sticky header

#+BEGIN_SRC emacs-lisp
(use-package org-sticky-header
  :custom
  (org-sticky-header-heading-star "•"))

#+END_SRC

*** TOC Org

The [[https://github.com/snosov1/toc-org][toc-org]] package automatically generates a table of contents for
the org-mode document on save.

The org header represented by a TOC entry can be visited via the
=org-open-at-point= command, which is bound to the keystroke =C-c C-o=
by default.

Note that this functionality is provided by =toc-org= modifying the
value of =org-link-translation-function= to the library internal
=toc-org-unhrefify=, so it won't work if this symbol is non-nil at
time of install.

#+NAME: org-ui-toc-org
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :hook
 (org-mode . toc-org-mode))
#+END_SRC

*** Column View

#+NAME: org-ui-column-view
#+BEGIN_SRC emacs-lisp
(setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
#+END_SRC

*** Equation Renumbering

Anotha [[http://kitchingroup.cheme.cmu.edu/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode/][one]] from the kitchin group!

#+NAME: org-ui-equation-renumbering
#+BEGIN_SRC emacs-lisp
(defun org-renumber-environment (orig-func &rest args)
  (let ((results '())
        (counter -1)
        (numberp))

    (setq results
          (loop for (begin .  env) in
               (org-element-map (org-element-parse-buffer) 'latex-environment
                 (lambda (env)
                   (cons
                    (org-element-property :begin env)
                    (org-element-property :value env))))
             collect
               (cond
                 ((and (string-match "\\\\begin{equation}" env)
                     (not (string-match "\\\\tag{" env)))
                  (incf counter)
                  (cons begin counter))
                 ((string-match "\\\\begin{align}" env)
                  (prog2
                      (incf counter)
                      (cons begin counter)
                    (with-temp-buffer
                      (insert env)
                      (goto-char (point-min))
                              ;; \\ is used for a new line. Each one leads to a number
                      (incf counter (count-matches "\\\\$"))
                      ;; unless there are nonumbers.
                      (goto-char (point-min))
                      (decf counter (count-matches
                                     "\\nonumber")))))
                         (t
                          (cons begin nil)))))

    (when (setq numberp (cdr (assoc (point) results)))
      (setf (car args)
            (concat
             (format "\\setcounter{equation}{%s}\n" numberp)
             (car args)))))

  (apply orig-func args))

;; (advice-add 'org-create-formula-image
;;           :around #'org-renumber-environment)

#+END_SRC

*** Highlight inline LaTeX fragments
:PROPERTIES:
:ID:       8E0531C6-0E85-4F0A-9340-2868F54F3A6D
:END:

#+NAME: org-latex-highlight-tex
#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex))
#+END_SRC

*** Org Ellipsis

#+BEGIN_SRC emacs-lisp
(defun org-set-ellipsis ()
      (and (featurep 'all-the-icons)
           (setq-default org-ellpsis "")))

(add-hook 'org-mode-hook #'org-set-ellipsis)
#+END_SRC

*** Org outline numbering

#+BEGIN_SRC emacs-lisp
(use-package org-outline-numbering)
#+END_SRC

** Org Prose
*** Insert literal entities

From this StackExchange [[https://emacs.stackexchange.com/a/16746][post]]:

#+NAME: org-ui-literal
#+BEGIN_SRC emacs-lisp
(defun modi/org-entity-get-name (char)
  "Return the entity name for CHAR. For example, return \"ast\" for *."
  (let ((ll (append org-entities-user
                    org-entities))
        e name utf8)
    (catch 'break
      (while ll
        (setq e (pop ll))
        (when (not (stringp e))
          (setq utf8 (nth 6 e))
          (when (string= char utf8)
            (setq name (car e))
            (throw 'break name)))))))

(defun modi/org-insert-org-entity-maybe (&rest args)
  "When the universal prefix C-u is used before entering any character,
    insert the character's `org-entity' name if available.

    If C-u prefix is not used and if `org-entity' name is not available, the
    returned value `entity-name' will be nil."
  ;; It would be fine to use just (this-command-keys) instead of
  ;; (substring (this-command-keys) -1) below in emacs 25+.
  ;; But if the user pressed "C-u *", then
  ;;  - in emacs 24.5, (this-command-keys) would return "^U*", and
  ;;  - in emacs 25.x, (this-command-keys) would return "*".
  ;; But in both versions, (substring (this-command-keys) -1) will return
  ;; "*", which is what we want.
  ;; http://thread.gmane.org/gmane.emacs.orgmode/106974/focus=106996
  (let ((pressed-key (substring (this-command-keys) -1))
        entity-name)
    (when (and (listp args) (eq 4 (car args)))
      (setq entity-name (modi/org-entity-get-name pressed-key))
      (when entity-name
        (setq entity-name (concat "\\" entity-name "{}"))
        (insert entity-name)
        (message (concat "Inserted `org-entity' "
                         (propertize entity-name
                                     'face 'font-lock-function-name-face)
                         " for the symbol "
                         (propertize pressed-key
                                     'face 'font-lock-function-name-face)
                         "."))))
    entity-name))

;; Run `org-self-insert-command' only if `modi/org-insert-org-entity-maybe'
;; returns nil.
(advice-add 'org-self-insert-command :before-until #'modi/org-insert-org-entity-maybe)

#+END_SRC

*** Org Index :notetaking:

#+NAME: org-docmgr-index
#+BEGIN_SRC emacs-lisp
  (use-package org-index)
#+END_SRC

*** Org Noter :notetaking:

#+NAME: org-docmgr-interleave
#+BEGIN_SRC emacs-lisp
  (use-package org-noter
    :custom
    (org-noter-always-create-frame nil)
    (org-noter-hide-other nil))
#+END_SRC

*** Org Journal :notetaking:

#+NAME: org-docmgr-journal
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :custom
    (org-journal-enable-agenda-integration nil)
    (org-journal-dir (org-dir "journal"))
    (org-journal-date-prefix "#+TITLE: ")
    (org-journal-date-format "%A, %B %d %Y")
    (org-journal-time-prefix "* ")
    (org-journal-time-format ""))
#+END_SRC

** Org Export
:PROPERTIES:
:ID:       46A0BACE-34F1-4547-8EC4-367FD085E1B5
:CUSTOM_ID: sec:ox
:END:
*** Ox
#+NAME: core/ox
#+BEGIN_SRC emacs-lisp
(use-package ox
  :straight org-plus-contrib
  :custom
  (org-export-with-sub-superscripts '{})
  :init
  (defun org-update-backends (val)
    "Update Emacs export backends while Emacs is running.
See `org-export-backends' variable."
    (interactive)
    (progn
      (setq org-export-registered-backends
            (cl-remove-if-not
             (lambda (backend)
               (let ((name (org-export-backend-name backend)))
                 (or (memq name val)
                     (catch 'parentp
                       (dolist (b val)
                         (and (org-export-derived-backend-p b name)
                              (throw 'parentp t)))))))
             org-export-registered-backends))
      (let ((new-list (mapcar #'org-export-backend-name
                              org-export-registered-backends)))
        (dolist (backend val)
          (cond
           ((not (load (format "ox-%s" backend) t t))
            (message
             "Problems while trying to load export back-end
                   `%s'" backend))
           ((not (memq backend new-list)) (push backend new-list))))
        (set-default 'org-export-backends new-list))))
  :config
  ;; From [[https://lists.gnu.org/archive/html/emacs-orgmode/2016-11/msg00086.html][{O} multicolumn cells in latex export]]

  (defun org-export-multicolumn-filter (row backend info)
    (cond
     ((org-export-derived-backend-p backend 'latex)
      (org-export-multicolumn-filter-latex row backend info))
     ((org-export-derived-backend-p backend 'html)
      (org-export-multicolumn-filter-html row backend info))))

  (defun org-export-multicolumn-filter-latex (row backend info)
    (while (string-match
            "\\(<\\([0-9]+\\)col\\([lrc]\\)?>[[:blank:]]*\\([^&]+\\)\\)" row)
      (let ((columns (string-to-number (match-string 2 row)))
            (start (match-end 0))
            (contents (replace-regexp-in-string
                       "\\\\" "\\\\\\\\"
                       (replace-regexp-in-string "[[:blank:]]*$" ""
                                                 (match-string 4 row))))
            (algn (or (match-string 3 row) "l")))
        (setq row (replace-match
                   (format "\\\\multicolumn{%d}{%s}{%s}" columns algn contents)
                   nil nil row 1))
        (while (and (> columns 1) (string-match "&" row start))
          (setq row (replace-match "" nil nil row))
          (decf columns))))
    row)
  (defun org-export-multicolumn-filter-html (row backend info)
    (while (string-match "class=\".*\" *>&lt;\\([0-9]+\\)col\\([lrc]\\)?&gt;" row)
      (let ((columns (string-to-number (match-string 1 row)))
            (start (match-end 0))
            (algn (case (intern (or (match-string 2 row) "l"))
                    (c "center")
                    (r "right")
                    (l "left"))))
        (setq row (replace-match
                   (format " class=\"%s\" colspan=\"%s\">" algn columns)
                   nil nil row))
        (while (and (> columns 1)
                    (string-match "<th .*>&#xa0;</th>" row start))
          (setq row (replace-match "" nil nil row))
          (decf columns))))
    row)
  (add-to-list 'org-export-filter-table-row-functions
               'org-export-multicolumn-filter))
#+END_SRC

*** Ox Extra

Ignores headlines tagged =:ignore:=. Unlike =:noexport:=, the contents
and subtrees of the ignored headlines will be retained.

#+NAME: ox/extra
#+BEGIN_SRC emacs-lisp
(use-package ox-extra
  :straight org-plus-contrib
  :demand t
  :config
  (ox-extras-activate
   '(ignore-headlines
     org-export-filter-parse-tree-functions)))
#+END_SRC

*** Ox Publish

#+NAME: ox/publish
#+BEGIN_SRC emacs-lisp
(use-package ox-publish
  :straight org-plus-contrib
  :after (ox)
  :demand t)
#+END_SRC

*** Ox Org

#+NAME: ox/org
#+BEGIN_SRC emacs-lisp
  (use-package ox-org
    :straight org-plus-contrib
    :init
    (defun org-to-org-handle-includes ()
       "Copy the contents of the current buffer to OUTFILE,
  recursively processing #+INCLUDEs."
       (let* ((s (buffer-string))
              (fname (buffer-file-name))
              (ofname (format "%s.I.org" (file-name-sans-extension fname))))
         (setq result
               (with-temp-buffer
                 (insert s)
                 (org-export-handle-include-files-recurse)
                 (buffer-string)))
         (find-file ofname)
         (delete-region (point-min) (point-max))
         (insert result)
         (save-buffer))))
#+END_SRC

*** Ox Latex
:PROPERTIES:
:CUSTOM_ID: sec:ox-latex
:END:

#+BEGIN_SRC emacs-lisp
(use-package ox-latex
  :custom
  (org-latex-hyperref-template nil)
  (org-latex-packages-alist '(("" "booktabs" nil)))
  (org-latex-listings 'minted)
  (org-latex-minted-options
   '(("mathescape" "true")
     ("linenos" "true")
     ("frame" "lines")
     ("framesep" "2mm")))
  (org-latex-compiler "xelatex")
  :straight org-plus-contrib
  :after (ox)
  :demand t
  :init
  ;; minted
  (defcustom org-latex-minted-from-org-p nil
    "If non-nil, then included minted in `org-latex-packages-alist'
  and get options from `org-latex-minted-options'."
    :type 'boolean
    :group 'org-export-latex
    :version "26.1"
    :package-version '(Org . "9.0"))

  (defun org-latex-toggle-minted-from-org ()
    "Toggle `org-latex-minted-from-org-p'."
    (interactive)
    (cl-flet ((nominted (pkg) (not (string= (cadr pkg) "minted"))))
      (if (not org-latex-minted-from-org-p)
	  (setq org-latex-packages-alist
		(append org-latex-packages-alist '(("newfloat" "minted"))))
	(setq org-latex-packages-alist (seq-filter #'nominted org-latex-packages-alist)))
      (setq org-latex-minted-from-org-p (not org-latex-minted-from-org-p))
      (message "org minted %s" (if org-latex-minted-from-org-p
				   "enabled" "disabled"))))
  ;; Latex process
  (setq oxl-process-bibtex
	'("latexmk -pdflatex='pdflatex -interaction=nonstopmode -shell-escape' -synctex=1 -pdf -bibtex -f %f"))

  (setq oxl-process-biber
	'("latexmk -pdflatex='pdflatex -interaction=nonstopmode -shell-escape' -synctex=1 -pdf -biber -f %f"))

  (setq oxl-process-xelatex
	'("latexmk -pdf -synctex=1 -shell-escape -xelatex -f %f"))

  (setq oxl-process-lualatex
	'("latexmk -pdf -synctex=1 -shell-escape -lualatex -f %f"))

  (defcustom org-latex-pdf-engines
    '(("lualatex" . oxl-process-lualatex)
      ("xelatex" . oxl-process-xelatex)
      ("pdflatex" . (oxl-process-bibtex oxl-process-biber)))
    "A list of LaTeX commands available to run when
  `org-latex-export-to-pdf' is invoked."
    :type '(choice (cons string symbol) (cons string (repeat symbol)))
    :group 'org-export-latex
    :version "26.1")

  (defvar org-latex-pdf-process-hook nil
    "Hook to run after setting pdf process.")

  (defun org-latex-pdf-process-set (compiler)
    (interactive
     (list (completing-read "Compiler: " org-latex-pdf-engines)))
    (if (member compiler org-latex-compilers)
	(let ((process (cdr (assoc compiler org-latex-pdf-engines))))
	  (setq org-latex-pdf-process (symbol-value
				       (if (listp process)
					   (intern (completing-read "Process:" process))
					 process))
		org-latex-compiler compiler)
	  (run-hooks org-latex-pdf-process-hook))
      (error "%s not in `org-latex-compilers'" compiler)))

  :config
  (setq org-latex-logfiles-extensions
        (append org-latex-logfiles-extensions
                '("acn" "ind" "ilg" "ist" "glo" "tex" "synctex.gz")))
  (with-eval-after-load 'ox
    (org-latex-pdf-process-set org-latex-compiler))
  ;; From John Kitchen's [[https://github.com/jkitchin/scimax][scimax]] project, a starter for scientists and engineers.
  (setq org-latex-classes
	'(("article-standalone"
		 "\\documentclass{article}
	    [NO-DEFAULT-PACKAGES]
	    [PACKAGES]
	    [EXTRA]" ;; header-string
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*a{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	  ("uclaling"
	   "\\documentclass{uclaling}
	     [NO-DEFAULT-PACKAGES]
	     [EXTRA]"
	   ("\\section{%s}" . "\\section*{%s}")
	   ("\\subsection{%s}" . "\\subsection*{%s}")
	   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	   ("\\paragraph{%s}" . "\\paragraph*{%s}")
	   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	  ("uclacs"
	   "\\documentclass{uclacs}
	    [NO-DEFAULT-PACKAGES]
	    [EXTRA]"
	   ("\\section{%s}" . "\\section*{%s}")
	   ("\\subsection{%s}" . "\\subsection*{%s}")
	   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	   ("\\paragraph{%s}" . "\\paragraph*{%s}")
	   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	  ("humanities"
	   "\\documentclass{humanities}
	    [NO-DEFAULT-PACKAGES]
	    [EXTRA]"
	   ("\\section{%s}" . "\\section*{%s}")
	   ("\\subsection{%s}" . "\\subsection*{%s}")
	   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	   ("\\paragraph{%s}" . "\\paragraph*{%s}")
	   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	  ("unicode-math"
	   "\\documentclass{article}
	   [PACKAGES]
	   [NO-DEFAULT-PACKAGES]
	   [EXTRA]
	   \\usepackage{fontspec}
	   \\usepackage{amsmath}
	   \\usepackage{xltxtra}
	   \\usepackage{unicode-math}
	   \\setmathfont{STIX2Math}[
	     Path/Users/jacobchaffin/Library/Fonts/,
	     Extension={.otf},
	     Scale=1]
	   \\setmainfont{STIX2Text}[
	     Path/Users/jacobchaffin/Library/Fonts/,
	     Extension={.otf},
	     UprightFont={*-Regular},
	     BoldFont={*-Bold},
	     ItalicFont={*-Italic},
	     BoldItalicFont={*-BoldItalic}]"
	   ("\\section{%s}" . "\\section*{%s}")
	   ("\\subsection{%s}" . "\\subsection*{%s}")
	   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	   ("\\paragraph{%s}" . "\\paragraph*{%s}")
	   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
  :bind
  (:map org-mode-map
	      ("M-s l" . org-latex-pdf-process-set)))

#+END_SRC

**** Ox Latex subfigure

#+NAME: oxl/subfigure
#+BEGIN_SRC emacs-lisp
(use-package ox-latex-subfigure
  :after (ox-latex)
  :demand t
  :straight
  (ox-latex-subfigure :type git
                      :host github
                      :repo "linktohack/ox-latex-subfigure")
  :config
  (add-to-list 'org-latex-packages-alist '(("" "subcaption" nil))))

#+END_SRC

**** Ox tufte
#+BEGIN_SRC emacs-lisp
(use-package ox-tufte-latex
  :straight (ox-tufte-latex :type git
                            :host github
                            :repo "tsdye/tufte-org-mode"
                            :local-repo "ox-tufte-latex"
                            :files (:defaults "ox-tufte-latex.el"))
  :after (ox)
  :init
  (append org-latex-classes
          '(("tufte-handout"
             "\\documentclass[twoside,nobib]{tufte-handout}
             [NO-DEFAULT-PACKAGES]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}"))
            '("tufte-handout"
              "\\documentclass[twoside,nobib]{tufte-handout}
              [NO-DEFAULT-PACKAGES]"
              ("\\section{%s}" . "\\section*{%s}")
              ("\\subsection{%s}" . "\\subsection*{%s}")))))
#+END_SRC

**** Ox Linguistics

#+BEGIN_SRC emacs-lisp
(use-package ox-linguistics
  :straight (ox-linguistics :host github
                            :repo "jchaffin/ox-linguistics"
                            :files ("lisp/*.el"))
  :after (:all ox ox-latex)
  :demand t)
#+END_SRC

**** gb4e

#+BEGIN_SRC emacs-lisp
(use-package gb4e)
#+END_SRC

*** Ox Pandoc

[[https://pandoc.org/][Pandoc]] is a document conversion tool that can convert pretty much
anything. The [[https://github.com/kawabata/ox-pandoc][ox-pandoc]] package allows us to utiliize this capability
for exporting org-mode documents to various formats.

#+NAME: ox/pandoc
#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc
  :ensure-system-package (pandoc)
  :after (:all ox org-ref)
  :custom
  (org-pandoc-options '((standalone . t)))
  :demand t
  :config
  (defun ox-pandoc--pdf-engine ()
    "Set the default latex pdf engine to the one set by `org-latex-pdf-process'. "
    (let ((syms (mapcar (lambda (x) (if (listp x) (if (listp (cdr x)) (cadr x) (cdr x)))) org-latex-pdf-engines))
          (pred (lambda (sym) (eq (symbol-value sym) org-latex-pdf-process)))
          (prefix "oxl-process-"))
      (cadr (split-string (symbol-name (car (seq-filter pred syms))) prefix))))

  (setq org-pandoc-options-for-beamer-pdf
        `((pdf-engine . ,(ox-pandoc--pdf-engine)))
        org-pandoc-options-for-latex-pdf
        `((pdf-engine . ,(ox-pandoc--pdf-engine))))

  (defun org-pandoc-pdf-engine-set (compiler)
    "Set the latex pdf engine for `org-pandoc-export-to-latex-pdf'."
    (interactive
     (list (completing-read "Compiler: " org-latex-compilers)))
    (setq org-pandoc-options-for-beamer-pdf
          `((pdf-engine . ,compiler))
          org-pandoc-options-for-latex-pdf
          `((pdf-engine . ,compiler))))
  ;; Open MS .doc?x files with system viewer.
  (when (symbolp 'org-file-apps)
    (add-to-list 'org-file-apps '("\\.docx?\\'" . system))))
#+END_SRC

*** Ox GFM

#+NAME: ox/gfm
#+BEGIN_SRC emacs-lisp
(use-package ox-gfm
  :after (ox)
  :demand t)
#+END_SRC

*** Ox Hugo

[[https://ox-hugo.scripter.co/][ox-hugo]] is an org exporter for Hugo-compatible markdown.

#+NAME: ox/hugo
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :after (ox))
#+END_SRC

*** Ox HTML

#+NAME: ox/html
#+BEGIN_SRC emacs-lisp
(use-package org-html-themes
    :straight
    (org-html-themes :type git
                     :host github
                     :repo "fniessen/org-html-themes"
                     :local-repo-name org-html-themes
                     :files ("setup/*" "styles/*")))
#+END_SRC

** Org Hacks
:PROPERTIES:
:ID:       872F7F61-7971-42E4-BC24-FEA9D67634D2
:END:

From Thomas Frössman's [[http://thomasf.github.io/solarized-css/test/org-hacks.html#sec-1-8-5][org hacks]]:

*** Reveal cursor in folded subtree.
:PROPERTIES:
:ID:       088BEAF5-B9FE-43F4-995D-5E26FB6DCB16
:END:

Fix problem with  which puts point back in a folded position.

#+NAME: org-hacks-saveplace-fix
#+BEGIN_SRC emacs-lisp
(defun org-mode-save-place-fix ()
  (when (outline-invisible-p)
    (save-excursion
      (outline-previous-visible-heading 1)
      (org-show-subtree))))

(add-hook 'org-mode-hook 'org-mode-save-place-fix)
#+END_SRC

*** ibuffer and org files

Neil Smithline posted this snippet to let you browse org files with
=ibuffer=:

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :straight
  (ibuffer :type built-in)
  :init
  (defun org-ibuffer ()
    "Open an `ibuffer' window showing only `org-mode' buffers."
    (interactive)
    (ibuffer nil "*Org Buffers*" '((used-mode . org-mode)))))

#+END_SRC

** Org Web
*** Org Protocol

#+BEGIN_SRC emacs-lisp
  (use-package org-protocol
    :straight org-plus-contrib
    :init
    (setq org-protocol-default-template-key "l")
    (require 'server)
    (unless (server-running-p)
      (setq server-socket-dir (format "/tmp/emacs%d" (user-uid)))
      (server-start)))
#+END_SRC

*** Org Contacts

#+BEGIN_SRC emacs-lisp
  (use-package org-contacts
    :straight org-plus-contrib
    :custom
    (org-contacts-files '("~/Dropbox/org/contacts.org"))
    :demand t)
#+END_SRC

** Org Download :web:

Drag and Drop images directly from a web browser to an org-mode buffer.

#+NAME: org-docmgr-download
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :defines (org-download-image-dir)
  :commands (org-download-enable  org-download-yank org-download-screenshot)
  :init
  (when (eq system-type 'darwin)
    (setq-default org-download-image-dir "~/Dropbox/org/img/"))
  :hook
  ((dired-mode org-mode) . org-download-enable))
#+END_SRC

*** Org Web Tools :web:

#+BEGIN_SRC emacs-lisp
(use-package org-web-tools)
#+END_SRC

*** Org preview html

#+BEGIN_SRC emacs-lisp
(use-package org-preview-html)
#+END_SRC

* Appearance

Credits to [[https://github.com/domtronn][domtronn]] for a solid portion of this stuff. Dude makes really fantastic Emacs UI libraries and enhancements.

** Theme

#+NAME: theme-interface
#+BEGIN_SRC emacs-lisp
(defcustom dotemacs--theme-style 'dark
  "The default theme mode. Only symbols 'dark and 'light are considered."
  :type '(choice
          (const :tag "Use a dark theme by default." dark)
          (const :tag "Use a light theme by default" light)
          (const :tag "Ignore the value of this variable" nil))
  :group 'dotemacs)

(defcustom dotemacs-term-theme 'wombat
  "The default term theme."
  :type 'symbol
  :group 'dotemacs)

(defcustom dotemacs-prose-theme 'tsdh-light
   "The default theme for writing text."
   :type 'symbol
   :group 'dotemacs)

(defcustom dotemacs-light-theme 'tsdh-light
  "The light theme."
  :type 'symbol
  :group 'dotemacs)

(defcustom dotemacs-dark-theme 'tsdh-dark
  "The dark theme."
  :type 'symbol
  :group 'dotemacs)

(defcustom dotemacs-theme 'tsdh-dark
  "The default theme to load."
  :type 'string
  :group 'dotemacs)

(defcustom dotemacs-theme-colors nil
  "plist of colors for the current theme."
  :type '(plist :key-type symbol :value-type sexp)
  :group 'dotemace)
#+END_SRC

*** Custom Theme
This disables Emacs asking questions about loading a new theme.

#+NAME: theme-custom-theme
#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
(setq custom-theme-directory (emacs-etc-dir "themes"))
#+END_SRC

*** Themes
**** Zenburn Theme

#+NAME: theme-zenburn
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme)
#+END_SRC

**** Poet Theme
:PROPERTIES:
:ID:       4CB4E70B-93D6-4DAF-B66E-9322A55B7ACC
:END:

#+NAME: theme-poet
#+BEGIN_SRC emacs-lisp
(use-package poet-theme
  :init
  (setq dotemacs-light-theme 'poet))
#+END_SRC

**** Base16 Themes
:PROPERTIES:
:ID:       6C3D859E-C37D-4D75-920A-374E5AAEEEEA
:END:

#+NAME: theme-base16
#+BEGIN_SRC emacs-lisp
(use-package base16-theme
    :demand t
    :init
    (setq dotemacs-dark-theme 'base16-snazzy
          dotemacs-light-theme 'base16-default-light)

    (require 'base16-snazzy-theme)
    (defun base16-p (&optional theme)
      (let ((theme (or theme dotemacs-theme "")))
        (string-prefix-p "base16-" (symbol-name theme))))

    (add-to-list 'custom-theme-load-path
                 (expand-file-name "straight/build/base16-theme"
                                   user-emacs-directory))
    :config
    (setq base16-distinct-fringe-background nil))

#+END_SRC

*** Load Theme

#+NAME: theme-load-theme
#+BEGIN_SRC emacs-lisp
(setq-default custom-enabled-themes (list dotemacs-theme))

(defun remove-themes ()
  "Forcibly load the themes listed in `custom-enabled-themes'."
  (mapc #'disable-theme custom-enabled-themes))

(defvar load-theme-hook nil
  "List of functions to run when `dotemacs/load-theme' is invoked.")
(defvar theme-change-hook nil
  "List of function to run before `dotemacs/load-theme' changes the theme.")

(defun dotemacs--require-theme (theme)
  (require
   `,(intern (concat (symbol-name theme) "-theme"))))

(defun dotemacs--theme-from-style ()
  (symbol-value
   `,(intern (concat "dotemacs-"
                     (format "%s" (symbol-value 'dotemacs--theme-style))
                     "-theme"))))

(defun dotemacs--set-theme-colors (theme)
  (and (base16-p theme)
       (symbol-value `,(intern (concat (symbol-name theme) "-colors")))))

(defun dotemacs--setup-theme (theme)
  (dotemacs--require-theme theme)
  (setq dotemacs-theme-colors (dotemacs--set-theme-colors theme))
  theme)

(defun dotemacs--default-theme ()
  (let ((theme (dotemacs--theme-from-style)))
    (dotemacs--setup-theme theme)))

(cl-defun dotemacs/load-theme (&optional (theme (dotemacs--default-theme)))
  "Opionated theme loading. If invoked without arguments, this
function will load the theme associated with `dotemacs--theme-style'.

Calling this function with the universal-argument `C-u' loads the new
theme in \"quick mode\" by eliding hooks specified in
 `change-theme-hook' and `load-theme-hook'."

  (interactive
   (let ((themes (mapcar 'symbol-name (custom-available-themes))))
     (list (completing-read "Theme: " themes))))
  (interactive "p")
  (let ((theme-symbol (if (symbolp theme) theme (intern theme))))
    (remove-themes)
    (unless (equal current-prefix-arg '(4))
      (run-hooks 'change-theme-hook))
    (if (not window-system) (load-theme dotemacs-term-theme)
      (setq dotemacs-theme theme-symbol)
      (and (dotemacs--setup-theme dotemacs-theme)
           (load-theme dotemacs-theme)))
    (unless (equal current-prefix-arg '(4))
      (run-hooks 'load-theme-hook))))

(defun dotemacs/load-theme-with-frame (frame)
  (with-selected-frame frame
    (unless (daemonp)
      (dotemacs/load-theme))))

(defun dotemacs--toggle-theme-style ()
  (interactive)
  (if (eq dotemacs--theme-style 'dark)
      (setq dotemacs--theme-style 'light)
    (setq dotemacs--theme-style 'dark)))

(defun dotemacs/toggle-theme ()
  (interactive)
  (dotemacs--toggle-theme-style)
  (dotemacs/load-theme))

(add-hook 'after-init-hook #'dotemacs/load-theme)
;; (add-hook 'after-make-frame-functions #'dotemacs/load-theme-with-frame)
#+END_SRC

** Org faces
:PROPERTIES:
:ID:       D29BA324-2B5B-46A6-A0E6-E266D770AF1F
:END:

#+NAME: theme-org-mode
#+BEGIN_SRC emacs-lisp

  ;; Org Mode faces
  (defun org-theme-faces ()
    "Customize `org-mode' faces for base-16 themes."
    (let ((fg (face-foreground 'default nil 'default))
          (fg2 (or (plist-get dotemacs-theme-colors :base04)))
          (bg2 (or (plist-get dotemacs-theme-colors :base01))))
      (when (and fg2 bg2)
        (set-face-attribute 'org-document-info-keyword nil
                            :foreground fg2 :slant 'italic :inherit 'org-document-info-face)
        (set-face-attribute 'org-block-begin-line nil
                            :height 1.0
                            :foreground fg2
                            :background bg2
                            :inherit 'org-meta-line))
      (set-face-attribute 'org-verbatim nil
                          :foreground (color-darken-name fg 15)
                          :inherit 'fixed-pitch-serif)

      (set-face-attribute 'org-block-begin-line nil
                          :inherit 'fixed-pitch)
      (set-face-attribute 'org-level-2 nil
                           :height 1.2 :inherit 'outline-2)
      (set-face-attribute 'org-level-1 nil
                           :height 1.6 :inherit 'outline-1)
      (set-face-attribute 'org-level-2 nil
                           :height 1.3 :inherit 'outline-2)
      (set-face-attribute 'org-level-3 nil
                           :height 1.2  :inherit 'outline-3)
      (set-face-attribute 'org-level-4 nil
                           :height 1.1  :inherit 'outline-4)
      (set-face-attribute 'org-level-5 nil
                           :height 1.1  :inherit 'outline-5)
      (set-face-attribute 'org-level-6 nil
                          :height 1.1  :inherit 'outline-6)
      (set-face-attribute 'org-level-7 nil
                           :height 1.0  :inherit 'outline-7)
      (set-face-attribute 'org-block nil :inherit 'default)
      (set-face-attribute 'org-document-title nil
                           :foreground fg :height 1.8
                          :underline nil)
      (set-face-attribute 'org-block-end-line nil :inherit 'org-block-begin-line)))

  ;; https://github.com/syl20bnr/spacemacs/pull/7667
  (defun dotemacs/org-restart ()
    "Restart all open org-mode buffers."
    (let ((org-buffers (org-buffer-list  'files t)))
      (dolist (buf org-buffers)
        (with-current-buffer buf
          (org-mode-restart)))))

  (defun org-modified-theme ()
    (org-theme-faces)
    (dotemacs/org-restart))

  (defun disable-scroll-bar (&optional frame)
    (if frame
        (with-selected-frame frame
          (toggle-scroll-bar -1))
      (toggle-scroll-bar -1)))

  ;; Add Hooks
  (add-hook 'load-theme-hook #'org-modified-theme)
  (add-hook 'load-theme-hook #'disable-scroll-bar)
  (add-hook 'after-make-frame-functions #'disable-scroll-bar)
#+END_SRC

** Overlays
*** Highlight

#+NAME: hl-highlight
#+BEGIN_SRC emacs-lisp
(use-package highlight)
#+END_SRC

*** Emacs Command tooltip mode

#+BEGIN_SRC emacs-lisp
(use-package emacs-keybinding-command-tooltip-mode
  :straight (emacs-keybinding-command-tooltip-mode
             :local-repo
             "~/.emacs.d/etc/local/emacs-keybinding-command-tooltip-mode")
  :init
  (emacs-keybinding-command-tooltip-mode 1))
#+END_SRC

*** Overlay

#+BEGIN_SRC emacs-lisp
(use-package ov
   :demand t)
#+END_SRC

*** Overlay Highlight


#+BEGIN_SRC emacs-lisp
(use-package ov-highlight
  :straight (ov-highlight
             :host github
             :repo "jkitchin/ov-highlight")
  :after ov
  :demand t
  :bind
  (:map my-prefix-map
        ("C-c h" . ov-highlight/body))
  :config
  (when (featurep 'which-key)
    (which-key-add-key-based-replacements
        "C-c h" "_ Highlight")))
#+END_SRC

*** Rainbow Mode

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :init
  (rainbow-mode 1))
#+END_SRC

*** Col Highlight

#+BEGIN_SRC emacs-lisp
(use-package col-highlight)
#+END_SRC

*** Hl Todo

Highlight =TODO= keywords:

#+NAME: hl-hl-todo
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :commands (hl-todo-mode)
  :hook
  (prog-mode . hl-todo-mode))
#+END_SRC

*** Symbol Highlighting
:PROPERTIES:
:ID:       37242456-1957-470E-885B-099A5D42A191
:END:

**** Symbol Overlay

#+BEGIN_SRC emacs-lisp
(use-package symbol-overlay)
#+END_SRC

**** Hlsexp

Minor mode to highlight sexp.

#+NAME: hl-hl-sexp
#+BEGIN_SRC emacs-lisp
(use-package highlight-sexp)
#+END_SRC

**** Highlight Symbol

#+NAME: core/highlight-symbol
#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol)
#+END_SRC

*** Highlight Indentation
:PROPERTIES:
:ID:       A2FD2DE5-0295-4F22-974F-8D4D7E6F26C2
:END:

**** Highlight indent guide mode

#+NAME: hli/guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :hook
  (prog-mode . highlight-indent-guides-mode))
#+END_SRC

**** Highlight indentation

#+NAME: hli/indentation
#+BEGIN_SRC emacs-lisp
(use-package highlight-indentation)
#+END_SRC

**** Visual indentation

#+NAME: hli/visual
#+BEGIN_SRC emacs-lisp
(use-package visual-indentation-mode)
#+END_SRC

** Pretty
*** Pretty Mode
:PROPERTIES:
:ID:       096E820A-240F-4A31-8B93-E72B821FF8CF
:END:

#+NAME: pretty/mode
#+BEGIN_SRC emacs-lisp
(use-package pretty-mode
  :init
  (global-pretty-mode t)
  :config
  (pretty-deactivate-groups
   '(:equality :ordering :ordering-double :ordering-triple
               :arrows :arrows-twoheaded :punctuation
               :logic :sets))
  (pretty-activate-groups '(:greek)))
#+END_SRC

*** Prettify Symbols
:PROPERTIES:
:ID:       C03FF49A-155B-4D77-AE81-ED0EA7EECD3E
:END:

Seems to be problems rendering symbols on Debian. Not sure if this is
because the necessary fonts are not installed or if it's because of
the absence of a window system. I'll check for the latter for now.

#+NAME: pretty/symbols
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (add-hook 'prog-mode-hook 'prettify-symbols-mode))
#+END_SRC

*** Prettify Utilities

#+NAME: pretty/utils
#+BEGIN_SRC emacs-lisp
(use-package prettify-utils
  :straight (prettify-utils
             :host github
             :repo "Ilazki/prettify-utils.el")
  :init
  (require 'prettify-utils))

#+END_SRC

*** Pretty Emacs
**** Pretty Eshell

#+NAME: esh/pretty
#+BEGIN_SRC emacs-lisp
(use-package pretty-eshell
  :straight (pretty-eshell
             :local-repo "~/.emacs.d/etc/local/pretty-emacs"
             :files ("pretty-eshell.el"))
  :custom
    ;; Eshell prompt regexp and string.
    (eshell-prompt-regexp "λ ")   ; or "└─> "
    :init
    (progn
      (with-eval-after-load 'magit
	(require 'magit-process)
	(require 'pretty-eshell)
	(setq pretty-eshell-header "\n ")
	(setq pretty-eshell-prompt-string "λ ")
	;; Directory
	(pretty-eshell-section
	 esh-dir
	 "\xf07c"  ; 
	 (abbreviate-file-name (eshell/pwd))
	 '(:foreground "gold" :weight bold :underline t))

	;; Git Branch
	(pretty-eshell-section
	 esh-git
	 "\xe907"  ; 
	 (magit-get-current-branch)
	 '(:foreground "pink"))

	;; Python Virtual Environment
	(pretty-eshell-section
	 esh-python
	 "\xe928"  ; 
	 pyvenv-virtual-env-name)

	;; Time
	(pretty-eshell-section
	 esh-clock
	 "\xf017"  ; 
	 (format-time-string "%H:%M" (current-time))
	 '(:foreground "forest green"))

	;; Prompt Number
	(pretty-eshell-section
	 esh-num
	 "\xf0c9"  ; 
	 (number-to-string pretty-eshell-prompt-num)
	 '(:foreground "brown"))

	(setq pretty-eshell-funcs
	      (list esh-dir esh-git esh-python esh-clock esh-num)))))
#+END_SRC

**** Pretty Fonts

#+BEGIN_SRC emacs-lisp
(use-package pretty-fonts
  :straight (pretty-fonts :local-repo "~/.emacs.d/etc/local/pretty-emacs"
                          :files ("pretty-fonts.el"))
  :init
  (defun pretty-fonts-before-theme ()
    (set-face-font
     'default "-*-Fira Code-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1"))

  (defun pretty-fonts-after-theme ()
    (require 'pretty-fonts)
    "Setup fira code ligatures and icon font sets."
    (when (and (require 'font-utils nil t)
               (font-utils-exists-p "Fira Code Symbol"))
      (pretty-fonts-add-hook 'prog-mode-hook pretty-fonts-fira-code-alist)
      (pretty-fonts-add-hook 'org-mode-hook  pretty-fonts-fira-code-alist))

    (when (require 'all-the-icons nil t)
      (pretty-fonts-set-fontsets
       '(;; All-the-icons fontsets
         ("fontawesome"
          ;;                      
          #xf07c #xf0c9 #xf0cb #xf017 #xf101)

         ("all-the-icons"
          ;;    
          #xe907 #xe928)

         ("github-octicons"
          ;;                                     
          #xf091 #xf059 #xf076 #xf075 #xe192  #xf016 #xf071 #xf0c4)

         ("material icons"
          ;;              
          #xe871 #xe918 #xe3e7  #xe5da
          ;;              
          #xe3d0 #xe3d1 #xe3d2 #xe3d4)))))
  :hook
  (change-theme . pretty-fonts-before-theme)
  (load-theme . pretty-fonts-after-theme))

#+END_SRC

**** Pretty Code

#+BEGIN_SRC emacs-lisp
(use-package pretty-code
  :straight
  (pretty-code :local-repo "~/.emacs.d/etc/local/pretty-emacs"
               :files ("pretty-code.el"))
  :init
  (require 'pretty-code)
  (pretty-code-add-hook 'emacs-lisp-mode-hook '((:def "defun")))
  (pretty-code-add-hook 'hy-mode-hook         '((:def "defn")
                                                    (:lambda "fn")))
  (pretty-code-add-hook 'python-mode-hook     '((:def "def")
                                                (:lambda "lambda"))))
#+END_SRC

*** Pretty Outlines

#+BEGIN_SRC emacs-lisp :tangle no
(use-package pretty-outlines
  :straight  (pretty-outlines
              :local-repo "~/.emacs.d/etc/local/pretty-emacs"
               :files ("pretty-outlines.el"))
  :custom
  (pretty-outlines-ellipsis ""))
#+END_SRC

** Fonts
:PROPERTIES:
:ID:       98543582-0772-4025-917B-38DF6542DD6F
:END:

*** Fontutils
#+BEGIN_SRC emacs-lisp
(use-package font-utils
  :demand t)
#+END_SRC

*** Don't use default font for symbols

See [[https://www.reddit.com/r/emacs/comments/6yh9r0/defining_unicode_character_blocks/][defining unicode character blocks : emacs]]

#+BEGIN_SRC emacs-lisp
(setq use-default-font-for-symbols nil)
#+END_SRC

*** Default Text Scale

#+BEGIN_SRC emacs-lisp
(use-package default-text-scale
  :init
  (default-text-scale-mode 1))
#+END_SRC

*** Variable Pitch

#+BEGIN_SRC emacs-lisp
(use-package org-variable-pitch
  :defines (org-variable-pitch-fixed-faces)
  :straight (org-variable-pitch
             :type git :host github :repo "emacsmirror/org-variable-pitch")
  :custom-face
  (variable-pitch
   ((((type w32))
     (:foundry "outline" :family "Arial"))
    (t (:family "Fira Sans"))))
  (fixed-pitch ((t (:family "Fira Code"))))
  :custom
  (org-variable-pitch-fixed-font "Fira Code")
  :config
  (setq org-variable-pitch-fixed-faces
        (append org-variable-pitch-fixed-faces '(org-latex-and-related)))
  :hook
  (org-mode . org-variable-pitch-minor-mode))
#+END_SRC

*** Unicode
**** Emojis
***** Apple Color Emoji

#+BEGIN_SRC emacs-lisp
(set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend)
(set-fontset-font t 'symbol (font-spec :family "Apple Symbols")  nil 'prepend)
#+END_SRC

***** Unicode Emoticons

#+BEGIN_SRC emacs-lisp
(use-package unicode-emoticons)
#+END_SRC

***** Company Emoji

#+NAME: emoji/company
#+BEGIN_SRC emacs-lisp
(use-package company-emoji
  :after (:all company emojify-mode)
  :demand t
  :init
    ;; https://github.com/dunn/company-emoji#emoji-font-support
  (defun --set-emoji-font (frame)
    "Adjust the font settings of FRAME so Emacs can display emoji properly."
    (if (eq system-type 'darwin)
        ;; For NS/Cocoa
        (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
      ;; For Linux
      (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))
  (--set-emoji-font nil)

  ;; Hook for when a frame is created with emacsclient
  (add-hook 'after-make-frame-functions '--set-emoji-font)

  :config
  (defun company-emoji-setup ()
    (let ((backends (cons 'company-emoji company-backends)))
      (set (make-local-variable 'company-backends) backends))))

#+END_SRC

**** Icons
***** All the Icons

[[https://github.com/domtronn/all-the-icons.el][All The Icons]] is a utility package for icons in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :straight (all-the-icons :type git
                 :files (:defaults "data" "all-the-icons-pkg.el")
                 :host github
                 :repo "cxa/all-the-icons.el"))
#+END_SRC

****** all the icons dired

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :after (:all all-the-icons dired)
  :demand t
  :init
  (require 'font-lock+)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

****** All the icons ivy

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy
    :after (:all ivy all-the-icons)
    :init
    (all-the-icons-ivy-setup))
#+END_SRC

****** Modify default fontspec
:PROPERTIES:
:ID:       8B26EA14-B8CE-4E10-8B29-B3426E0B6D72
:END:

#+BEGIN_SRC emacs-lisp
(defcustom font-override-list
  '(("github-octicons" . (#xF0C5 #xF02F #xF00E))
    ("file-icons" . (#xE917 #xE926 #xE600 #xE601 #xE91A))
    ("Material Icons" . (#xE80C #xE8CE))
    ("FontAwesome" . (#xF167)))
  "Alist of font family glyphs to manually override in the defaul fontspec."
  :type '(alist :tag "Font families to glyphs"
                :value-type '(choice integer (repeat integer))))

 (defun font-overide-glyphs ()
     "Modify the default fontset to choose the right icons."
     (interactive)
       (dolist (font-glyphs font-override-list)
         (when (and (require 'font-utils nil t)
                    (font-utils-exists-p (car font-glyphs)))
           (mapcar
            (lambda (glyph)
              (set-fontset-font "fontset-default"
                                glyph (car font-glyphs)
                                nil 'prepend))
            (cdr font-glyphs)))))

#+END_SRC

***** VS Code Icons
:PROPERTIES:
:ID:       4196FB0F-6A8F-4476-AFBD-651C7E5ED8AD
:END:

#+NAME: icons/vscode
#+BEGIN_SRC emacs-lisp

(use-package vscode-icon
  :init
  (require 'vscode-icon)
  :commands (vscode-icon-for-file))

#+END_SRC

**** Org Unicode
**** Org Bullets

Inspired by this [[http://nadeausoftware.com/articles/2007/11/latency_friendly_customized_bullets_using_unicode_characters][article]] on creating latency-friendly unicode bullets,
the [[https://github.com/sabof/org-bullets][org-bullets]] library provides support for displaying org-mode
bullets as UTF-8 characters.

- The default set ::  ◉ ○ ✸ ✿
- Smaller set :: ► • ★ ▸
- Alternative options :: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶

#+NAME: org-ui-org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :demand t
  :preface
  (setq inhibit-compacting-font-caches t)
  :custom
  (org-bullets-bullet-list '("▸" "●"))

  :init
  (defun org-bullets/enable ()
    (org-bullets-mode +1))
  :hook
  (org-mode . org-bullets/enable))
#+END_SRC

**** Org Pretty Tags

#+BEGIN_SRC emacs-lisp
(use-package org-pretty-tags
  :straight (org-pretty-tags
             :type git
             :host gitlab
             :repo "marcowahl/org-pretty-tags")
  :custom
  (org-pretty-tags-surrogate-strings
   '(("homework" . "📕️")
    ("note" . "️📓")
    ("exam" . "📜")
    ("quiz" . "📝")
    ("reading" . "📚")
    ("lecture" . "🎓")
    ("attach" . "📎")
    ("@semantics" . "λ")
    ("@phonetics" . "🗣")
    ("@ai" . "♠")
    ("@comsci" . "💻")
    ("java" . "")
    ("prolog" . "")
    ("scheme" . "λ")
    ("ocaml" . "")
    ("python" . "")
    ("kotlin" . "")
    ("noexport" . "❌")
    ("ignore" . "🚫")
    ("bib" . "")
    ("TOC_3_gh" . "")
    ("web" . "🔗")
    ("@shopping" . "🛒")))
  :init
  (defun org-pretty-tags-enable ()
    (add-hook 'org-mode-hook #'org-pretty-tags-mode))

  (defun pretty-tags-restore-overlays ()
    "Restore `org-pretty-tags-surrogate-strings'."
    (dolist (buf (org-buffer-list 'files t))
      (with-current-buffer buf
        (org-pretty-tags-mode 1))
      (add-hook 'org-mode-hook 'org-pretty-tags-mode)))

  (defun org-pretty-tags-inhibit-overlays (orig-fun &rest args)
    "Inhibit `org-pretty-tags-mode' from running when ORIG-FUN called,
optionally with ARGS. "
    (remove-hook 'org-mode-hook 'org-pretty-tags-mode)
    (org-pretty-tags-mode -1)
    (apply orig-fun args)
    (pretty-tags-restore-overlays))

  :hook
  (after-init . org-pretty-tags-enable))

#+END_SRC

**** Org Fancy Priorities

#+BEGIN_SRC emacs-lisp
(use-package org-fancy-priorities
  :config
  (setq org-fancy-priorities-list '((?A . "❗")
                                    (?B . "⏫")
                                    (?C . "⬆️")))
  :hook
  (org-mode . org-fancy-priorities-mode))

#+END_SRC

**** Org Pretty Table

#+NAME: org-ui-table
#+BEGIN_SRC emacs-lisp
(use-package org-pretty-table
  :straight (org-pretty-table
             :host github
             :type git
             :repo "Fuco1/org-pretty-table")
  :hook
  (org-mode . org-pretty-table-mode))
#+END_SRC

** Cursor
*** Disable Blink

Ultimately, I'd like to set a longer blink interval, like the "phase" ~caret_style~ setting in Sublime Text.

#+NAME: cursor/blink
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode -1)
#+END_SRC

*** Only show cursor in selected window

#+NAME: cursor/window
#+BEGIN_SRC emacs-lisp
(setq-default cursor-in-non-selected-windows nil
              x-stretch-cursor nil)
#+END_SRC

** Visual
:PROPERTIES:
:ID:       A6A6C1C1-8DF3-45C7-8FB0-D1D1974B8C72
:END:

*** Visual Fill Column
:PROPERTIES:
:ID:       9343B26B-8EB3-4785-BAD0-427AE4E3DD63
:END:

#+NAME: readview-fc
#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column
  :commands (visual-fill-column-mode)
  :custom
  (visual-fill-column-width
   ;; take Emacs 26 line numbers into account
   (+ (if (boundp 'display-line-numbers) 6 0)
      fill-column))
  :init
  (defun visual/writing ()
    (local-set-key (kbd "C-a") 'beginning-of-visual-line)
    (visual-fill-column-mode 1)
    (visual-line-mode 1))
  :hook
  ((org-mode markdown-mode text-mode html-mode) . visual/writing)
  :config
  (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))

#+END_SRC

*** Fill Column Indicator
:PROPERTIES:
:ID:       8B3DC41D-C8AC-4FE3-801F-A0FFAD14F363
:END:

#+NAME: readview-fc-indicator
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :init
  (setq fci-rule-use-dashes nil)
  :hook
  (prog-mode . fci-mode))
#+END_SRC

*** Justify Kp
:PROPERTIES:
:ID:       423D21DE-4BD8-49B5-BD6B-F88E267B4008
:END:

#+NAME: readview-justify
#+BEGIN_SRC emacs-lisp
(use-package justify-kp
  :straight (justify-kp
             :host github
             :repo "Fuco1/justify-kp"))
#+END_SRC

** Scrolling
:PROPERTIES:
:ID:       57C52822-10CA-4C35-AB6F-4E6C62F4B53D
:END:

*** Scroll to first error on compilation

#+NAME: scroll/compile-error
#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output 'first-error)
#+END_SRC

*** Smooth Scrolling

#+NAME: scroll/smooth
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :init
  (smooth-scrolling-mode 1)
  :config
  (setq scroll-step 1
        scroll-margin 10
        next-line-add-newlines nil
        scroll-preserve-screen-position 1)

  (setq mouse-wheel-follow-mouse 't)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))))
#+END_SRC

*** Sublimity Scroll

#+NAME: scroll/subliminity
#+BEGIN_SRC emacs-lisp
  (use-package sublimity
      :init
    (require 'sublimity-scroll))
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline)

  (use-package spaceline-config
    :straight spaceline)

  (use-package spaceline-all-the-icons
    :straight  (spaceline-all-the-icons
		:type git
		:host github
		:repo "LiuPai/spaceline-all-the-icons.el")
    :after spaceline)

  (use-package spaceline-all-the-icons-segments
    :straight spaceline-all-the-icons
    :init
    (require 'spaceline-all-the-icons)
    (require 'spaceline-segments)
    (spaceline-all-the-icons-theme 'org-pomodoro)
    (spaceline-toggle-org-pomodoro-on))
#+END_SRC

* Web
** Web libraries
*** Simple httpd

#+NAME: lib/httpd
#+BEGIN_SRC emacs-lisp
(use-package simple-httpd
    :straight (simple-httpd
               :type git
               :host github
               :repo "skeeto/emacs-web-server"
               :local-repo "simple-httpd"))
#+END_SRC

*** WebSocket

#+NAME: lib/websocket
#+BEGIN_SRC emacs-lisp
(use-package websocket)
#+END_SRC

*** UUID

#+NAME: lib/uuid
#+BEGIN_SRC emacs-lisp
(use-package uuid)
#+END_SRC

*** Web Server

#+NAME: lib/webserver
#+BEGIN_SRC emacs-lisp
(use-package web-server)
#+END_SRC

*** Request

#+NAME: lib/request
#+BEGIN_SRC emacs-lisp
(use-package request)
#+END_SRC

*** OAuth

#+NAME: lib/oauth2
#+BEGIN_SRC emacs-lisp
(use-package oauth2)
#+END_SRC

** Browsing
*** Keymap

#+BEGIN_SRC emacs-lisp
(bind-keys
 :prefix-map web-prefix-map
 :prefix "M-m b")
#+END_SRC

*** Browse url

- [[https://emacs.stackexchange.com/a/7332][Stack Exchange - How to make eww default browser in emacs]]

#+NAME: browser/url
#+BEGIN_SRC emacs-lisp
(use-package browse-url
    :custom (browse-url-chromium-program
             (if (eq system-type 'darwin)
                 "/Applications/Chromium.app/Contents/MacOS/Chromium"
               "chromium"))
  :config
  (progn
    (when (not (display-graphic-p))
      (setq browse-url-browser-function 'eww-browse-url))))

#+END_SRC

**** osx browse url

The =osx-browse= library provides several useful commands for using the
Google Chrome, Safari, and Firefox web browsers on macOS.

#+NAME: browser/macos
#+BEGIN_SRC emacs-lisp
(use-package osx-browse
  :if (eq system-type 'darwin)
  :defines (osx-browse-mode osx-browse-mode-map)
  :init
  (osx-browse-mode 1))
#+END_SRC

*** Google this

#+NAME: browser/google
#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :init
    (google-this-mode 1)
    :config
    (with-eval-after-load 'which-key
      (which-key-add-key-based-replacements "C-c /" " This")
      (push '(( nil . "google-this-\\(.+\\)") . (nil . "this \\1"))
            which-key-replacement-alist)))
#+END_SRC

*** Search Web

#+NAME: browser/search
#+BEGIN_SRC emacs-lisp
(use-package search-web)
#+END_SRC

*** Xwidget

A fully-featured GUI web browser inside Emacs.

#+BEGIN_SRC emacs-lisp
(use-package xwidget
  :straight nil
  :bind (:map xwidget-webkit-mode-map
              ("\C-s" . isearch-forward)
              ("d" . xwidget-webkit-download))

  :defines (xwidget-webkit-current-url-as-kill xwidget-webkit-download)
  :init
  (defadvice xwidget-webkit-current-url-message-kill
      (around xwidget-webkit-current-url-message-kill-advice activate)
    (interactive)
    (let ((url (funcall-interactively #'xwidget-webkit-current-url)))
      (kill-new url)
      (message "Copied to kill ring: %s" url)))

  (when (require 'eww nil t)
    (defalias #'xwidget-webkit-decode-url-file-name #'eww-decode-url-file-name)
    (defalias #'xwidget-make-unique-file-name #'eww-make-unique-file-name)

    (defun xwidget-webkit-download (directory)
      "Download the current file from the url visited in the
active xwidget buffer and write to file in DIRECTORY."
      (interactive
       (list (read-directory-name
              "Download to: "
              xwidget-webkit-download-dir  nil nil)))
      (let ((url (funcall-interactively #'xwidget-webkit-current-url))
            (default-directory directory))
        (url-retrieve url #'xwidget-webkit-download-callback (list url directory))))

    (defun xwidget-webkit-download-callback (status url directory)
      (unless (plist-get status :error)
        (let* ((obj (url-generic-parse-url url))
               (path (car (url-path-and-query obj)))
               (file (eww-make-unique-file-name
                      (eww-decode-url-file-name (file-name-nondirectory path))
                      directory)))
          (goto-char (point-min))
          (re-search-forward "\r?\n\r?\n")
          (let ((coding-system-for-write 'no-conversion))
            (write-region (point) (point-max) file))
          (message "Saved %s" file)))))

  :config
  (defun xwidget-webkit-open-file (&optional file)
    "Open local FILE in"
    (interactive "fFile: ")
    (xwidget-webkit-browse-url
     (concat "file://" (copy-file-path)))))
#+END_SRC

*** Set default browser

Interactively.

#+NAME: browser/default
#+BEGIN_SRC emacs-lisp
(defvar browse-url-browser-alist
      '(("chrome" . browse-url-chrome)
        ("firefox" . browse-url-firefox)
        ("eww" . eww-browse-url)
        ("xwidget-webkit" . xwidget-webkit-browse-url)))

(when (eq system-type 'darwin)
    (setf (cdr (assoc "chrome" browse-url-browser-alist))
            #'osx-browse-url-chrome)
    (setf (cdr (assoc "firefox" browse-url-browser-alist))
          #'osx-browse-url-firefox)
    (add-to-list 'browse-url-browser-alist
                 '("safari" . osx-browse-url-safari)))

(defun set-browser-function (browser)
  "Interactively set the browser used by `browse-url'. "
  (interactive
   (list (completing-read "Browser: " browse-url-browser-alist)))
  (when-let ((browser-function (cdr (assoc browser browse-url-browser-alist))))
    (setq browse-url-browser-function browser-function)))

(cl-defun make-browser-function (browser)
  `(defun ,(intern (concat "set-browser-function-" browser)) ()
     (interactive)
     (set-browser-function ,browser)))

(defmacro make-browser-functions (browsers)
  `(progn ,@(mapcar 'make-browser-function browsers)))


(eval `(make-browser-functions ,(mapcar 'car browse-url-browser-alist)))

#+END_SRC

*** Engine Mode

#+NAME: browser/engine
#+BEGIN_SRC emacs-lisp
  (use-package engine-mode
    :init
    (engine-mode t)
    :defines (engine-mode-prefixed-map)
    :bind*
    (:map web-prefix-map
          ("e". engine-mode-prefixed-map))

    :config
    (setq web-engine-prefix nil)

    (when (and (boundp 'engine/keybinding-prefix) web-engine-prefix)
      (define-key engine-mode-map (kbd "C-x /") nil))

    (defengine cassi
      "http://cassi.cas.org/search.jsp")

    (defengine ctan
      "http://www.ctan.org/search/?x=1&PORTAL=on&phrase=%s"
      :keybinding "c"
      :docstring "Search the Comprehensive TeX Archive Network (ctan.org)")

    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "g"
      :docstring "Search Github")

    (defengine google
      "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
      :keybinding "Gg"
      :docstring "Search Google")

    (defengine google-bookmarks
      "chrome://bookmarks/?q=%s"
      :keybinding "Gb"
      :docstring "Search bookmarks in Google Chrome")

    (defengine google-images
      "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
      :keybinding "Gi"
      :docstring "Search google-images")

    (defengine google-maps
      "http://maps.google.com/maps?q=%s"
      :keybinding "Gm"
      :docstring "Mappin' it up.")

    (defengine google-scholar
      "http://scholar.google.com/scholar?q=%s"
      :keybinding "Gs"
      :docstring "Schoolin'it up.")

    (defengine lib-genesis
      "http://gen.lib.rus.ec/?req=%s"
      :keybinding "l"
      :docstring "I need all the books.")

    (defengine project-gutenberg
      "http://www.gutenberg.org/ebooks/search/?query=%s"
      :docstring "Read good")

    (defengine proquest
      "https://search.proquest.com"
      :keybinding "p"
      :docstring "Search Proquest")

    (defengine rfcs
      "http://pretty-rfc.herokuapp.com/search?q=%s")

    (defengine stack-overflow
      "https://stackoverflow.com/search?q=%s"
      :keybinding "s"
      :docstring "Search StackOverflow.")

    (defengine twitter
      "https://twitter.com/search?q=%s")

    (defengine wikipedia
      "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w"
      :docstring "Search wikipedia.")

    (defengine wiktionary
      "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

    (defengine wolfram-alpha
      "http://www.wolframalpha.com/input/?i=%s"
      :keybinding "a"
      :docstring "Search Wolfram Alfa")

    (defengine worldcat
      "https://ucla.worldcat.org/search?q=%s"
      :keybinding "W"
      :docstring "Search Worldcat"
      :browser 'osx-browse-url-chrome)

    (defengine youtube
      "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
      :keybinding "y"
      :docstring "Search Youtube")

    (which-key-add-key-based-replacements
      "M-m b"        "🌍 Browse"
      "M-m b e"      "🔎 Web Engine"
      "M-m b e y"    " Youtube"
      "M-m b e p"    " Proquest"
      "M-m b e g"    " GitHub"
      "M-m b e G g"  " Google"
      "M-m b e l "   " LibGen"
      "M-m b e a"    " Wolfram"
      "M-m b e w"    " Wikipedia"
      "M-m b e s"    " Stack Overflow"
      "M-m b e W"    " Worldcat"
      "M-m b e c"    " CTan"
      "M-m b e G"    " Google"
      "M-m b e G i"  "Images"
      "M-m b e G b"  " Bookmarks"
      "M-m b e G m"  " Maps"
      "M-m b e G s"  " Scholar"))
#+END_SRC

** Email
*** Org Mime

#+NAME: mail/mime
#+BEGIN_SRC emacs-lisp
(use-package org-mime
  :init
  (setq org-mime-export-options
        '(:section-numbers nil
          :with-author nil
          :with-toc nil))
  (defun org-mime/style ()
    (org-mime-change-element-style
     "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                   "#E6E1DC" "#232323"))
    (org-mime-change-element-style
     "blockquote" "border-left: 2px solid gray; padding-left: 4px;"))

  (defun org-mime/message-mode-hook ()
    (local-set-key (kbd "C-c M-h") 'org-mime-htmlize))

  (defun org-mime/org-mode-hook ()
    (local-set-key (kbd  "C-c M-h") 'org-mime-org-buffer-htmlize))

  :hook
  (message-mode . org-mime/message-mode-hook))


#+END_SRC

*** Offlineimap

#+NAME: mail/imap
#+BEGIN_SRC emacs-lisp
(use-package offlineimap)
#+END_SRC

*** Mu
**** Mu4e

#+NAME: mu-mu4e
#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :if (executable-find "mu")
  :straight (mu4e :local-repo "/usr/local/share/emacs/site-lisp/mu-edge"
                  :files (:defaults "*.el"))
  :demand t
  :custom
  (mail-user-agent 'mu4e-user-agent) ;; use mu4e for email in emacs
  (mu4e-maildir "~/.mail")
  (mu4e-get-mail-command "offlineimap -o -q") ;; Update with offlineimap
  (mu4e-sent-messages-behavior 'delete) ;; Let GMAIL/IMAP take care of sent messages
  (mu4e-context-policy 'pick-first)
  (mu4e-compose-context-policy 'ask-if-none)
  (mu4e-compose-format-flowed t)
  :init
  (when (require 'smtpmail nil  t) ; smtmp settings
    (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-stream-type 'starttls
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587))
    ;; Kill message buffers on send
  (setq message-kill-buffer-on-exit t)
  ;; mu4e View
  (setq mu4e-attachment-dir "~/Downloads"
        mu4e-view-show-images t
        mu4e-show-addresses t
        mu4e-view-prefer-html t
        mu4e-view-show-images t)

  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  (with-eval-after-load 'ivy
    (setq mu4e-completing-read-function 'ivy-completing-read))
  (when (require 'mu4e-context nil t)
    (setq mu4e-contexts
          `(,(make-mu4e-context
            :name "personal"
            :enter-func
            (lambda () (mu4e-message "Using Personal gmail account."))
            :leave-func
            (lambda () (mu4e-message "leaving Personal gmail account."))
            :match-func
            (lambda (msg)
              (when msg
                (string-match-p "^/personal"  (mu4e-message-field msg :maildir))))
            :vars
            '((user-mail-address  . "jchaffin57@gmail.com")
              (user-full-name     . "Jacob Chaffin")
              (mail-reply-to      . "jchaffin57@gmail.com")
              (smtpmail-smtp-user . "jchaffin57@gmail.com")
              (mu4e-sent-folder   . "/personal/sent")
              (mu4e-drafts-folder . "/personal/drafts")
              (mu4e-refile-folder . "/personal/archive")
              (mu4e-trash-folder  . "/personal/trash")
              (mu4e-compose-signature .
                                      (concat
                                       "Jacob Chaffin\n"
                                       "jchaffin57@gmail.com\n"
                                       "jchaffin@ucla.edu"))))

          ,(make-mu4e-context
            :name "school"
            :enter-func
            (lambda () (mu4e-message "Entering UCLA Gmail account"))
            :leave-func
            (lambda () (mu4e-message "Leaving UCLA Gmail account."))
            :match-func
            (lambda (msg)
              (when msg
                (string-match-p "^/school" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address  . "jchaffin@ucla.edu")
                    (user-full-name     . "Jacob Chaffin")
                    (mail-reply-to      . "jchaffin@ucla.edu" )
                    (smtpmail-smtp-user . "jchaffin@g.ucla.edu")
                    (mu4e-drafts-folder . "/school/drafts")
                    (mu4e-sent-folder   . "/school/sent")
                    (mu4e-refile-folder . "/school/archive")
                    (mu4e-trash-folder  . "/school/trash")
                    (mu4e-compose-signature .
                                            (concat
                                             "Jacob Chaffin\n"
                                             "UCLA 2019\n"
                                             "Linguistics and Computer Science\n"
                                             "jchaffin@ucla.edu")))))))

  ;; From [[https://www.djcbsoftware.nl/code/mu/mu4e/Some-context-tricks.html#Some-context-tricks][9.5 - Some Context Tricks]]
  ;; This sets `mu4e-user-mail-address-list' to the concatenation of all
  ;; `user-mail-address' values for all contexts. If you have other mail
  ;; addresses as well, you'll need to add those manually.
  (setq mu4e-user-mail-address-list
        (delq nil
              (mapcar (lambda (context)
                        (when (mu4e-context-vars context)
                          (cdr
                           (assq
                            'user-mail-address
                            (mu4e-context-vars context)))))
                      mu4e-contexts)))
  :config
  ;; Org Contacts
  (setq mu4e-org-contacts-file
        (expand-file-name "contacts.org" org-directory))
  ;; Capture contact at point using 'C-a o' in `mu4e-headers-mode'
  (add-to-list 'mu4e-headers-actions
               '("org-contact-add" . mu4e-action-add-org-contact) t)
  ;; Capture contact at point using 'C-a o' in `mu4e-vie-mode'
  (add-to-list 'mu4e-view-actions
               '("org-contact-add" . mu4e-action-add-org-contact) t))
#+END_SRC

**** GNUs Dired

#+BEGIN_SRC emacs-lisp
(use-package gnus-dired
  :straight (gnus-dired :type built-in)
  :init
  (when (featurep 'mu4e)
    (setq gnus-dired-mail-mode 'mu4e-user-agent))

  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let ((buffers))
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffers) buffers))))
      (nreverse buffers)))
  :hook
  (dired-mode . turn-on-gnus-dired-mode))
#+END_SRC

**** Mu Notifications

#+BEGIN_SRC emacs-lisp
(use-package mu4e-alert
  :if (featurep 'mu4e)
  :after (mu4e)
  :config
  (mu4e-alert-enable-notifications))
#+END_SRC

**** mu4e maildirs extension

#+NAME: mu-maildirs
#+BEGIN_SRC emacs-lisp
(use-package mu4e-maildirs-extension
  :if (featurep 'mu4e)
  :after (mu4e)
  :init
  (mu4e-maildirs-extension-load))
#+END_SRC

**** mu4e conversion

#+BEGIN_SRC emacs-lisp
(use-package mu4e-conversation
  :if (featurep 'mu4e))
#+END_SRC

*** google contacts

#+BEGIN_SRC emacs-lisp
(use-package google-contacts)
#+END_SRC

** Bug Tracking
:PROPERTIES:
:ID:       B9B7C7ED-8D05-44F2-95C3-C08F008966C5
:END:

#+BEGIN_SRC emacs-lisp
(use-package debbugs)
#+END_SRC

** Browse at remote
:PROPERTIES:
:ID:       5A68686E-3476-47FD-AF46-E76FEA8FBD84
:END:

#+NAME: vcs/remote
#+BEGIN_SRC emacs-lisp
(use-package browse-at-remote
  :init
  (if (eq system-type 'darwin)
      (when (fboundp 'osx-browse-url-chrome)
        (setq browse-url-browser/function 'osx-browse-url-chrome))))
#+END_SRC

* Writing
** Notetaking
*** Lorem Ipsum

#+NAME: notes/lorem-ipsum
#+BEGIN_SRC emacs-lisp
(use-package lorem-ipsum)
#+END_SRC

*** Deft

[[https://jblevins.org/projects/deft/][Deft]] is a notetaking application for Emacs.

#+NAME: notes/deft
#+BEGIN_SRC emacs-lisp
(use-package deft
  :if (eq system-type 'darwin)
  :bind ("C-x C-n" . deft)
  :custom
  (deft-auto-save-interval 0)
  (deft-extensions '("org"))
  (deft-directory "~/Dropbox/org/notes/")
  (deft-use-filename-as-title t)
  (deft-default-extension "org"))
#+END_SRC

*** Org OneNote

Work account is for office portal, not a Microsoft account. I need integration or authorization via office.

#+NAME: cloud-onenote
#+BEGIN_SRC emacs-lisp
(use-package org-onenote
  :init
  (require 'secrets)
  :custom
  (org-onenote-token-file
   (emacs-var-dir "org/onenote-oauth2.plstore")))
#+END_SRC

*** Org Velocity

#+NAME: notes/velocity
#+BEGIN_SRC emacs-lisp
  (use-package org-velocity
    :straight org-plus-contrib
    :custom
    (org-velocity-bucket (expand-file-name "notes.org" org-directory)))
#+END_SRC

*** Org annotate file

Also see [[https://www.emacswiki.org/emacs/InPlaceAnnotations][EmacsWiki: In Place Annotations]]
#+BEGIN_SRC emacs-lisp
  (use-package org-annotate-file
    :straight org-plus-contrib
    :bind
    ("C-c C-l" . org-annotate-file)
    :custom
    (org-annotate-file-storage-file "~/Dropbox/org/annotate.org"))

#+END_SRC

** Nov

[[https://github.com/wasamasa/nov.el][Nov.el]] is a major mode for reading EPUB documents in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package nov
  :demand t
  :after (justify-kp)
  :mode (("\\.epub\\'" . nov-mode))
  :init
  (defun nov/visual ()
    "Setup `nov-mode'"
    (let ((nov-text-width most-positive-fixnum) ; inhibit text filling
          (visual-fill-column-center-text t))
      (unless visual-line-mode
        (visual-line-mode 1))
      (unless visual-fill-column-mode
        (visual-fill-column-mode 1))))

  (defun nov/window-configuration-change-hook ()
    (nov--justify-text)
    (remove-hook 'window-configuration-change-hook
                 'nov/window-configuration-change-hook t))

  (defun nov--justify-text ()
    ;; Justify text using `justify-kp'.
    (when (require 'justify-kp nil t)
      (if (get-buffer-window)
          (let ((max-width (pj-line-width))
                buffer-read-only)
            (save-excursion
              (goto-char (point-min))
              (while (not (eobp))
                (when (not (looking-at "^[[:space:]]*$"))
                  (goto-char (line-end-position))
                  (when (> (shr-pixel-column) max-width)
                    (goto-char (line-beginning-position))
                    (pj-justify)))
                (forward-line 1))))
        (add-hook 'window-configuration-change-hook
                  'nov/window-configuration-change-hook nil t))))
  :config
  (when (functionp 'org-pretty-tags-inhibit-overlays)
    (advice-add 'nov-mode :around #'org-pretty-tags-inhibit-overlays))
  :hook
  (nov-mode . nov/visual)
  (nov-post-html-render . nov--justify-text))
#+END_SRC

** Readspec  Mode

Based off [[http://ergoemacs.org/emacs/emacs_novel_reading_mode.html][Emacs: Novel Reading Mode]]

#+BEGIN_SRC emacs-lisp
(defun toggle-read-spec-mode ()
  "Setup current frame to be suitable for specifcation/text

• Set frame width to 70
• Line wrap at word boundaries.
• Line spacing is increased.
• Proportional width font is used."
  (interactive)
   (if (eq (frame-parameter (selected-frame) 'width) 70)
        (progn
          (set-frame-parameter (selected-frame) 'width 106)
          (org-variable-pitch-minor-mode 0)
          (setq line-spacing nil)
          (setq word-wrap nil))
      (progn
        (set-frame-parameter (selected-frame) 'width 70)
        (org-variable-pitch-minor-mode 1)
        (setq line-spacing 0.4)
        (setq word-wrap t))))
#+END_SRC

** Writeroom

#+NAME: writing-writeroom
#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode)
#+END_SRC

* Code
** Flycheck

#+NAME: flycheck-spec
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :custom
    (flycheck-global-modes nil)
    (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    (flycheck-emacs-lisp-load-path 'inherit)
    :init
    (defun dotemacs/flycheck-enable (mode)
      "Use flycheck in MODE."
      (push mode flycheck-global-modes))

    (defun dotemacs/flycheck-enable-hook ()
      "Enable Flycheck as a hook."
      (when (fboundp 'flycheck-mode)
        (flycheck-mode +1)))

    (defun dotemacs/toggle-flycheck-error-list ()
      "Toggle flycheck's error list window.
If the error list is visible, hide the window, else
display the buffer."
      (interactive)
      (-if-let (window (flycheck-get-error-list-window))
          (quit-window nil window)
        (flycheck-list-errors)))

    (defun dotemacs/goto-flycheck-error-list ()
      "Open and go to the error list buffer."
      (interactive)
      (unless (get-buffer-window
               (get-buffer flycheck-error-list-buffer))
        (flycheck-list-errors)
        (switch-to-buffer-other-window
         flycheck-error-list-buffer))))
#+END_SRC

** LSP
*** LSP mode

#+NAME: lsp/mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands (lsp)
  :custom
  (lsp-prefer-flymake nil))
#+END_SRC

*** LSP UI

#+NAME: lsp/ui
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :commands (lsp-ui-mode lsp-ui-imenu)
  :custom
  (lsp-ui-doc-use-webkit t)
  (lsp-ui-doc-position 'at-point)
  (lsp-ui-doc-header t)
  (lsp-ui-flycheck-enable t)
  (lsp-ui-peek-always-show t)
  :init
  (with-eval-after-load 'lsp-ui
    (el-patch-feature lsp-ui-doc)
    (el-patch-defun lsp-ui-doc--webkit-resize-callback (size)
      (xwidget-resize (lsp-ui-doc--webkit-get-xwidget)
                      (el-patch-wrap 1 (round (aref size 0)))
                      (el-patch-wrap 1 (round (aref size 1))))
      (lsp-ui-doc--move-frame (lsp-ui-doc--get-frame))))
  :bind
  (:map lsp-ui-mode-map
        ("C-c l" . lsp-ui-imenu)
        ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
        ([remap xref-find-references]  . lsp-ui-peek-find-references)))
#+END_SRC


*** company lsp

#+NAME: lsp/company
#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :commands (company-lsp)
  :custom
  (company-transformers nil)
  (company-lsp-async t)
  (company-lsp-cache-candidates nil))
#+END_SRC

*** dap mode
:PROPERTIES:
:ID:       EEB674B8-A1AA-4965-834F-0550F5FBF4A7
:END:

#+NAME: dap/mode
#+BEGIN_SRC emacs-lisp
(use-package dap-mode)
#+END_SRC

** Code Style
*** Tabs


#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2
              indent-tabs-mode nil)
#+END_SRC

*** Line numbers

#+BEGIN_SRC emacs-lisp
  ; Line Numbering
  (when (>= emacs-major-version 26)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode))

#+END_SRC

*** Folding
**** Vimish fold

#+BEGIN_SRC emacs-lisp
(use-package vimish-fold
  :init
  (vimish-fold-global-mode 1))
#+END_SRC

**** Hide show

***** hideshow visual

#+BEGIN_SRC emacs-lisp
(use-package hideshowvis
  :init
  (defface dotemacs-folded-face
    `((((background dark))
       :inherit font-lock-comment-face
       :background ,(plist-get dotemacs-theme-colors :base00))
      (((background light))
       :inherit font-lock-comment-face
       :background ,(plist-get dotemacs-theme-colors :base03)))
      "Face to highlight `hideshow' overlays."
      :group 'hideshow)
  (defun display-fold-overlay (ov)
    (when (eq 'code (overlay-get ov 'hs))
      (when (featurep 'vimish-fold)
        (overlay-put
         ov 'before-string
         (propertize "..." 'display
                     (list vimish-fold-indication-mode
                           'empty-line
                           'vimish-fold-fringe))))
      (overlay-put
       ov 'display
       (propertize" [...] " 'face 'dotemacs-folded-face))))
  (setq hs-set-up-overlay 'display-fold-overlay)

  (defun hideshowvis/enable ()
    (hideshowvis-minor-mode 1))
  :hook
  (prog-mode . hideshowvis/enable)
  (bibtex-mode . hideshowvis/enable))

#+END_SRC

***** hideshow org

#+BEGIN_SRC emacs-lisp
 (use-package hideshow-org
   :init
    (require 'hideshow-org)
    :bind
    (:map org-mode-map
          ("C-c H" . hs-org/minor-mode)))
#+END_SRC

*** Comments

#+BEGIN_SRC emacs-lisp
(use-package smart-comment
  :bind ("M-;" . smart-comment))
#+END_SRC

*** Comments

#+BEGIN_SRC emacs-lisp
(use-package smart-comment
  :bind ("M-;" . smart-comment))
#+END_SRC

*** Editorconfig

#+BEGIN_SRC emacs-lisp
;; Editorconfig
(use-package editorconfig
  :if (executable-find "editorconfig")
  :init (editorconfig-mode 1))
#+END_SRC

*** Google C Style

#+NAME: google-c-styleguide
#+BEGIN_SRC emacs-lisp
(use-package google-c-style
  :straight
  (google-c-style
   :host github
   :repo "google/styleguide"
   :branch "gh-pages")
  :init
  (defun dotemacs/google-c-style ()
    (google-set-c-style)
    (google-make-newline-indent))
  :hook
  ((c++-mode . dotemacs/google-c-style)
   (java-mode . dotemacs/google-c-style)))
#+END_SRC

*** Formatting
**** Electric Operator

#+BEGIN_SRC emacs-lisp
(use-package electric-operator)
#+END_SRC

**** Format all

#+NAME: tools-code-format
#+BEGIN_SRC emacs-lisp
(use-package format-all)
#+END_SRC

*** Agressive Indent Mode

#+BEGIN_SRC emacs-lisp
(use-package  aggressive-indent
  :hook
  (emacs-lisp . aggressive-indent-mode))

#+END_SRC

** Eldoc

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :config
  (when (fboundp 'paredit)
    (eldoc-add-command 'paredit-backward-delete 'paredit-close-round)))
#+END_SRC

** Pair Matching
*** Paredit

We could use ~:init~ key to hook the ~enable-paredit-mode~
function to each of the implementing languages like is
done [[https://github.com/tomjakubowski/.emacs.d/blob/master/init.el][here]], but I think adding the hook in the configuration
block of the programming language is easier to follow and
offers more meaningful semantics.

#+NAME: core/paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :config
  (progn
    (autoload 'enable-paredit-mode "paredit"
      "Turn on pseudo-structural editing of Lisp code." t)))
   #+END_SRC

*** Smartparens

Like paredit, [[https://github.com/Fuco1/smartparens][smartparens]] is a minor-mode for managing parens pairs. However, it also offers support for curly brackets in JavaScript objects, angle brackets in HTML, and most other major programming languages. I think I the "delete-on-command" behavior of paredit for lisp programming, but in languages where locating unmatched pairs is less comparable to searching for a needle in a haystack, =smartparens= are a great productivity tool.

#+NAME: smartparens-config
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :commands (sp-split-sexp sp-newline sp-up-sexp)
  :custom
  (sp-show-pair-delay
   (or (bound-and-true-p sp-show-pair-delay) 0.2))
  (sp-show-pair-from-inside t)
  (sp-highlight-pair-overlay nil)
  (sp-highlight-wrap-overlay nil)
  (sp-highlight-wrap-tag-overlay nil)
  :init
  (defun smartparens-pair-newline (id action context)
    (save-excursion
      (newline)
      (indent-according-to-mode)))

  (defun smartparens-pair-newline-and-indent (id action context)
    (smartparens-pair-newline id action context)
    (indent-according-to-mode))

  (defun conditionally-enable-smartparens-mode ()
    "enable `smartparens-mode' in the minibuffer, during `eval-expression'."
    (if (eq this-command 'eval-expression)
        (smartparens-mode)))


  (defun smartparens-adaptive-overlay-face ()
    (set-face-attribute 'sp-pair-overlay-face nil
                      :inherit 'lazy-highlight
                      :background nil
                      :foreground nil))


  (defun sp-wrap-inline-math ()
    "Wrap marked region as ordinary LaTeX inline math mode."
    (interactive)
    (sp-wrap-with-pair "$"))

  (defun disable-smartparens ()
      "Disable smartparens when `paredit-mode' is enabled."
    (smartparens-mode -1))

  :config
  (require 'smartparens-config)

  ;; enable globally
  (show-smartparens-global-mode +1)

  (smartparens-adaptive-overlay-face)

  (when (featurep 'paredit)
    (add-hook 'paredit-mode-hook #'disable-smartparens))

  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil))
#+END_SRC

*** Rainbow Delimiters

#+NAME: core/rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :commands (rainbow-delimiters-mode)
)
#+END_SRC

*** Parinfer

#+BEGIN_SRC emacs-lisp
(use-package parinfer
  :bind
  ("C-," . parinfer-toggle-mode)
  :custom
  (parinfer-extensions
   '(defaults smart-yank pretty-parens paredit)))

#+END_SRC

**** Lispy

#+NAME: lispy-config
#+BEGIN_SRC emacs-lisp
(use-package lispy
  :config
  (when (functionp 'lispy-set-key-theme)
    (lispy-set-key-theme '(special paredit c-digits))))

#+END_SRC

** Tags
*** Gtags
:PROPERTIES:
:ID:       0E4B8051-2EB4-454F-BBB0-BD57A5AEAFA6
:END:

#+NAME: ggtags-spec
#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :if (and (getenv "GTAGSLABEL") (executable-find "global"))
  :custom (ggtags-highlight-tag nil))
#+END_SRC
*** Ctags

#+BEGIN_EXAMPLE shell
--langdef=org
--langmap=org:.org
--regex-org=/^\*+[ \t]+([a-zA-Z0-9_ ]+)/\1/d,definition/

--exclude=vendor
--exclude=.git
#+END_EXAMPLE

#+begin_example shell
ctags -e -R .
#+end_example

**** ctags update
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ctags-update
  :demand t
  :hook
  (prog-mode . turn-on-ctags-auto-update-mode))
#+END_SRC

** Version Control
*** Diffs

**** ediff

#+BEGIN_SRC emacs-lisp
(use-package ediff
  :custom
  ;; Ignore whitespace
  (ediff-diff-options "-w"))
#+END_SRC

*** Git
**** git modes

#+NAME: git/modes
#+BEGIN_SRC emacs-lisp
(use-package git-modes

  :mode (".projectile\\'" . gitignore-mode))
#+END_SRC

**** Magit
:PROPERTIES:
:ID:       AE7AB6CA-A097-4CB0-9B13-2B131CC2F5D9
:CUSTOM_ID: magit
:END:


[[https://github.com/magit/magit][Magit]] describes itself as one of two git porcelains, the other being
git itself.

A git porcelain is jargon for a program that features a user-friendly
vcs interface, as opposed to lower-level scripting commands.

It's not a vitrified ceramic commonly used for decorative tableware.
Magit would not be very good at that.

As a git client though, magit is awesome.

***** magit mode

#+NAME: magit/mode
#+BEGIN_SRC emacs-lisp
(use-package magit
    :demand t
    :bind
    (("C-c v v" . magit-status)
     ("C-c v m" . magit-merge)
     ("C-c v b" . magit-blame)
     ("C-c v C" . magit-clone)
     ("C-c v i" . magit-init)
     ("C-c v l" . magit-log-buffer-file)
     ("C-c v c" . magit-checkout)
     ("C-c v f" . magit-stage-file)
     ("C-c v p" . magit-pull)
     ("C-c v P" . magit-push)
     ("C-c v S" . magit-stash))

    :init
    (which-key-add-key-based-replacements "C-c v" " Magit")

    (push '(( nil . "magit-\\(.+\\)") . (nil . " \\1"))
          which-key-replacement-alist)
    :custom
    (magit-save-repository-buffers 'dontask)
    (magit-completing-read-function 'ivy-completing-read))
#+END_SRC

***** forge

#+BEGIN_SRC emacs-lisp
(use-package emacsql-sqlite)

(use-package forge
  :after (magit emacsql-sqlite))

#+END_SRC

***** magithub

#+BEGIN_SRC emacs-lisp
(use-package magithub
  :straight (:host github :repo "mgcyung/magithub" :branch "transient")
  :after magit
  :config
  (magithub-feature-autoinject t)
  (setq magithub-clone-default-directory "~/Developer/github"))
#+END_SRC

***** Magit popup
#+BEGIN_SRC emacs-lisp
(use-package magit-popup
  :after (magit)
  :demand t)
#+END_SRC


**** gist.el

Emacs integration for gist.github.com.

[[https://github.com/defunkt/gist.el][Gist]] requires generating a personal access token with ~gist~ scope, and
optionally ~user~ and ~repo~ scopes.

#+NAME: git/gist
#+BEGIN_SRC emacs-lisp
(use-package gist
  :bind
  (("C-c C-g l" . gist-list)
   ("C-c C-g r" . gist-region)
   ("C-c C-g b" . gist-buffer)
   ("C-c C-g p" . gist-buffer-private)
   ("C-c C-g B" . gist-region-or-buffer)
   ("C-c C-g P" . gist-region-or-buffer-private))
  :init
  (push '(( nil . "gist-\\(.+\\)") . (nil . " \\1"))
        which-key-replacement-alist)

  (which-key-add-key-based-replacements
      "C-c C-g" " Gist"))
#+END_SRC

**** Git timemachine

Travel back in time (to your last commit).

#+NAME: git/timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :after (magit-popup)
  :custom
  (git-timemachine-abbreviation-length 7)
  :bind
  ("C-c v t" . git-timemachine-toggle)
  :config
  (setq)
  (which-key-add-key-based-replacements
    "C-c v t" " Timemachine")
  (when (functionp 'org-pretty-tags-inhibit-overlays)
    (advice-add 'git-timemachine-toggle
                :around #'org-pretty-tags-inhibit-overlays)))
#+END_SRC

**** Git messenger

Pop-up feature for viewing the last git commit.

#+NAME: git/messenger
#+BEGIN_SRC emacs-lisp
(use-package git-messenger
  :bind
  ("C-c C-v m" . git-messenger:popup-message))
#+END_SRC

**** Git Gutter
***** git gutter+

#+NAME: gutter/+
#+BEGIN_SRC emacs-lisp
(use-package git-gutter+
  :custom
  (git-gutter+-disabled-modes '(image-mode org-mode))
  :init
  (global-git-gutter+-mode))
#+END_SRC

***** git gutter fringe+

#+NAME:
#+BEGIN_SRC emacs-lisp
(use-package git-gutter-fringe+
  :hook
  (org-mode . git-gutter-fr+-minimal))
#+END_SRC

*** Mercurial
**** Monky

Monky provides an interactive interface for mercurial. It's
essentially to ~hg~ what [[#magit][magit]] is for ~git~.

#+NAME: hg/monky
#+BEGIN_SRC emacs-lisp
(use-package monky
  :custom
  (monky-process-type 'cmdserver))
#+END_SRC

**** ahg

#+NAME: hg/ahg
#+BEGIN_SRC emacs-lisp
(use-package ahg)
#+END_SRC

** Cloud
*** ecloud

#+BEGIN_SRC emacs-lisp
(use-package ecloud
  :ensure-system-package
  (ecloud . azure-cli)
  :straight
  (ecloud :host github
          :type git
          :repo "techniumlabs/ecloud"))

#+END_SRC

*** Docker

#+BEGIN_SRC emacs-lisp
(use-package docker)
#+END_SRC

**** Dockerfile

#+NAME: docker/dockerfile
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile\\'")
#+END_SRC

**** Docker Compose

#+NAME: docker/compose
#+BEGIN_SRC emacs-lisp
(use-package docker-compose-mode
    :mode ("docker-compose.yml\\'" . docker-compose-mode))

#+END_SRC

*** AWS

#+NAME: devops/aws
#+BEGIN_SRC emacs-lisp
(use-package aws
  :config
  (progn
    (autoload 'ec2-desribe-instances "aws")
    (autoload 'ec2-describe-volumes "aws")
    (autoload 'ec2-describe-snapshots "aws")
    (autoload 'ec2-describe-group "aws")
    (autoload 'ec2-get-console "aws")))
#+END_SRC

** Coding misc
*** wakatime

Automate time tracking with [[https://github.com/wakatime/wakatime-mode][wakatime]].

#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode

    :if (executable-find "wakatime")
    :hook
    (prog-mode . wakatime-mode)
    :init
    (defun wakatime-dashboard ()
      (interactive)
      (browse-url "https://wakatime.com/dashboard"))
    :custom
    (wakatime-cli-path
     (file-truename "~/.local/pipx/venvs/wakatime/lib/python3.7/site-packages/wakatime/cli.py"))
    (wakatime-python-bin
     (file-truename "/Users/jacobchaffin/.pyenv/versions/3.7.2/bin/python3.7")))
#+END_SRC

*** Logging
**** logview mode

#+NAME: logview
#+BEGIN_SRC emacs-lisp
(use-package logview)
#+END_SRC

**** lognav mode

#+NAME: lognav
#+BEGIN_SRC emacs-lisp
(use-package lognav-mode)
#+END_SRC

*** floobits

Pair programming.

#+BEGIN_SRC emacs-lisp
(use-package floobits
  :if (file-exists-p (user-home ".floorc.json")))

#+END_SRC

*** rmsbolt

#+BEGIN_SRC emacs-lisp
(use-package rmsbolt)
#+END_SRC

** Languages
*** Assembly

- See Spacemacs [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/asm/][ASM layer]].

**** ASM Mode

#+NAME: asm/mode
#+BEGIN_SRC emacs-lisp
(use-package asm-mode
  :mode (("\\.64sa\\'" . asm-mode)
         ("\\.64da\\'" . asm-mode)
         ("\\.32sa\\'" . asm-mode)
         ("\\.32da\\'" . asm-mode)))
#+END_SRC

**** NASM mode

#+NAME: asm/nasm
#+BEGIN_SRC emacs-lisp
(use-package nasm-mode
  :mode
  (("\\.[n]*\\(asm\\|s\\)\\'" . nasm-mode)))

#+END_SRC

**** ASM Init x86 Lookup

#+NAME: asm/x86-lookup
#+BEGIN_SRC emacs-lisp
(use-package x86-lookup
  :init
  (when (featurep 'pdf-tools)
    (setq x86-lookup-browse-pdf-function
          'x86-lookup-browse-pdf-pdf-tools))

  (defun x86-lookup-install-pdf ()
    (interactive)
    (let ((install-directory (emacs-var-dir "x86-lookup"))
          (remote-url "https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf"))
      (unwind-protect
          (unless (file-directory-p install-directory)
            (make-directory install-directory)
            (cd install-directory)
            (url-retrieve
             remote-url
             (lambda (s)
               (write-region (point) (point-max) "manual.pdf"))))
        (setq x86-lookup-pdf
              (expand-file-name "manual.pdf" install-directory)))))

  :init
  (x86-lookup-install-pdf))

#+END_SRC

*** C/C++
**** cmake

#+NAME: cc/cmake
#+BEGIN_SRC emacs-lisp
(use-package cmake-mode
  :mode (("CMakeLists\\.txt\\'" . cmake-mode)
         ("\\.cmake\\'" . cmake-mode))
  :init
  (with-eval-after-load 'projectile
    (add-to-list 'projectile-project-root-files-top-down-recurring
                 "compile_commands.json"))

  (defun cmake-build-compilation-database ()
    (interactive)
    (let* ((project-directory (cond (projectile-project-root
                                     projectile-project-root)
                                    ((eq 'major-mode 'dired-mode)
                                     dired-directory)
                                    (t default-directory)))
           (build-directory (f-join project-directory "build"))
           (compiledb (f-join build-directory "compile_commands.json")))
      (when (f-exists? (f-join project-directory "CMakeLists.txt"))
        (unless (f-exists? build-directory)
          (mkdir build-directory))
        (with-temp-buffer
          (shell-command "make clean")
          (cd build-directory)
          (cmake-command-run "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON" project-directory))
        (if (f-exists? compiledb)
            (make-symbolic-link (f-slash project-directory) build-directory t)))))

  (defun cmake-mode-dash-docsets ()
    (setq-local dash-plugin-keywords '("cmake")))

  :hook (cmake-mode . cmake-mode-dash-docsets))

#+END_SRC

**** Cquery

#+NAME: cc/cquery
#+BEGIN_SRC emacs-lisp
(use-package cquery
    :if (executable-find "cquery")
    :custom
    (cquery-executable (executable-find "cquery"))
    (cquery-extra-init-params '(:index (:comments 2)
                                :cacheFormat "msgpack"
                                :completion (:detailedLabel t)))
    :init
    (defun cquery/enable ()
      "Enable cquery in the workspace."
      (condition-case nil
         (lsp)
        (user-error nil)))

    :hook
    ((c-mode c++-mode)  . cquery/enable)
    :config
    ;; Alternatively, use lsp-ui-peek interface
    ;; (setq cquery-sem-highlight-method 'font-lock)
    ;; alternatively
    (setq cquery-sem-highlight-method 'overlay)

    ;; For rainbow semantic highlighting
    (with-eval-after-load 'lsp-ui-mode
      (lsp-ui-peek-find-custom 'base "$cquery/base")
      (lsp-ui-peek-find-custom 'callers "$cquery/callers")
      (lsp-ui-peek-find-custom 'vars "$cquery/vars"))

    (cquery-use-default-rainbow-sem-highlight)

    (with-eval-after-load 'projectile
        (add-to-list 'projectile-project-root-files-top-down-recurring
                     ".cquery")))

#+END_SRC

**** rtags

#+NAME: cc/rtags
#+BEGIN_SRC emacs-lisp
(use-package rtags
    :ensure-system-package (rdm . rtags)
    :hook
    ((c-mode c++-mode objc-mode) . rtags-start-process-unless-running))

#+END_SRC

**** llvm mode

#+NAME: cc/llvm
#+BEGIN_SRC emacs-lisp
(use-package llvm-mode
  :straight (llvm-mode :local-repo "~/.emacs.d/etc/local/llvm-mode"))
#+END_SRC

**** Clang Tidy

#+NAME: cc/clang-tidy
#+BEGIN_SRC emacs-lisp
(use-package flycheck-clang-tidy
    :after flycheck
    :if (executable-find "clang-tidy")
    :init
    (defun clang-tidy/enable ()
      (when (and (-non-nil projectile-project-root)
                 (string= projectile-project-type "cmake"))
        (when (fboundp 'flycheck-mode)
          (flycheck-clang-tidy-setup))))
    (add-hook 'c-mode-common-hook 'clang-tidy/enable))

#+END_SRC

**** Clang Format

#+NAME: cc/clang-format
#+BEGIN_SRC emacs-lisp
(use-package clang-format
    :if (executable-find "clang-format")
    :bind (:map c-mode-base-map
                ("C-c i" . clang-format-region)
                ("C-c u" . clang-format-buffer))
    :custom
    (clang-format-style-option "google"))

#+END_SRC

*** Common Lisp

Configuration for common-lisp.

**** common lisp mode

#+NAME: cl/mode
#+BEGIN_SRC emacs-lisp
(use-package lisp-mode
  :straight (lisp-mode :type built-in)
  :init
  (defun common-lisp-setup ()
    "setup for common lisp."
    (if (fboundp 'paredit-mode)
        (paredit-mode +1))
    (if (fboundp 'highlight-symbol-mode)
        (highlight-symbol-mode +1))
    (when (require 'rainbow-delimiters nil t)
      (rainbow-delimiters-mode +1))
    (if (eq system-type 'darwin)
        (setq-local dash-plugin-keywords '("lisp"))))
  :hook
  (lisp-mode . common-lisp-setup))
#+END_SRC

**** Slime

[[https://common-lisp.net/project/slime/][SLIME]] is The Superior Lisp Interaction Mode for Emacs.

#+NAME: cl/slime
#+BEGIN_SRC emacs-lisp :tangle no
(use-package slime
  :defines
  (slime-complete-symbol*-fancy
   slime-completion-at-point-functions)
  :bind
  (:map slime-mode-map
        ("C-c b" . slime-eval-buffer))
  :init
  (setq slime-contribs
        '(slime-fancy slime-indentation slime-scratch)
	      inferior-lisp-program "clisp"
      	;; enable fuzzy matching in code buffer and SLIME REPL
      	slime-complete-symbol*-fancy t
      	slime-completion-at-point-functions 'slime-fuzzy-complete-symbol)
  (defun slime/disable-smartparens ()
    "Disable smartparens in slime repl buffers."
    (when (fboundp 'smartparens-mode)
      (smartparens-strict-mode -1)
      (turn-off-smartparens-mode)))
  :hook
  (slime-repl-mode . slime/disable-smartparens))
#+END_SRC

**** Sly

#+BEGIN_SRC emacs-lisp

(use-package sly
  :custom
  (inferior-lisp-program "clisp")
  (sly-swithc-to-existing-lisp 'always)
  (sly-contribs '(sly-fancy)))

#+END_SRC

*** Clojure

**** Clojure Mode
:PROPERTIES:
:ID:       B09DFF0C-3404-483C-824F-E51A5CE50BCD
:END:

Everything about [[https://gihub.com/clojure-emacs/clojure-mode][clojure]], is awesome. That's
before we even get to [[#cider][CIDER]]...:beer::raised_hands_tone3:

Provides key bindings and font-locking for Clojure.

#+NAME: clj/mode
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :custom (clojure-indent-style :always-indent)

  :mode (("\\.edn\\'"   . clojure-mode)
         ("\\.cljs\\'"  . clojurescript-mode)
         ("\\.cljx\\'"  . clojurex-mode)
         ("\\.cljsc\\'" . clojurec-mode))

  :hook ((clojure-mode . enable-paredit-mode))
  :config
  (defun dotemacs/clj-dash-docsets ()
    "Keywords for Clojure Docsets via Dash.app."
    (setq-local dash-plugin-keywords '("clojure")))

  (defun dotemacs/clj-style-compojure ()
    "Indendation for macros defined in compojure routing framework.

     See https://github.com/weavejester/compojure/wiki/Emacs-indentation."

    (define-clojure-indent
        (defroutes 'defun)
        (GET 2)
        (POST 2)
        (PUT 2)
        (DELETE 2)
        (HEAD 2)
        (ANY 2)
        (OPTIONS 2)
        (PATCH 2)
        (rfn 2)
        (let-routes 1)
        (context 2)))


  (defun dotemacs/clj-style-om-next ()
    "Indendation for om-next macros."
      (put-clojure-indent 'defui '(1 nil nil (1)))
      (put-clojure-indent 'dom/div 1))

  (defun dotemacs/clj-style-guide ()
    "Styleguide for clojure."
    (dotemacs/clj-style-compojure)
    (dotemacs/clj-style-om-next))

  (add-hook 'clojure-mode-hook #'dotemacs/clj-dash-docsets)
  (add-hook 'clojure-mode-hook #'dotemacs/clj-style-guide))
#+END_SRC

**** Clojure Mode Extra Font Locking

Additional syntax highlighting for ~clojure-mode~.

#+NAME: clj/extra-font-locking
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode-extra-font-locking
  :config
  (defun clj/enable-extra-font-locking ()
    (require 'clojure-mode-extra-font-locking))
  :hook
  (clojure-mode . clj/enable-extra-font-locking))
#+END_SRC

**** CIDER
:PROPERTIES:
:ID:       324C7B10-8B92-4C49-8FAC-702C65C7A2EE
:CUSTOM_ID: cider
:END:

[[https://github.com/clojure-emacs/cider][Clojure Interactive Development Environment that Rocks for Emacs]]

#+NAME: clj/cider
#+BEGIN_SRC emacs-lisp
(use-package cider
  :custom
  (cider-repl-use-clojure-font-lock t)
  (cider-repl-result-prefix ";; => ")
  (cider-repl-wrap-history t)
  (cider-repl-history-size 3000)
  (cider-show-error-buffer nil)
  (nrepl-hide-special-buffers t)
  :hook
  (clojure-mode . cider-mode)
  ((cider-mode cider-repl-mode) . eldoc-mode)
  ((cider-mode cider-repl-mode) . cider-company-enable-fuzzy-completion)
  (cider-repl-mode . subword-mode))
#+END_SRC

**** Clojure Refactor

#+NAME: clj/refactor
#+BEGIN_SRC emacs-lisp
(use-package clj-refactor
  :init
  (defun clj/refactor-enable ()
    "Enable clj-refactor in clojure-mode."
    (clj-refactor-mode 1)
    ;; For adding reuire/use/import statements
    (yas-minor-mode 1)
    ;; Unbinds `cider-macroexpand-1'
    (cljr-add-keybindings-with-prefix "C-c C-m"))

  :hook (clojure-mode . clj/refactor-enable))

#+END_SRC

**** ClojureScript

***** elein

[[https://github.com/remvee/elein][Elein]] rovides support for leiningen commands in Emacs.

#+NAME: cljs/elein
#+BEGIN_SRC emacs-lisp
(use-package elein
  :if (executable-find "lein"))
#+END_SRC

***** Cljsbuild

Minor mode offering ~lein cljsbuild~ commands for the Leiningen [[https://github.com/emezeske/lein-cljsbuild][plugin]].

#+NAME: cljs/build
#+BEGIN_SRC emacs-lisp
(use-package cljsbuild-mode
  :if (executable-find "lein")
  :hook ((clojure-mode clojurescript-mode) . cljsbuild-mode))
#+END_SRC

*** Emacs Lisp
**** Emacs lisp mode

#+NAME: core/elisp
#+BEGIN_SRC emacs-lisp
(use-package emacs-lisp-mode
  :straight (emacs-lisp-mode :type built-in)
  :init
  (defun emacs-lisp/setup ()
    "Setup elisp."
    (when (require 'paredit nil t)
	    (paredit-mode +1))
    (when (require 'highlight-symbol nil t)
	      (highlight-symbol-mode +1))
    (when (require 'rainbow-delimiters nil t)
      (rainbow-delimiters-mode +1))
    (setq lisp-indent-function 'lisp-indent-function)
    (setq-local dash-plugin-keywords '("elisp")))

  :hook
  (emacs-lisp-mode . emacs-lisp/setup))
#+END_SRC

**** lisp extra fontlocking

#+BEGIN_SRC emacs-lisp
(use-package lisp-extra-font-lock
  :init
  (lisp-extra-font-lock-global-mode +1))
#+END_SRC

**** Emacs Lisp  Format

#+NAME: elisp/format
#+BEGIN_SRC emacs-lisp
(use-package elisp-format
    :custom
    (elisp-format-column 80))
#+END_SRC

*** Groovy

#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :mode  "\\.gradle\\'"
  :init
  (defun groovy/setup ()
    "Setup `groovy-mode' buffers."
    (setq groovy-indent-offset 2
          tab-width 4
          indent-tabs-mode nil
          c-indent-comments-syntactically-p t))
  :hook
  (groovy-mode . groovy-setup))
#+END_SRC

*** Java
**** java mode
#+NAME: java/mode
#+BEGIN_SRC emacs-lisp
(use-package java-mode
  :straight (java-mode :type built-in)
  :init
  (defun java/setup ()
    "Setup `java-mode' buffers."
    (c-set-offset 'arglist-close '0)
    (setq indent-tabs-mode nil
          tab-width 2
          c-basic-offset 2)
    (setq-local dash-plugin-keywords '("java" "gradle" "groovy")))
  :hook
  (java-mode . java/setup))

#+END_SRC

**** Autodisass Java Bytecode
:PROPERTIES:
:ID:       892B3341-D8D3-4E12-A540-5A19DD54A459
:END:

The [[https://github.com/gbalats/autodisass-java-bytecode][autodisass-java-bytecode]] package enables automatic disassembly of
Java bytecode inside Emacs buffers.

#+NAME: java/disass
#+BEGIN_SRC emacs-lisp
(use-package autodisass-java-bytecode)
#+END_SRC

**** Gradle Mode
:PROPERTIES:
:ID:       0D4DEC79-5E2D-48D0-A8B1-38E2432565C8
:CUSTOM_ID: gradle-mode
:END:

Gradle is a build tool for Java. It's awesome.

#+NAME: java/gradle
#+BEGIN_SRC emacs-lisp
(use-package gradle-mode
  :if (executable-find "gradle")
  :hook
  (java-mode . gradle-mode))
#+END_SRC

**** Lsp Java
***** Lsp Java Mode

#+NAME: lsp/java
#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :defines (lsp-java-enable)
  :custom
  (lsp-java-server-install-dir
   (file-name-as-directory
    (emacs-var-dir "eclipse.jdt.ls" "server")))
  (lsp-java-compilation-guess-arguments t))

#+END_SRC

***** Lsp Java Treemacs

#+NAME: lsp/treemacs
#+BEGIN_SRC emacs-lisp
(use-package lsp-java-treemacs
  :straight lsp-java
  :after (treemacs))
#+END_SRC

**** Dap
***** Dap Java

#+NAME: dap/java
#+BEGIN_SRC emacs-lisp
(use-package dap-java
  :straight dap-mode
  :after (lsp-java))
#+END_SRC

**** Javadoc lookup

#+NAME: java/doc
#+BEGIN_SRC emacs-lisp
(use-package javadoc-lookup
  :bind
  ("C-h j" . javadoc-lookup)
  :custom
  (javadoc-lookup-completing-read-function #'ivy-completing-read))
#+END_SRC

*** JavaScript
**** js2 mode

#+NAME: js/2
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :custom
  (js-indent-level 2)
  :mode (("\\.js\\'" . js2-mode)
         ("\\.mjs\\'" . js2-mode))
  :interpreter "node"
  :hook (js2-mode . lsp))
#+END_SRC

**** JSON

#+NAME: js/json
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :init
  (defun json-mode-style ()
    "Styleguide for JSON Mode."
    (set (make-local-variable 'js-indent-level) 2))

    (defun json-mode-faces ()
    (let ((foreground (face-foreground 'font-lock-variable-name-face)))
      (face-remap-add-relative 'font-lock-keyword-face
                               `(:slant normal :foreground ,foreground))))
  (defun json-inhibit-message ()
      (set (make-local-variable 'inhibit-message) t))

  :hook
  (json-mode . json-mode-style)
  (json-mode . json-mode-faces)
  (json-mode . json-inhibit-message))

#+END_SRC

**** Node JS
***** Add Node Modules Path

#+NAME: node/modules
#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path
  :if (executable-find "node")
  :init
  (progn
    (add-hook 'js-mode-hook #'add-node-modules-path)))
#+END_SRC

***** NPM Mode

#+NAME: node/npm
#+BEGIN_SRC emacs-lisp
(use-package npm-mode
    :if (executable-find "npm")
    :init
    (el-patch-feature npm-mode)
    (el-patch-defun npm-mode--exec-process (cmd)
      "Execute a process running CMD."
      (message (concat "Running " cmd))
      (compile cmd (el-patch-add t)))

    (defun npm-mode-npm-install-global (dep)
      (interactive "sEnter package name: ")
      (npm-mode--exec-process (format "npm i -g %s" dep)))

    :config
    (npm-global-mode)

    :hook
    (js-mode . npm-mode))
#+END_SRC

***** Yarn mode

#+NAME: node/yarn
#+BEGIN_SRC emacs-lisp
(use-package yarn-mode
    :if (executable-find "yarn"))
#+END_SRC

***** NVM

#+NAME: node/nvm
#+BEGIN_SRC emacs-lisp
(use-package nvm
  :if (executable-find "nvm"))
#+END_SRC

**** TypeScript

#+NAME: js/typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :custom
    (typescript-indent-level 2)
    :hook
    (typescript-mode . lsp)
    (typescript-mode . subword-mode))
#+END_SRC

**** Tide mode

#+NAME: js/tide
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :functions (tide/setup)
    :after (:all typescript-mode)
    :demand t
    :init
    (defun tide/setup ()
      "Enable Tide Mode for Typescript."
      (tide-setup)
      (when (fboundp 'flycheck-mode)
        ;; add typescript checkers
        (flycheck-add-mode 'typescript-tslint 'typescript-mode)
        ;; add javascript checkers
        (flycheck-add-next-checker 'javascript-eslint
                                   'javascript-tide
                                   'append)
        (setq flycheck-check-syntax-automatically '(save mode-enabled)))
      (eldoc-mode +1))

    :hook
    (before-save . tide-format-before-save)
    (typescript-mode . tide/setup)
    (typescript-mode . tide-hl-identifier-mode))
#+END_SRC

**** rjsx-mode

Real jsx support.

#+NAME: js/rjsx
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :mode "\\.jsx\\'")
#+END_SRC

**** Flycheck Jest

#+NAME: js/jest
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-jest
    :after flycheck
    :init
    (flycheck-jest-setup))

#+END_SRC

**** CoffeeScript

#+NAME: js/coffee
#+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :mode ("\\.coffee\\'" . coffee-mode))
#+END_SRC

**** Indium

#+NAME: js/indium
#+BEGIN_SRC emacs-lisp
  (use-package indium
    :bind (:map indium-interaction-mode-map
                  ("C-M-b" . indium-eval-buffer))
      :init
      (cl-defun chrome-debugger-launch (&optional
                                          (port "3000")
                                          (host "localhost")
                                          (type "http"))
        "Launch a chromium debugger process on HOST using PORT and protocol TYPE.

        Note this will kill any running instances of Chromium."

        (interactive (list
                      (read-string "Port: " "3000")
                      (read-string "Host: " "localhost")
                      (read-string "Type: " "http")))

        (unless (featurep 'secrets)
          (require 'secrets))

        (if (boundp 'google-api-key)
            (setenv "GOOGLE_API_KEY" google-api-key))
        (if (boundp 'google-api-key)
            (setenv "GOOGLE_DEFAULT_CLIENT_ID" google-default-client-id))
        (if (boundp 'google-default-client-secret)
            (setenv "GOOGLE_DEFAULT_CLIENT_SECRET" google-default-client-secret))
        (let ((process-names (--> (process-list)
                                  (mapcar (lambda (p) (process-name p)) it)))
              (process (get-process "chromium"))
              (ip (concat type "://" host ":" port))
              (chromium-program browse-url-chromium-program))
          (if (shell-command-to-list "pgrep \"Chromium\"")
              (shell-command "killall Chromium"))
          (if (process-live-p process)
              (kill-process process))
          (start-process "chromium" (get-buffer-create "chromium")
                         chromium-program "--remote-debugging-port=9222" ip)))
      :hook
      (js-mode . indium-interaction-mode))
#+END_SRC

*** Python
**** Python Mode

#+NAME: py/python
#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :init
  (when (executable-find "ipython3")
    (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
    (setq python-shell-interpreter "ipython3"
          python-shell-interpreter-args "-i"))
  :config
  (defun python-dash-docsets ()
    (setq-local dash-plugin-keywords
                '("python" "django" "twisted" "sphinx"
                  "flask" "tornado" "sqlalchemy" "numpy"
                  "scipy" "salt" "pandas" "matplotlib"
                  "cvp")))
  (when (eq system-type 'darwin)
    (add-hook 'python-mode-hook #'python-dash-docsets))
  :hook
  (python-mode . lsp))
#+END_SRC

**** Pyenv
***** Pyenv mode

#+NAME: pyenv/mode
#+BEGIN_SRC emacs-lisp
  (use-package pyenv-mode
    :if (executable-find "pyenv")
    :init
    (add-to-list 'exec-path (user-home ".pyenv" "shims"))
    (setenv "WORKON_HOME" (file-name-as-directory (user-home ".pyenv" "versions")))
    (pyenv-mode)
    :bind
    ("C-x p e" . pyenv-activate-current-project)
    ("C-x p s" . pyenv-mode-set)
    (:map pyenv-mode-map
          ("C-c C-s" . nil))
    :commands
    (pyenv-mode-set pyenv-mode-unset pyenv-mode-versions)
    :config

    (defvar pyenv-current-version nil nil)

    (defun pyenv-init()
      "Initialize pyenv's current version to the global one."
      (let ((global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global"))))
        (message (concat "Setting pyenv version to " global-pyenv))
        (pyenv-mode-set global-pyenv)
        (setq pyenv-current-version global-pyenv)))

    (add-hook 'after-init-hook 'pyenv-init)

    (progn
      (with-eval-after-load 'projectile
        (defun projectile-pyenv-mode-set ()
          "Set pyenv version matching project name."
          (let ((project (projectile-project-name)))
            (if (member project (pyenv-mode-versions))
                (pyenv-mode-set project)
              (pyenv-mode-unset))))

        (add-hook 'projectile-after-switch-project-hook
                  'projectile-pyenv-mode-set))

      ;; http://rakan.me/emacs/python-dev-with-emacs-and-pyenv/
      (defun pyenv-activate-current-project ()
        "Automatically activates pyenv version if .python-version file exists."
        (interactive)
        (let ((python-version-directory (locate-dominating-file (buffer-file-name) ".python-version")))
          (if python-version-directory
              (let* ((pyenv-version-path (f-expand ".python-version" python-version-directory))
                     (pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8))))
                (pyenv-mode-set pyenv-current-version)
                (message (concat "Setting virtualenv to " pyenv-current-version))))))))
#+END_SRC

**** Pyenv Auto Set

#+NAME: pyenv/auto
#+BEGIN_SRC emacs-lisp
(use-package pyenv-mode-auto)
#+END_SRC

**** Virtualenv Wrapper

#+NAME: py/virtualenvwrapper
#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
    :init
    (setq venv-dirlookup-names '(".pyenv" ".venv"))
    (setq venv-location (getenv "WORKON_HOME"))
    :config
    (when (fboundp 'projectile-mode)
      (setq projectile-switch-project-action
            '(lambda ()
              (venv-projectile-auto-workon)
              (projectile-find-file)))))

#+END_SRC

**** Pyvenv

#+NAME: py/venv
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
    :requires (virtualenvwrapper)
    :init
    (pyvenv-mode +1))
#+END_SRC

**** with venv

#+BEGIN_SRC emacs-lisp
(use-package with-venv)
#+END_SRC

**** livepy mode

#+BEGIN_SRC emacs-lisp
(use-package live-py-mode)
#+END_SRC

**** Pip Requirements

#+NAME: py/pip
#+BEGIN_SRC emacs-lisp
(use-package pip-requirements)

#+END_SRC

**** Pydoc

#+NAME: py/doc
#+BEGIN_SRC emacs-lisp
(use-package pydoc)
#+END_SRC

**** EIN

The [[https://github.com/millejoh/emacs-ipython-notebook][emacs ipython notebook]] client.

#+NAME: py/notebook
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ein
  :config
  (setq ein:use-smartrep t))
#+END_SRC

*** Prolog

#+NAME: lang/prolog
#+BEGIN_SRC emacs-lisp
(use-package prolog-mode
  :straight (prolog-mode :type built-in)
  :mode "\\.pl\\'")
#+END_SRC

*** Ruby
**** Ruby Mode

#+NAME: ruby/mode
#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :mode "\\.rb\\'"
  :interpreter "ruby"
  :init
  (defun ruby-dash-docsets ()
    (setq-local dash-plugin-keywords '("ruby" "rails")))
  :hook
  (ruby-mode . ruby-dash-docsets))

#+END_SRC

**** Enhanced Ruby Mode

#+NAME: ruby/enhanced
#+BEGIN_SRC emacs-lisp
(use-package enh-ruby-mode
    :after ruby-mode
    :demand t
    :mode "\\.rb\\'"
    :config
    (add-hook 'enh-ruby-mode-hook #'dotemacs/ruby-dash-docsets))
#+END_SRC

**** Inf ruby

#+NAME: ruby/inf
#+BEGIN_SRC emacs-lisp
(use-package inf-ruby
    :hook
    ((ruby-mode enh-ruby-mode) . inf-ruby-minor-mode)
    (compilation-filter . inf-ruby-auto-enter))
#+END_SRC

**** RVM

#+NAME: ruby/rvm
#+BEGIN_SRC emacs-lisp
(use-package rvm
  :init
  (rvm-use-default))
#+END_SRC

**** Robe

#+NAME: ruby/robe
#+BEGIN_SRC emacs-lisp
  (use-package robe
    :init
    ;; ensure `rvm' activates the proper project Ruby
    ;; before `robe-start' runs.
    (when (featurep 'rvm)
      (defadvice inf-ruby-console-auto
          (before activate-rvm-for-robe activate)
        (rvm-activate-corresponding-ruby)))

    (defun robe/enable ()
      "Enable `robe-mode'."
      (robe-mode 1)
      (when (fboundp 'company-mode)
        (let ((backends (cons 'company-robe company-backends)))
          (set (make-local-variable 'company-backends) backends))))

    :hook
    ((ruby-mode enh-ruby-mode) . robe/enable))
#+END_SRC

**** Yard Mode

#+NAME: ruby-yard
#+BEGIN_SRC emacs-lisp
(use-package yard-mode
  :hook
  ((ruby-mode enh-ruby-mode) . yard-mode)
  ((ruby-mode enh-ruby-mode) . eldoc-mode))

#+END_SRC

**** Homebrew mode

Mode for editing Homebrew formula.

#+BEGIN_SRC emacs-lisp
(use-package homebrew-mode)
#+END_SRC

*** Ocaml
**** Utop

#+NAME: ocaml/utop
#+BEGIN_SRC emacs-lisp
(use-package utop)
#+END_SRC

**** Merlin

#+NAME: ocaml/merlin
#+BEGIN_SRC emacs-lisp
(use-package merlin
  :custom
  (merlin-command 'opam)
  (merlin-error-after-save nil))
#+END_SRC

**** caml mode

#+NAME: ocaml/caml
#+BEGIN_SRC emacs-lisp
(use-package caml
  :hook
  (caml . ocaml/merlin))
#+END_SRC

**** Tuareg

#+NAME: ocaml/tuareg
#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :mode
    ("\\.ml\\'" . tuareg-mode)

    :init
    (defun tuareg/prettify-symbols ()
      "Enable `prettify-symbols-mode' for `tuareg-mode'."
      (when (functionp 'prettify-symbols-mode)
        (prettify-symbols-mode)))

    :hook
    (tuareg-mode . tuareg/prettify-symbols)
    (tuareg-mode . merlin-mode)
    (tuareg-mode . lsp))
#+END_SRC

**** Dune

#+NAME: ocaml/dune
#+BEGIN_SRC emacs-lisp
(use-package dune
  :straight
  (dune
   :host github
   :type git
   :repo "ocaml/dune"
   :files ("editor-integration/emacs/dune"
           "editor-integration/emacs/dune.el"
           "editor-integration/emacs/dune-flymake.el"))
  :mode
  ("dune\\'" . dune-mode)
  ("dune-project\\'" . dune-mode)

  :ensure-system-package
  (dune . "opam install dune")
  :init

  (with-eval-after-load 'projectile
    (projectile-register-project-type 'dune
                                      '("dune-project")
                                      :compile "dune build"
                                      :test "dune runtest"
                                      :run "dune exec"))

  :hook
  (dune-mode . enable-paredit-mode))
#+END_SRC

**** Reason Mode

#+NAME: ocaml/reason
#+BEGIN_SRC emacs-lisp
(use-package reason-mode
  :hook
  (reason . merlin-mode))
#+END_SRC

*** Scala
**** Scala Mode

#+NAME: scala/mode
#+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :interpreter
  ("scala" . scala-mode))
#+END_SRC

**** Sbt

#+NAME: scala/sbt
#+BEGIN_SRC emacs-lisp
(use-package sbt-mode)
#+END_SRC

*** Web
**** web mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :bind
    (:map web-mode-map
          ("M-n" . web-mode-tag-match))
    :mode
    (("\\.phtml\\'"      . web-mode)
     ("\\.tpl\\.php\\'"  . web-mode)
     ("\\.twig\\'"       . web-mode)
     ("\\.html\\'"       . web-mode)
     ("\\.htm\\'"        . web-mode)
     ("\\.[gj]sp\\'"     . web-mode)
     ("\\.as[cp]x?\\'"   . web-mode)
     ("\\.eex\\'"        . web-mode)
     ("\\.erb\\'"        . web-mode)
     ("\\.mustache\\'"   . web-mode)
     ("\\.handlebars\\'" . web-mode)
     ("\\.hbs\\'"        . web-mode)
     ("\\.eco\\'"        . web-mode)
     ("\\.ejs\\'"        . web-mode)
     ("\\.djhtml\\'"     . web-mode)
     ("\\.tsx\\'"        . web-mode))

    :custom
    (web-mode-engines-alist
     '(("php" . "\\.phtml\\'")
       ("blade" . "\\.blade\\'")))
    (web-mode-enable-auto-pairing t)
    (web-mode-enable-css-colorization t)
    (web-mode-enable-block-face t)
    (web-mode-enable-part-face t)
    (web-mode-enable-comment-keywords t)
    (web-mode-enable-heredoc-fontification t)
    (web-mode-enable-current-element-highlight t)
    (web-mode-enable-current-column-highlight t)
    (web-mode-markup-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-style-padding 1)
    (web-mode-script-padding 1)
    (web-mode-block-padding 0)
    (web-mode-comment-style 2)

    :config

    (defun web/tsx ()
      "Enable tide-mode in Typescript tsx buffers."
      (when (string-equal "tsx" (file-name-extension buffer-file-name))
        (when (fboundp 'tide/setup)
          (tide/setup))
        (when (fboundp 'flycheck-add-mode)
          (flycheck-add-mode 'typescript-tslint 'web-mode))))

    (defun web/docsets ()
      "Set Dash docsets for `web-mode'"
      (when (eq system-type 'darwin)
        (setq-local dash-plugin-keywords
                    '("css" "html" "javascript" "react"))))
    :hook
    (web-mode . web/tsx)
    (web-mode . web/docsets))
#+END_SRC

**** HTML

***** HTML mode

#+NAME: html/mode
#+BEGIN_SRC emacs-lisp
(use-package html-mode
  :straight (html-mode :type built-in)
  :hook
  (html-mode . lsp))
#+END_SRC

***** Tag Edit

#+NAME: html/tagedit
#+BEGIN_SRC emacs-lisp
  (use-package tagedit
    :init
    (defun tagedit/enable ()
      "Enable `tagedit-mode'"
      (tagedit-add-experimental-features)
      (tagedit-mode +1))

    :hook
    (html-mode . tagedit/enable))
#+END_SRC

***** Auto rename tag

#+BEGIN_SRC emacs-lisp
(use-package auto-rename-tag)
#+END_SRC


***** Htmlize

#+NAME: html/lize
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC

**** CSS
***** css mode

#+NAME: css/mode
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :custom (css-indent-offset 2)
  :hook
  (css-mode . lsp))
#+END_SRC

***** Less

#+NAME: css/less
#+BEGIN_SRC emacs-lisp
(use-package less-mode
  :mode "\\.less\\'"
  :hook
  (less-mode . lsp))
#+END_SRC

***** sass mode

#+NAME: css/sass
#+BEGIN_SRC emacs-lisp
(use-package sass-mode
  :mode "\\.sass\\'"
  :hook
  (sass-mode . lsp))
#+END_SRC

***** scss mode

#+NAME: css/scss
#+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :mode "\\.scss\\'"
  :hook
  (scss-mode . lsp))
#+END_SRC

**** Nginx

#+NAME: web/nginx
#+BEGIN_SRC emacs-lisp
(use-package nginx-mode
    :mode ("/nginx/sites-\\(?:available|enabled\\)/" . nginx-mode))
#+END_SRC

**** Emmet

#+NAME: web/emmet
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :hook
  ((css-mode html-mode web-mode) . emmet-mode))
#+END_SRC

*** Markdown
**** markdown mode

- See https://jblevins.org/projects/markdown-mode/

#+NAME: md/mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode ("\\.\\(m\\(ark\\)?down\\|md\\)$" . markdown-mode)
    :preface
    (defun markdown-open-preview ()
      "Use Marked 2 to preview the current file"
      (interactive)
      (let ((app-list (mapcar #'car (counsel-osx-app-list))))
        (if (member "Marked" app-list)
            (shell-command
             (format
              "open -a 'Marked' %s"
              (shell-quote-argument (buffer-file-name)))))))
    :init
    (defun md/visual ()
      "Hook to enable visual fill column in markdown mode buffers. "
      (when (featurep 'visual-fill-column)
        (visual-fill-column-mode 1)
        (visual-line-mode 1)))
    (defun md/font ()
      "Hook to enable variable-pitch font in markdown mode buffers."
      (when (functionp 'variable-pitch-mode)
        (variable-pitch-mode 1)))
    :custom
    (markdown-command "multimarkdown")
    (markdown-open-command #'markdown-open-preview)
    :mode
    (("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :hook
    (markdown-mode . md/font))
#+END_SRC

**** markdown-mode+

#+NAME: md/plus
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode+)
#+END_SRC

**** markdown toc

#+NAME: md/toc
#+BEGIN_SRC emacs-lisp
(use-package markdown-toc)
#+END_SRC

**** markdownfmt

#+NAME: md/fmt
#+BEGIN_SRC emacs-lisp
(use-package markdownfmt
  :bind (:map markdown-mode-map
	      ("C-c C-f" . markdown-format-buffer))
  :hook
  (markdown-mode . markdownfmt-enable-on-save))
#+END_SRC

**** Livedown

#+NAME: md/livedown
#+BEGIN_SRC emacs-lisp
  (use-package livedown
      :straight (livedown
                 :type git
                 :host github
                 :repo "shime/emacs-livedown")
      :custom (livedown-open nil)
      :init
      (when (featurep 'xwidget-internal)
        (unless (featurep 'xwidget)
          (require 'xwidget))

        (defadvice livedown-preview (after livedown-preview-after activate)
          (xwidget-webkit-browse-url "http://localhost:1337"))))
#+END_SRC

*** Applescript

#+BEGIN_SRC emacs-lisp
(use-package apples-mode
  :mode "\\.applescript\\'")
#+END_SRC

*** Scheme

#+NAME: lang/racket
#+BEGIN_SRC emacs-lisp
(use-package racket-mode
  :mode "\\.ss\\'"
  :hook
  (racket-mode . paredit-mode))
#+END_SRC

*** Yaml

#+NAME: lang/yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
    :mode (("\\.yml\\'" . yaml-mode)
           (".clang-tidy\\'" . yaml-mode)))
#+END_SRC

* Footnotes

[fn:1] [[https://github.com/d12frosted/homebrew-emacs-plus][d12frosted/homebrew-emacs-plus]]

[fn:2] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/General-Variables.html#General-Variables][Emacs Manual - C.4.1 General Variables]]

[fn:3] [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Mastering Emacs - Keeping Secrets in Emacs GnuPG Auth Sources]]

[fn:4] [[https://www.quora.com/Is-Windows-POSIX-compliant][Quora - Is Windows POSIX compliant?]]

[fn:5] [[https://www.emacswiki.org/emacs/EmacsForMacOS][Emacs Wiki - Emacs For MacOS]]

[fn:6] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][Emacs Manual - 51.1.4 Saving Customizations]]

[fn:7] [[http://ergoemacs.org/emacs/dictionary_lookup.html][Ergo Emacs - Dictionary Lookup]]

[fn:8] [[https://www.emacswiki.org/emacs/NeoTree][Emacs Wiki - NeoTree]]

[fn:9] [[https://www.emacswiki.org/emacs/WindowResize][Emacs Wiki - Window Resize]]

[fn:10] [[https://matt.hackinghistory.ca/2015/11/11/note-taking-with-pdf-tools/][Note taking with pdf-tools]]

[fn:11] http://mbork.pl/2018-04-28_org-mru-clock
