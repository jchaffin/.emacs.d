#+title: Dotemacs
#+language: en
#+STARTUP: hideblock
#+AUTHOR: Jacob Chaffin
#+PROPERTY: :header-args :tangle yes
#+OPTIONS: num:nil toc:2 tags:nil todo:nil H:3 tex:nil latex:nil
#+SETUPFILE: ./etc/org/html-themes/theme-readtheorg.setup

* Table Of Contents :TOC_3_gh:noexport:
- [[#emacs][Emacs]]
  - [[#startup][Startup]]
    - [[#depedencies][Depedencies]]
    - [[#initial-display][Initial Display]]
    - [[#initial-setup][Initial Setup]]
    - [[#rebooting][Rebooting]]
    - [[#reloading][Reloading]]
    - [[#evaluating][Evaluating]]
  - [[#utilities][Utilities]]
    - [[#macros][Macros]]
    - [[#functions][Functions]]
    - [[#buffer-utilities][Buffer utilities]]
    - [[#window-utilities][Window utilities]]
    - [[#file-utilities][File utilities]]
  - [[#package-manager][Package Manager]]
    - [[#goto-local-package-repository][Goto local package repository]]
    - [[#browse-straight-repository-at-github][Browse straight repository at GitHub]]
  - [[#security][Security]]
    - [[#network-security][Network security]]
    - [[#encryption][Encryption]]
  - [[#keybindings][Keybindings]]
    - [[#bind-key][Bind key]]
    - [[#hydra][Hydra]]
    - [[#which-key][Which Key]]
    - [[#speed-type][Speed Type]]
    - [[#counsel-straight][Counsel straight]]
  - [[#system][System]]
    - [[#exec-path-from-shell][Exec Path From Shell]]
    - [[#system-packages][System Packages]]
    - [[#anything][Anything]]
    - [[#prodigy][Prodigy]]
    - [[#macos][macOS]]
    - [[#save-place-mode][save place mode]]
    - [[#custom-file][Custom File]]
    - [[#backup-files][Backup Files]]
    - [[#autosave][Autosave]]
    - [[#lockfiles][Lockfiles]]
    - [[#shortcuts][Shortcuts]]
    - [[#auto-revert-mode][Auto Revert Mode]]
  - [[#text-editing][Text editing]]
    - [[#editing][Editing]]
    - [[#deleting][Deleting]]
    - [[#searching][Searching]]
    - [[#regions][Regions]]
    - [[#replace][Replace]]
    - [[#checking][Checking]]
  - [[#projects][Projects]]
    - [[#projectile][Projectile]]
    - [[#find-file-in-project][Find File in Project]]
    - [[#file-system][File System]]
    - [[#search][Search]]
  - [[#shell][Shell]]
    - [[#terminal-colors][Terminal Colors]]
    - [[#emacs-shell][Emacs shell]]
    - [[#m-x-shell][~M-x shell~]]
    - [[#term][Term]]
    - [[#multi-term][Multi Term]]
    - [[#shell-pop][Shell Pop]]
    - [[#with-editor][With Editor]]
    - [[#ssh][SSH]]
    - [[#scp][SCP]]
    - [[#tramp][Tramp]]
  - [[#documentation][Documentation]]
    - [[#help][Help]]
    - [[#elisp-refs][Elisp refs]]
    - [[#info][Info+]]
  - [[#frames][Frames]]
    - [[#frame][Frame+]]
    - [[#frame-fns][Frame fns]]
    - [[#frame-cmds][Frame cmds]]
    - [[#transpose-frame][Transpose frame]]
    - [[#posframe][Posframe]]
  - [[#faces][Faces]]
    - [[#faces-1][Faces+]]
    - [[#face-functions][Face functions]]
    - [[#face-remap][Face remap+]]
    - [[#face-explorer][Face Explorer]]
    - [[#font-lock][Font lock]]
    - [[#button-lock][Button Lock]]
  - [[#window][Window]]
    - [[#window-resize][Window Resize]]
    - [[#winner-mode][Winner Mode]]
    - [[#ace-window][Ace Window]]
    - [[#perspective][Perspective]]
    - [[#popwin][Popwin]]
    - [[#poporg][Poporg]]
    - [[#golden-ratio][Golden Ratio]]
    - [[#purpose][Purpose]]
  - [[#minibuffer][Minibuffer]]
    - [[#prompt-properties][Prompt Properties]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#swiper][Swiper]]
    - [[#omnibox][Omnibox]]
  - [[#completion][Completion]]
    - [[#abbrev][Abbrev]]
    - [[#prescient][Prescient]]
    - [[#company][Company]]
    - [[#autoinsert][Autoinsert]]
    - [[#yasnippet][YASnippet]]
    - [[#header2][header2]]
    - [[#skeletor][Skeletor]]
    - [[#expand-region][Expand Region]]
    - [[#code-library][Code Library]]
  - [[#images][Images]]
    - [[#artist-mode][Artist Mode]]
    - [[#uml-diagrams][UML Diagrams]]
    - [[#graphviz][Graphviz]]
    - [[#thesaurus][Thesaurus]]
    - [[#image][Image+]]
- [[#org][Org]]
  - [[#org-latex][Org LaTeX]]
    - [[#latex][Latex]]
    - [[#preview][Preview]]
    - [[#cdlatex][cdlatex]]
    - [[#edit-latex][Edit Latex]]
    - [[#bibtex][BibTeX]]
    - [[#org-ref][Org Ref]]
    - [[#viewing-pdfs][VIewing PDFs]]
  - [[#org-structure][Org Structure]]
    - [[#outlines][Outlines]]
    - [[#org-outline-numbering][Org Outline Numbering]]
    - [[#org-radiobutton][Org radiobutton]]
    - [[#org-links][Org Links]]
    - [[#org-id][Org ID]]
  - [[#org-coding][Org Coding]]
    - [[#org-babel][Org Babel]]
    - [[#org2elcomment][Org2elcomment]]
  - [[#org-tasks][Org Tasks]]
    - [[#drill][Drill]]
    - [[#attach][Attach]]
    - [[#capture][Capture]]
    - [[#habit][Habit]]
    - [[#agenda][Agenda]]
    - [[#calendar][Calendar]]
    - [[#clock][Clock]]
    - [[#org-brain][Org Brain]]
  - [[#org-appearance][Org Appearance]]
    - [[#per-image-display-width][Per-image display width]]
    - [[#org-visual][Org Visual]]
    - [[#org-bullets][Org Bullets]]
    - [[#org-fancy-priorities][Org Fancy Priorities]]
    - [[#org-pretty-table][Org Pretty Table]]
    - [[#toc-org][TOC Org]]
    - [[#column-view][Column View]]
    - [[#equation-renumbering][Equation Renumbering]]
    - [[#highlight-inline-latex-fragments][Highlight inline LaTeX fragments]]
  -  [[#org-prose][Org Prose]]
    - [[#insert-literal-entities][Insert literal entities]]
    - [[#org-index][Org Index]]
    - [[#org-interleave][Org Interleave]]
    - [[#org-journal][Org Journal]]
  - [[#org-export][Org Export]]
    - [[#ox-extra][Ox Extra]]
    - [[#ox-publish][Ox Publish]]
    - [[#ox-org][Ox Org]]
    - [[#ox-latex][Ox Latex]]
    - [[#ox-linguistics][Ox Linguistics]]
    - [[#ox-bibtex][Ox Bibtex]]
    - [[#ox-pandoc][Ox Pandoc]]
    - [[#ox-gfm][Ox GFM]]
    - [[#ox-hugo][Ox Hugo]]
    - [[#ox-html][Ox HTML]]
  - [[#org-hacks][Org Hacks]]
    - [[#org-occur-open][Org occur open]]
    - [[#reveal-cursor-in-folded-subtree][Reveal cursor in folded subtree.]]
    - [[#ibuffer-and-org-files][ibuffer and org files]]
    - [[#file-conversion][File conversion]]
  - [[#org-web][Org Web]]
    - [[#org-protocol][Org Protocol]]
    - [[#org-download][Org Download]]
    - [[#org-web-tools][Org Web Tools]]
    - [[#org-preview-html][Org preview html]]
- [[#appearance][Appearance]]
  - [[#theme][Theme]]
    - [[#custom-theme-settings][Custom Theme Settings]]
    - [[#themes][Themes]]
    - [[#load-theme][Load Theme]]
  - [[#org-faces][Org faces]]
  - [[#overlays][Overlays]]
    - [[#highlight][Highlight]]
    - [[#overlay][Overlay]]
    - [[#overlay-highlight][Overlay Highlight]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#col-highlight][Col Highlight]]
    - [[#hl-todo][Hl Todo]]
    - [[#symbol-highlighting][Symbol Highlighting]]
    - [[#highlight-indentation][Highlight Indentation]]
    - [[#pretty-mode][Pretty Mode]]
    - [[#prettify-symbols][Prettify Symbols]]
    - [[#prettify-utilities][Prettify Utilities]]
    - [[#pretty-fonts][Pretty Fonts]]
    - [[#pretty-code][Pretty Code]]
    - [[#pretty-outlines][Pretty Outlines]]
  - [[#fonts][Fonts]]
    - [[#dont-use-default-font-for-symbols][Don't use default font for symbols]]
    - [[#default-text-scale][default text scale]]
    - [[#default-font][Default font]]
    - [[#variable-pitch][Variable Pitch]]
    - [[#serif][Serif]]
    - [[#ligatures][Ligatures]]
    - [[#unicode][Unicode]]
  - [[#cursor][Cursor]]
    - [[#disable-blink][Disable Blink]]
    - [[#only-show-cursor-in-selected-window][Only show cursor in selected window]]
    - [[#change-the-cursor-type][Change the cursor type]]
  - [[#visual][Visual]]
    - [[#visual-fill-column][Visual Fill Column]]
    - [[#fill-column-indicator][Fill Column Indicator]]
    - [[#justify-kp][Justify Kp]]
  - [[#modeline][Modeline]]
    - [[#spaceline][Spaceline]]
    - [[#eyeliner][Eyeliner]]
- [[#web][Web]]
  - [[#libraries][Libraries]]
    - [[#simple-httpd][Simple httpd]]
    - [[#websocket][WebSocket]]
    - [[#uuid][UUID]]
    - [[#web-server][Web Server]]
    - [[#request][Request]]
    - [[#oauth][OAuth]]
  - [[#browsing][Browsing]]
    - [[#keymap][Keymap]]
    - [[#browse-url][Browse url]]
    - [[#browser-utilities-on-macos][Browser utilities on macOS]]
    - [[#google-search][Google search]]
    - [[#search-web][Search Web]]
    - [[#xwidget-webkit][xwidget webkit]]
    - [[#set-default-browser][Set default browser]]
    - [[#engine-mode][Engine Mode]]
  - [[#email][Email]]
    - [[#org-mime][Org Mime]]
    - [[#offlineimap][Offlineimap]]
    - [[#mu][Mu]]
  - [[#bug-tracking][Bug Tracking]]
  - [[#browse-at-remote][Browse at remote]]
- [[#writing][Writing]]
  - [[#notetaking][Notetaking]]
    - [[#deft][Deft]]
    - [[#org-onenote][Org OneNote]]
    - [[#lorem-ipsum][Lorem Ipsum]]
    - [[#org-velocity][Org Velocity]]
  - [[#nov][Nov]]
  - [[#variable-pitch-1][Variable Pitch]]
  - [[#olivetti][Olivetti]]
  - [[#writeroom][Writeroom]]
- [[#code][Code]]
  - [[#lsp][LSP]]
    - [[#lsp-mode][LSP Mode]]
    - [[#lsp-ui-mode][LSP UI Mode]]
    - [[#company-lsp][Company LSP]]
    - [[#dap-mode][Dap Mode]]
  - [[#flycheck][Flycheck]]
  - [[#code-style][Code Style]]
    - [[#default][Default]]
    - [[#code-folding][Code Folding]]
    - [[#editorconfig][Editorconfig]]
    - [[#google-c-style][Google C Style]]
    - [[#code-formatting][Code Formatting]]
  - [[#eldoc][Eldoc]]
  - [[#pair-matching][Pair Matching]]
    - [[#paredit][Paredit]]
    - [[#smartparens][Smartparens]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#parinfer][Parinfer]]
    - [[#gtags][Gtags]]
  - [[#version-control][Version Control]]
    - [[#ediff][Ediff]]
    - [[#git][Git]]
    - [[#mercurial][Mercurial]]
  - [[#cloud][Cloud]]
    - [[#ecloud][ecloud]]
    - [[#docker][Docker]]
    - [[#aws][AWS]]
  - [[#prog-utils][Prog Utils]]
    - [[#wakatime][wakatime]]
    - [[#logging][Logging]]
    - [[#floobits][floobits]]
    - [[#rmsbolt][rmsbolt]]
  - [[#languages][Languages]]
    - [[#assembly][Assembly]]
    - [[#cc][C/C++]]
    - [[#common-lisp][Common Lisp]]
    - [[#clojure][Clojure]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#groovy][Groovy]]
    - [[#java][Java]]
    - [[#javascript][JavaScript]]
    - [[#python][Python]]
    - [[#prolog][Prolog]]
    - [[#ruby][Ruby]]
    - [[#ocaml][Ocaml]]
    - [[#scala][Scala]]
    - [[#shell-script-mode][Shell script mode]]
    - [[#web-1][Web]]
    - [[#markdown][Markdown]]
    - [[#applescript][Applescript]]
    - [[#racket][Racket]]
    - [[#yaml][Yaml]]
- [[#misc][Misc]]
  - [[#scimax][Scimax]]
- [[#footnotes][Footnotes]]

* Emacs
** Startup
*** Depedencies
**** Page Break Lines
:PROPERTIES:
:ID:       E0156F78-3E5A-4855-AF01-8DA86779DE0A
:END:

Global minor-mode that turns ~^L~ form feed characters into
horizontal line rules.

#+NAME: buffer/page-break-lines
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :init
  (global-page-break-lines-mode))
#+END_SRC

**** Dash

Functional bindings i.e thread =->= macro.

#+BEGIN_SRC emacs-lisp
(use-package dash
  :config
  (dash-enable-font-lock))
#+END_SRC

***** Dash functional

#+NAME: dash/functional
#+BEGIN_SRC emacs-lisp
(use-package dash-functional)
#+END_SRC

**** cl-lib
***** ~cl-lib~


#+BEGIN_SRC emacs-lisp
(use-package cl-lib)
#+END_SRC

***** cl-highlight

#+NAME: cl/highlight
#+BEGIN_SRC emacs-lisp
(use-package cl-lib-highlight
  :after (cl-lib)
  :demand t)

#+END_SRC

**** =f=

Declarative file and directory utilities.

#+NAME: libs/f
#+BEGIN_SRC emacs-lisp
(use-package f)
#+END_SRC

**** =s=

The string manipulation library.

#+NAME: libs/s
#+BEGIN_SRC emacs-lisp
(use-package s)
#+END_SRC

**** =a=

#+NAME: libs/a
#+BEGIN_SRC emacs-lisp
(use-package a)
#+END_SRC

**** el-patch

Use [[https://github.com/raxod502/el-patch#lazy-loading-packages][el patch]] to advice system and package lazy-loading.

#+NAME: libs/el-patch
#+BEGIN_SRC emacs-lisp
(use-package el-patch
    :init
  (defun el-patch-remove-feature ()
    (interactive)
    (let ((feature (completing-read "Feature: " el-patch-pre-validate-hook))
          (patch (call-interactively #'el-patch-unpatch)))
      (remove-hook 'el-patch-pre-validate-hook (intern feature))
      (remhash patch el-patch--patches))))

#+END_SRC

**** async

#+BEGIN_SRC emacs-lisp
(use-package async
  :after dired
  :commands (dired-async-mode async-smtpmail-send-it)
  :init
  (with-eval-after-load 'async
    (require 'smtpmail-async)
    (setq message-send-mail-function 'async-smtpmail-send-it)
    (dired-async-mode 1)))
#+END_SRC

**** esup

#+BEGIN_SRC emacs-lisp
(use-package esup)
#+END_SRC

*** Initial Display
**** Initial scratch

#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil
      initial-major-mode 'org-mode
      inhibit-startup-echo-area-message t)
#+END_SRC

***** Dashboard

[[https://github.com/rakanalh/emacs-dashboard][Dashboard]] is a highly customizable splash screen
replacement library used in the popular [[https://github.com/syl20bnr/spacemacs][spacemacs]] framework.
It's a nice way of consolidating any combination of tasks,
agenda items, bookmarks, and pretty much any other enumerable
list that one may use in the wacky world of Emacs.

#+NAME: buffer/dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :init
  (defun dotemacs/dashboard-banner ()
      "Set a dashboard banner including information on
  package initialization time and garbage collections."
      (setq dashboard-banner-logo-title
            (format
             (concat "Emacs ready in %.2f seconds "
                       "with %d garbage collections.")
             (float-time (time-subtract
                          after-init-time
                          before-init-time))
             gcs-done)))

    (unless global-page-break-lines-mode
      (global-page-break-lines-mode))

    (dashboard-setup-startup-hook)

    :config
    (require 'org-agenda)
    (add-to-list 'dashboard-items '(agenda) t)
    ;; Get the week agenda.
    ;; See `dashboard-get-agenda' for how this
    ;; variable is being used.
    (setq show-week-agenda-p t)

    (setq dashboard-items '(( agenda . 10)
                            ( projects . 5)
                            ( recents . 3)
                            ( bookmarks . 5)))

    :hook
    (dashboard-mode . dotemacs/dashboard-banner))


#+END_SRC

**** Initial Frame
***** Hide tool bar, scroll bar, and menu bar

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(unless (eq system-type 'darwin)
  (menu-bar-mode -1))
#+END_SRC

***** Default frame properties
:PROPERTIES:
:ID:       DDFAD4AE-103D-43C9-B8DF-A55C8AD6A758
:END:

Starting in Emacs 26, the =default-frame-alist= variable can be used
create a natural title bar in the GUI. Setting the default frame
properties to the following values has the same effect as the
'--with-natural-title-bar' option provided by the Homebrew [[https://github.com/d12frosted/homebrew-emacs-plus/blob/master/Formula/emacs-plus.rb#L97-L100][formula]]
recommended for Spacemacs users on macOS[fn:14].

#+BEGIN_SRC emacs-lisp
(setq default-frame-alist
      '((ns-transparent-titlebar . t)
        (ns-appearance . dark)))
#+END_SRC

***** Title format
:PROPERTIES:
:ID:       DE7A3072-6422-4808-84B2-F27B754E1088
:END:

Show full path in the title bar.

#+NAME: frame/title
#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format "%b (%f)")
#+END_SRC

*** Initial Setup
**** User Information

These values are initialized with the ’name’ and ’email’
environment variables, respectively[fn:3].

Emacs uses these variables to fill the mail header when sending
emails in emacs, and various third-party packages rely on them
for correct behavior.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jacob Chaffin"
      user-mail-address "jchaffin@ucla.edu")
#+END_SRC

**** Customization

#+NAME: dotemacs/customization
#+BEGIN_SRC emacs-lisp
;; Customization Group
(defgroup dotemacs nil
  "Customization group for the `dotemacs' Emacs configuration."
  :group 'applications
  :prefix "dotemacs-")

(defcustom dotemacs-prefix "\M-m"
  "The prefix map leader key.")
#+END_SRC

**** Garbage Collection

Consider the following from the documentation:

#+BEGIN_QUOTE
By binding this temporarily to a large number, you can effectively
prevent garbage collection during a part of the program.
#+END_QUOTE

When I first read how the default garbage collection interval in Emacs
is notoriously low, I added an arbitrary number of zeros to the
default value and called it a day. However, because I'm writing this
monolithic configuration and making a lot of mistakes in the process,
I've had to start Emacs with essentially its default settings pretty
frequently and I've noticed the lag time I occasionally experience
when searching long documents is essentially nonexistent in vanilla
Emacs. After reading this [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][blogpost]], it seems that jacking up the GC
interval may actually be the /cause/ of the lagtime rather than
contributing to the solution.

#+BEGIN_SRC emacs-lisp
(defun rev-up-gc ()
   (interactive)
  (setq gc-cons-threshold most-positive-fixnum))

(defun rev-down-gc ()
   (interactive)
  (setq gc-cons-threshold 800000))


#+END_SRC

**** Initial minibuffer
***** Modulate garbage collection

#+BEGIN_SRC emacs-lisp
(add-hook 'minibuffer-setup-hook #'rev-up-gc)
(add-hook 'minibuffer-exit-hook #'rev-down-gc)
#+END_SRC

***** ignore certain extensions

#+BEGIN_SRC emacs-lisp

(setq completion-ignored-extensions
      (append completion-ignored-extensions
              '("o" "~" ".lbin" ".so" ".a"
                ".git/" ".hg/" ".svn" ".svn-base")))
#+END_SRC

**** Prefer new bytecode

#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC

**** Alias Yes Or No

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

**** Fill Column
:PROPERTIES:
:ID:       7BB78F7D-BB56-4036-A244-853CAC7D761C
:END:

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

**** Use terminfo
:PROPERTIES:
:ID:       AD6F63F5-DB52-4757-89BD-0351AB465678
:END:

#+BEGIN_SRC emacs-lisp
(setq system-uses-terminfo t)
#+END_SRC

*** Rebooting
:PROPERTIES:
:ID:       FE2070D7-91D6-4594-B5E4-0711F5C0E5E6
:END:

The [[https://github.com/iqbalansari/restart-emacs][restart-emacs]] package allows quickly rebooting Emacs
from within Emacs.

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs)
#+END_SRC

*** Reloading
:PROPERTIES:
:ID:       8BED33C1-B7FF-4457-AF53-A67AAB7A14DA
:END:

#+BEGIN_SRC emacs-lisp

(defun straight-reload-init (&optional debug)
  "Reload init file using straight transaction system."
  (interactive "P")
  (straight-transaction
    (straight-mark-transaction-as-init)
    (message "Reloading initialization file...")
    (when debug
      (set (make-local-variable 'use-literate-p) nil)
      (set (make-local-variable 'user-init-file)
	   (expand-file-name "init.el" user-emacs-directory)))
    (load user-init-file nil 'nomessage)
    (message "Reloading initialization file...done.")))


#+END_SRC

*** Evaluating
:PROPERTIES:
:ID:       8EFDEA98-30BB-47BC-A628-82716AD89DD7
:END:
**** Eval buffer

#+BEGIN_SRC emacs-lisp
(defun straight-eval-buffer ()
  "Evaluate current buffer using the straight transaction system."
  (interactive)
  (message "Evaluating %s..." (buffer-name))
  (straight-transaction
    (if (or (null buffer-file-name)
           (not (file-exists-p buffer-file-name)))
        (eval-buffer)
      (progn
        (when (string= buffer-file-name user-init-file)
          (straight-mark-transaction-as-init))
        (load-file buffer-file-name))))
  (message "Evaluating %s...done." (buffer-name)))

#+END_SRC

**** Eval in repl

#+BEGIN_SRC emacs-lisp
(use-package eval-in-repl)
#+END_SRC

** Utilities
*** Macros
**** ~if-not~

Clojure-like =if-not= macro in elisp.

#+NAME: macros/if-not
#+BEGIN_SRC emacs-lisp
(defmacro if-not (condition then-form &rest rest-forms)
  (declare (indent 2))
  `(progn
     (if (not ,condition)
	       ,then-form
       ,@rest-forms)))
#+END_SRC

**** ~with-major-mode~

#+NAME: macros/with-major-mode
#+BEGIN_SRC emacs-lisp
(defmacro with-major-mode (mode &rest body)
  "If the current major-mode is MODE, then execute BODY."
  (declare (indent defun))
  `(when (equal major-mode ',mode)
     ,@body))
#+END_SRC

***** ~if-major-mode~

#+NAME: macros/if-major-mode
#+BEGIN_SRC emacs-lisp
(defmacro if-major-mode (mode then-form &rest rest-forms)
  "If MODE, then execute THEN-FORM, else execute REST-FORMS."
  (declare (indent defun))
  `(progn
     (if (equal major-mode ',mode)
	       ,then-form
       ,@rest-forms)))
#+END_SRC

*** Functions
**** Mode utilities

#+NAME: utility-minor-modes
#+BEGIN_SRC emacs-lisp
(defun list-enabled-minor-modes (&optional buf)
  "The minor modes enabled in the current buffer."
  (let ((auto-save-mode nil)
        (buf (or buf (current-buffer))))
    (cl-loop for mode being the element of minor-mode-list
             when (boundp mode)
             when (symbol-value mode)
             collect mode)))


(defvar minor-modes-enabled-list (list-enabled-minor-modes (current-buffer))
  "The list of enabled minor modes")

(defun minor-mode-enabled-p (mode)
  (member mode (list-enabled-minor-modes (current-buffer))))
#+END_SRC

**** Unadvise

[[https://emacs.stackexchange.com/questions/24657/unadvise-a-function-remove-all-advice-from-it][Remove advice]].

#+NAME: utility-unadvise
#+BEGIN_SRC emacs-lisp

(defun unadvise (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))

#+END_SRC

*** Buffer utilities
**** Buffer List Names

#+NAME: buffer-list-names
#+BEGIN_SRC emacs-lisp

(defun buffer-list-names ()
  "Get list of buffer names."
  (let ((f (lambda (b) (buffer-name b)))
	      (buffer-alist (buffer-list)))
    (mapcar f buffer-alist)))

#+END_SRC

**** Regenerate scratch buffer

#+NAME: buf-scratch
#+BEGIN_SRC emacs-lisp

(defun scratch (&optional new)
  "Switch to scratch buffer. If optional prefix NEW,
then create a new buffer. Else reuse the existing scratch buffer,
generating a new one if the initial scratch buffer has been killed."
  (interactive "P")
  (unless (or new (not (seq-contains (buffer-list) (get-buffer "*scratch*"))))
    (with-current-buffer (generate-new-buffer "*scratch*")
      (emacs-lisp-mode)))
  (switch-to-buffer-other-window "*scratch*"))


#+END_SRC

**** bui
:PROPERTIES:
:ID:       A2492483-216E-445A-BABB-B760FF83938E
:END:

#+BEGIN_sRC emacs-lisp
(use-package bui
  :hook
  (info-mode . bui-info-mode))
#+END_SRC

**** ibuffer

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :straight nil
  :bind ("C-x C-b" . ibuffer))
#+END_SRC

*** Window utilities
**** Window Count

#+NAME: win-count
#+BEGIN_SRC emacs-lisp
(defun window-count ()
  "Count number of windows in the current frame."
  (interactive)
  (length (window-list)))
#+END_SRC

**** Count Unique Windows
#+NAME: win-count-unique
#+BEGIN_SRC emacs-lisp
(defun window-count-unique ()
  "Count number of unique windows in the current frame"
  (interactive)
  (length (cl-delete-duplicates (mapcar #'window-buffer (window-list)))))
#+END_SRC

**** Window Buffer List

#+NAME: win-buf-list
#+BEGIN_SRC emacs-lisp
(defun window-buffer-list ()
  "Get list of buffers in an open window."
  (let ((windows))
    (dolist (frame (frame-list) windows)
      (with-selected-frame frame
      (setq windows (append (window-list) windows))))
        (map 'seq-uniq (lambda (w) (window-buffer w)) windows)))
#+END_SRC

#+NAME: win-buf-list-modes
#+BEGIN_SRC emacs-lisp
(defun buffer-list-modes ()
  "Restart org-mode in all org buffers in open windows."
  (let ((modes))
    (dolist (buf (window-buffer-list) modes)
      (with-current-buffer buf
        (setq modes (push major-mode modes))))
    (seq-uniq modes)))
#+END_SRC

*** File utilities
**** Unix-style =basename=

The Elisp =file-name-base= function has somewhat misleading nomenclature. The name seems to suggest that it would have the same behavior of the UNIX =basename= command, but the Emacs function actually behaves quites differently:

1. If the given file path is a directory, the Unix implementation discards the trailing slash and operates on the directory component as if it were a regular file. In Emacs, the same input will return an empty string.
2. The Emacs function removes the extension from the file - that is, the substring from the last-most '.' character to the end of the string.

As discussed in this 2011[[https://lists.gnu.org/archive/html/emacs-devel/2011-01/msg01217.html][ thread]] from the =emacs-devel= mailing list, it would be nice if Emacs also had a function that behaved similarly to the Unix command.

#+NAME: fd-basename
#+BEGIN_SRC emacs-lisp
(defun basename (pathname)
  "Return the filename or directory portion of PATHNAME"
  (if (or (file-directory-p pathname)
          (string-match "/$" pathname))
      (let ((dirname (directory-file-name pathname)))
        (file-name-nondirectory dirname))
    (file-name-nondirectory pathname)))
#+END_SRC

**** Copy File Path

#+NAME: fd-copy
#+BEGIN_SRC emacs-lisp
(defun file-path ()
  (destructuring-bind (file dir)
      (cond ((eq major-mode 'dired-mode)
             (list (substring-no-properties (thing-at-point 'symbol))
                   dired-directory))
            ((stringp buffer-file-name)
             (mapcar (lambda (f) (funcall f buffer-file-name))
                     '(file-name-nondirectory file-name-directory)))
            (t  (list (buffer-name (current-buffer)) default-directory)))
    (expand-file-name file dir)))

(defun copy-file-path-as-kill ()
  "Copies the file path and applies the result as an argument to
function FUNC. To copy the file path to the kill-ring, use the
 interactive function `copy-file-path-as-kill'."
  (interactive)
  (let ((path (file-path)))
    (kill-new path)
    (message "Copied %s" path)))

#+END_SRC

**** Remove wildcards from directory files list

#+NAME: fd-no-wildcards
#+BEGIN_SRC emacs-lisp
(defun directory-files-no-wildcards (directory &optional full nosort)
   "List directory contents without wildcards"
   (cddr (directory-files directory full nil nosort)))
#+END_SRC

**** Read File Contents

From [[http://ergoemacs.org/emacs/elisp_read_file_content.html][Ergo Emacs]]:
***** As String

#+NAME: read-file-as-string
#+BEGIN_SRC emacs-lisp
(defun read-file-contents (file)
  "Return contents of FILE."
  (with-temp-buffer
    (insert-file-contents file)
    (buffer-string)))
#+END_SRC

***** As List of Lines

#+NAME: read-file-lines
#+BEGIN_SRC emacs-lisp
(defun read-lines (file)
  "Return a list of lines in FILE."
  (with-temp-buffer
    (insert-file-contents file)
    (split-string (buffer-string) "\n" t)))
#+END_SRC

**** Resolve Path

#+NAME: fd-resolve-path
#+BEGIN_SRC emacs-lisp

(defun resolve-path (&rest paths)
  "Concatenate path segments."
  (let ((paths- (mapcar #'directory-file-name paths)))
    (mapconcat 'identity paths- "/")))

#+END_SRC

**** User Directories
***** User Home

#+NAME: fd-user-home
#+BEGIN_SRC emacs-lisp
(cl-defun user-home (&rest path-segments &key (slash nil) &allow-other-keys)
  "Resolves the absolute path formed PATH-SEGMENTS to the
   user home directory. If the optional argument SLASH is supplied,
the the returned file path will be formatted as a directory. "
  (let ((segments (seq-filter #'stringp path-segments)))
    (--> (getenv "HOME")
         (f-split it)
         (append it segments)
         (cdr it)
         (cons (concat "/" (car it)) (cdr it))
         (apply #'resolve-path it)
         (if slash (file-name-as-directory it) it))))

(user-home "hi/" :slash t)
#+END_SRC

***** Dropbox Directory

#+NAME: fd-dropbox
#+BEGIN_SRC emacs-lisp
(defalias #'dropbox-dir (apply-partially #'user-home "Dropbox"))
#+END_SRC

***** Project Directory

#+NAME: fd-projects
#+BEGIN_SRC emacs-lisp
(defalias #'projects-dir
 (apply-partially #'user-home "Developer" "Projects"))
#+END_SRC

**** Emacs Directories

#+NAME: fd-emacs
#+BEGIN_SRC emacs-lisp
(defalias #'emacs-dir (apply-partially #'user-home ".emacs.d")
  "Resolve PATH-SEGMENTS to `user-emacs-directory'.")
;; no littering directories
(defalias #'emacs-var-dir
  (apply-partially #'emacs-dir "var")
  "Resolve PATH-SEGMENTS to `no-littering-var-directory.'")
(defalias #'emacs-etc-dir
  (apply-partially #'emacs-dir "etc")
  "Resolve PATH-SEGMENTS to `no-littering-etc-directory.'")
;; straight.el directories
(defalias #'straight-dir
  (apply-partially #'emacs-dir "straight")
  "Resolve PATH-SEGMENTS to straight.el installation directory.")
(defalias #'straight-repos-dir
  (apply-partially #'straight-dir "repos")
  "Resolve PATH-SEGMENTS to straight.el repos directory.")
(defalias #'straight-build-dir
  (apply-partially #'straight-dir "build")
  "Resolve PATH-SEGMENTS to straight.elj build directory")
;; org directories
(defalias #'org-dir
  (apply-partially #'dropbox-dir "org")
  "Resolve PATH-SEGMENTS to `org-directory'.")
(defalias #'agenda-dir
  (apply-partially #'org-dir "agenda")
  "Resolve PATH-SEGMENTs to directory of agenda files.")
#+END_SRC

**** Read only

See  [[https://emacs.stackexchange.com/a/38635][post on Emacs Stack Exchange]]

#+NAME: fd-read-only
#+BEGIN_SRC emacs-lisp
(use-package auto-read-only
  :init
  (auto-read-only-mode 1)
  :config
  (add-to-list 'auto-read-only-file-regexps "/straight/"))
#+END_Src

** Package Manager
*** Goto local package repository

Function to jump to a repository installed by [[#straight][straight]]. An
interactive minibuffer completion menu using ivy.

#+BEGIN_SRC emacs-lisp
(defun straight-installed-packages ()
  (--> straight--recipe-cache
       (hash-table-keys it)
       (seq-difference
        it
        (mapcar
         #'symbol-name
         straight-built-in-pseudo-packages))
       (sort it #'string-lessp)))

(defun straight-installed-p (pkg)
  (member (symbol-name pkg) (straight-installed-packages)))

(cl-defun straight-browse-local (&optional build-dir)
  "Go to a straight repository directory. If BUILD-DIR, then go to
  the build directory for that repository instead."
  (interactive "P")
  (lexical-let* ((dir (-> user-emacs-directory
                         (f-join "straight"
                                 (if build-dir "build" "repos"))))

                 (msg (format "(%s) Goto recipe: "
                              (upcase-initials (f-base dir))))
                 (pkg-keys (straight-installed-packages)))
    (ivy-read
     msg
     pkg-keys
     :action
     (lambda (package)
       (lexical-let (pkg-directory pkg-file)
         (condition-case nil
             (if (and build-dir
                    (not (plist-get
                        (gethash package straight--recipe-cache)
                        :no-build)))
                 (progn
                   (setq pkg-directory (expand-file-name package dir))
                   (and (file-directory-p pkg-directory)
                      (dired pkg-directory)))
               (let ((repo (plist-get
                            (gethash package straight--recipe-cache)
                            :local-repo)))
                 (if repo
                     (setq pkg-directory
                           (expand-file-name
                            repo
                            (replace-regexp-in-string "build" "repos" dir))
                           pkg-file
                           (car
                            (directory-files
                             pkg-directory t
                             (concat "\\README.*\\'\\|" package ".el"))))
                   (setq pkg-directory
                         (file-name-directory (locate-library package))
                         pkg-file
                         (car
                          (directory-files
                           pkg-directory t
                           (concat package ".el\\(?:.gz\\)")))))
                 (if pkg-file
                     (and (file-exists-p pkg-file)
                        (find-file pkg-file))
                   (and (file-directory-p pkg-directory)
                      (dired pkg-directory)))))))))))

(define-key goto-map "r" #'straight-browse-local)
#+END_SRC

*** Browse straight repository at GitHub

#+BEGIN_SRC emacs-lisp
(defun straight-browse-remote (&optional package)
  "View a recipe PACKAGE on GitHub."
  (interactive "P")
  (cl-flet ((remote-url (pkg)
              (let ((recipe (cdr (straight-recipes-retrieve pkg))))
                (destructuring-bind (repo host)
                    `(,(plist-get recipe :repo)
                      ,(plist-get recipe :host))
                  (if (eq host 'github)
                      (concat "https://github.com/" repo)
                    (message "%s is not a GitHub repository." pkg))))))
    (let* ((pkg (if (interactive-p)
                    (completing-read
                     "Which recipe? "
                     (straight-recipes-list straight-recipe-repositories)
                     nil 'require-match)))
           (url (remote-url (intern pkg))))
      (browse-url url))))
#+END_SRC

** Security
*** Network security
**** GnuTLS

As GitHub user [[https://github.com/wasamasa][wasamasa]] points out in /h?(er|is)|^\S+/ dotfiles,
[[https://gnutls.org/][GnuTLS]] throws several warnings when using the default 256 minimum
prime bits over a TLS handshake.

#+BEGIN_QUOTE
Minimum number of prime bits accepted by GnuTLS for key exchange.
During a Diffie-Hellman handshake, if the server sends a prime
number with fewer than this number of bits, the handshake is
rejected.  (The smaller the prime number, the less secure the
key exchange is against man-in-the-middle attacks.)
#+END_QUOTE


#+BEGIN_SRC emacs-lisp
(setq gnutls-min-prime-bits 4096)
#+END_SRC

*** Encryption
**** Use GPG2
***** Set GPG program to 'gpg2'.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (let* ((has-brew (not (string-empty-p
			 (shell-command-to-string
			  "which brew"))))
	 (gpg-path (if has-brew
		       (shell-command-to-string "brew --prefix gpg2")))
	 (has-gpg2 (if gpg-path
		             (file-exists-p
                  (replace-regexp-in-string "\n" "" gpg-path)))))
    (setq epg-gpg-program (if has-gpg2 "gpg2" "gpg"))))
#+END_SRC

***** Disable External Pin Entry

Switching between Emacs and an external tools is annoying.

By default, decrypting gpg files in Emacs will result in the pin entry
window being launched from the terminal session.

By disabling the agent info, we can force Emacs to handle this
internally[fn:7].

#+BEGIN_SRC emacs-lisp
(setenv "GPG_AGENT_INFO" nil)
#+END_SRC

Or so I thought...

***** Internal Pinentry Problem and Solution

While I couldn't figure out how to get Emacs to handle gpg pinentry
internally, I was able to still find a satisfactory solution using the
~pinentry-mac~ tool.

Note that this solution requires macOS and using gpg2 for encryption.

See ticket [[https://github.com/Homebrew/homebrew-core/issues/14737][#1437]] from the [[https://github.com/Homebrew/homebrew-core][Homebrew/homebrew-core]] repository.

#+BEGIN_EXAMPLE sh
brew install pinentry-mac
echo "pinentry-program /usr/local/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
killall gpg-agent
#+END_EXAMPLE

**** Load Secrets

#+BEGIN_SRC emacs-lisp
(when (and (executable-find "gpg") (eq system-type 'darwin))
  (if-not (string-empty-p
       (shell-command-to-string
	      (concat "gpg --list-keys | grep " user-mail-address)))
      (progn
        (add-to-list 'load-path (emacs-etc-dir "secrets"))
        (require 'secrets))
    (print (format "GPG key(s) for %s not found"
                   (or user-full-name user-mail-address)))))
#+END_SRC

** Keybindings
:PROPERTIES:
:ID:       EB6C7429-18A6-4131-8317-19918FDA2E88
:END:

*** Bind key

#+BEGIN_SRC emacs-lisp
(bind-keys :prefix-map my-prefix-map
           :prefix "M-m")
#+END_SRC

*** Hydra

#+NAME: kb-hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :init
  (eval-and-compile

    (defhydra hydra-reload-eval (:exit t :hint nil)

      "
  _i_nit   | _r_egion  | _d_efun
  -------^^+---------^^+--------
  _b_uffer | _R_estart | _q_uit
  -------^^+---------^^+--------"
      ("i" straight-reload-init)
      ("b" straight-eval-buffer)
      ("r" eval-region)
      ("d" eval-defun)
      ("R" restart-emacs)
      ("q" nil))

    (defhydra hydra-straight (:hint nil :exit t)

      "
  _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
  _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
  ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
  _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
  _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |pru_n_e build
  ----------------^^+--------------^^+---------------^^+----------------^^+------------
  _b_rowse package local
  _B_rowse package remote
  "
      ("b" straight-browse-local)
      ("B" straight-browse-remote)
      ("c" straight-check-all)
      ("C" straight-check-package)
      ("r" straight-rebuild-all)
      ("R" straight-rebuild-package)
      ("f" straight-fetch-all)
      ("F" straight-fetch-package)
      ("p" straight-pull-all)
      ("P" straight-pull-package)
      ("m" straight-merge-all)
      ("M" straight-merge-package)
      ("n" straight-normalize-all)
      ("N" straight-normalize-package)
      ("u" straight-push-all)
      ("U" straight-push-package)
      ("v" straight-freeze-versions)
      ("V" straight-thaw-versions)
      ("w" straight-watcher-start)
      ("W" straight-watcher-quit)
      ("g" straight-get-recipe)
      ("n" straight-prune-build)
      ("q" nil)))
  :bind
  (:map my-prefix-map
        ("s" . hydra-straight/body)
        ("e" . hydra-reload-eval/body))
  :config
  (with-eval-after-load 'which-key
    (which-key-add-key-based-replacements
      "M-m s"  " straight"
      "M-m e" " reload/eval")))
#+END_SRC

**** Ivy hydra
:PROPERTIES:
:ID:       9D78F6B7-1B19-4A0F-9025-C00EC0142B1F
:END:

#+NAME: ivy/hydra
#+BEGIN_SRC emacs-lisp
(use-package ivy-hydra
  :after (hydra)
  :demand t)
#+END_SRC

*** Which Key

#+NAME: kb-which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :custom
  (which-key-enable-extended-define-key t)
  (which-key-allow-multiple-replacements t)
  (which-key-compute-remaps t)
  (which-key-separator " → " )
  :init
  (which-key-mode 1))

#+END_SRC

*** Speed Type

I got the blank-capped [[https://elitekeyboards.com/products.php?sub=pfu_keyboards,hhkbpro2&pid=pdkb400bn][HHKB2]] keyboard. I need all the help I can get.

#+NAME: kb-speed-type
#+BEGIN_SRC emacs-lisp
(use-package speed-type)
#+END_SRC

*** Counsel straight

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ivy
  (ivy-set-actions 'straight-use-package
                   `(("d" ,(lambda (x) (straight-browse-local x)) "browse local")
                     ("h" ,(lambda (x) (straight-browse-remote x)) "browse remote"))))
#+END_SRC

** System
*** Exec Path From Shell

The [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] package fixes this problem by copying
user environment variables from the shell.

The ~exec-path-from-shell~ package only works with posix-compliant
operating systems. This may or may not include Microsoft Windows[fn:8].

However, the ~exec-path-from-shell~ instructions recommends loading
the package on linux and macOS operating system. I don't use Windows
all that often anyways, so that's fine with me.

The ~:if~ key of ~use-package~ offers us a really concise way for
conditionally loading dependencies.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  ;; only load `exec-path-from-shell' package on macos and linux.
  :if (memq window-system '(mac ns))
  :config
  (progn
    (exec-path-from-shell-initialize)
    (setq exec-path-from-shell-check-startup-files nil)))
#+END_SRC

*** System Packages

Utilities for managing system packages in Emacs using an external
package manager.

#+NAME: os-sys-packages
#+BEGIN_SRC emacs-lisp

(use-package system-packages
  :init
  (with-eval-after-load 'cl-lib
    (defun system-packages/update-brew-commands (commands)
      "Update the brew commands supported in system-packages."
      (let ((brew-commands-alist
             (->> system-packages-supported-package-managers
                (assoc 'brew)
                cdr)))
        (dolist (command commands)
          (cl-destructuring-bind (cmd . cmd-string) command
            (setf (cdr (assoc cmd brew-commands-alist)) cmd-string))))))

  :config
  (with-eval-after-load 'system-packages
    (let ((commands-alist '((get-info . "brew info")
                            (verify-all-packages . "brew doctor")
                            (log . "brew log"))))
      (system-packages/update-brew-commands commands-alist))))
#+END_SRC

**** use-package-ensure-system-package

#+BEGIN_SRC emacs-lisp
(use-package use-package-ensure-system-package
  :after (system-packages)
  :demand t)
#+END_SRC

*** Anything

#+BEGIN_SRC emacs-lisp
(use-package anything
  :init
  (defun anything/goto-manual ()
    "Open up the anything PDF manual."
    (interactive)
    (find-file (straight-repos-dir "anything/doc/anything.pdf")))

  :config
  (require 'anything-config))

#+END_SRC

*** Prodigy

Interface for controlling external processes in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package prodigy)
#+END_SRC

*** macOS

I work on a macbook, so this section is where I'm loading all of my
settings that rely on local file paths, macOS applications, and
external programs.

**** MacOS Keys

#+NAME: macos-keybindings
#+BEGIN_SRC emacs-lisp
;; Modifer Keys

;; Mouse-2

#+END_SRC


***** Modifier Keys

macOS specific settings[fn:9].

Maps the modifier keys based on personal preferences.
Also sets terminal coding system to "utf-8".

#+NAME: macos-modifier-keys
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'super
      mac-option-modifier  'meta
      ns-control-modifier  'control
      ns-function-modifier 'hyper)

(when (eq system-type 'darwin)
  (global-set-key (kbd "s-=" ) 'text-scale-increase)
  (global-set-key (kbd "s--")  'text-scale-decrease)
  ;; Default is <XF86Back> .. C-x <right>
  (global-set-key (kbd "s-[")  'previous-buffer)
  (global-set-key (kbd "s-]")  'next-buffer)
  (global-set-key (kbd "s-}")  'ns-next-frame)
  (global-set-key (kbd "s-{")  'ns-prev-frame)
  (global-set-key (kbd "s-L")  'mark-sexp))

#+END_SRC

***** Generate =<mouse-2>= on trackpad

As far as I know, there is no trackpad gesture to trigger the
=<mouse-2>= event in Emacs. The following snippet uses [[help:key-translation-map][key-translation-map]] to emulate the =<mouse-2>= event when clicking
the trackpad (=<mouse-1>=) like normal while holding down Command, or
"super", modifier key

#+NAME: macos-mouse-2
#+BEGIN_SRC emacs-lisp
;; From https://emacs.stackexchange.com/questions/20946/generate-mouse-2-event-from-macbook-trackpadTrackpage
(when (eq system-type 'darwin)
  (define-key key-translation-map (kbd "<s-mouse-1>") (kbd "<mouse-2>")))
#+END_SRC

**** MacOS Computer Name

#+NAME: macos-computer-name
#+BEGIN_SRC emacs-lisp
(defun macos-computer-name ()
  "Get the computer name for the current machine."
  (let* ((has-scutil
          (executable-find "scutil"))
	       (scutil-cmd
          (lambda ()
            (shell-command-to-string "scutil --get ComputerName"))))
    (if has-scutil
	      (replace-regexp-in-string "\n" "" (funcall scutil-cmd)) nil)))

(defvar computer-name nil)

(when (eq system-type 'darwin)
  (setq computer-name (macos-computer-name)))

#+END_SRC

**** MacOS Dev Utils

Small library for opening files and buffers in external text
editors and various other applications on macOS.

#+NAME: macos-dev-utils
#+BEGIN_SRC emacs-lisp
(use-package macos-dev-utils
  :if (eq system-type 'darwin)
  :straight
  (macos-dev-utils
   :host github
   :repo "jchaffin/macos-dev-utils"))

#+END_SRC

**** MacOS Dash
:PROPERTIES:
:ID:       64240356-D983-4422-A359-4F773DD2E946
:CUSTOM_ID: macos-dash
:END:

Dash.app is an application for quickly searching and navigating API
docsets for programming tools and languages.
There are already two Emacs plugins that utilize Dash docsets,
helm-dash and counsel-dash, which is a simple wrapper around helm
dash.

For whatever reason, I can't figure out how to open the docset in an
=eww= frame or in an external browser using =browse-url=.

Because of the OS/licensing restrictions of Dash.app, both these
packages try to solve the problem of creating an interface for users
to navigate, query, and switch between docsets.

Because I've purchased a license and run macOS locally, I'm going to
bypass that problem and define a function that uses the
=dash-plugin://= protocol to launch/switch to the application and
query it with the marked region or symbol at point.

#+NAME: macos-dash-config
#+BEGIN_SRC emacs-lisp
(defvar dash-plugin-keywords nil
  "An `alist' of keywords representing the docsets which should
  searched in the query to Dash.app")

(defun macos-dash-at-point ()
  (interactive)
  (let* ((protocol "dash-plugin://")
         (keywords (if dash-plugin-keywords
                       (mapconcat 'identity dash-plugin-keywords ",")
                     ""))
         (search-string
          (if (use-region-p)
              (buffer-substring-no-properties
               (region-beginning)
               (region-end))
            (substring-no-properties (or (thing-at-point 'symbol) "")))))

    (start-process "Dash" nil "open"
                   (concat
                    protocol
                    (unless (string-empty-p keywords)
                      (concat "keys=" keywords "&"))
                    "query="
                    (url-hexify-string search-string)))))
#+END_SRC

**** Reveal in macOS Finder

#+NAME: macos-finder-config
#+BEGIN_SRC emacs-lisp
(use-package reveal-in-osx-finder
  :if (eq system-type 'darwin)
  :commands (reveal-in-osx-finder))
#+END_SRC

**** OSX Dictionary

Provides an interface to /Dictionary.app/ in Emacs. I am using this
package in conjunction with [[#dictionary-el][dictionary.el]] right now. The latter
package uses an open-source dictionary server to access
dictionaries. I haven't tested it on a different OS yet, but it should
provide comparable functionality to [[https://github.com/xuchunyang/osx-dictionary.el][osx-dictionary.el]] on machines not
running macOS.

#+NAME: macos-dictionary
#+BEGIN_SRC emacs-lisp
(use-package osx-dictionary
  :if (eq system-type 'darwin)
  :defines (osx-dictionary-open-dictionary-app-at-point)
  :commands (osx-dictionbary-search-word-at-point
             osx-dictionary-search-input)
  :init
  (progn
    (defun osx-dictionary-open-dictionary-app-at-point ()
      "Open `word' at point in Dictionary.app."
      (interactive)
      (shell-command (format "open dict://%s" (thing-at-point 'word))))))

#+END_SRC

**** OSX Trash

#+NAME: macos-trash
#+BEGIN_SRC emacs-lisp
(use-package osx-trash
  :if (and (eq system-type 'darwin) (not (boundp 'mac-system-move-file-to-trash-use-finder)))
  :init
  (progn
    (osx-trash-setup))
  :config
  (progn
    (setq delete-by-moving-to-trash t)))
#+END_SRC

**** OSX Clipboard

***** In Terminal

#+NAME: macos-pbcopy
#+BEGIN_SRC emacs-lisp
(use-package pbcopy
  :if (and (eq system-type 'darwin) (not (display-graphic-p)))
  :init (turn-on-pbcopy))
#+END_SRC

***** Separate Emacs clipboard from system

#+NAME: macos-simpleclip
#+BEGIN_SRC emacs-lisp
(use-package simpleclip)
#+END_SRC

**** Counsel OSX App

#+NAME: macos-counsel-osx-app
#+BEGIN_SRC emacs-lisp
(use-package counsel-osx-app
  :demand t
  :preface
  (defun wk-osx-app-icon ()
    `(,(concat
        (propertize " " 'display '(raise -0.20))
        "Apps")))
  :if (eq system-type 'darwin)
  :custom
  (counsel-osx-app-location '("/Applications" "/Applications/Setapp"))
  :after (ivy)
  :commands (counsel-osx-app))

#+END_SRC

**** UTF-8 Encoding
:PROPERTIES:
:ID:       462A8F27-D713-45EA-9CED-BF716C14EF1D
:END:

UTF-8 is the recommanded coding system on macOS.

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))


(global-set-key (kbd "C-x C-m i") 'set-input-method)

#+END_SRC

g** Files
:PROPERTIES:
:ID:       9DAB0C2D-D6AA-4143-9C7C-7CD306E21893
:END:

*** save place mode

- makuto's [[https://github.com/makuto/editorPreferences/blob/master/Emacs/emacsConfig.txt][emacsConfig.txt]]
- Xah Lee [[http://ergoemacs.org/emacs/emacs_make_modern.html][emacs make modern]]

#+BEGIN_SRC emacs-lisp
(save-place-mode 1)
#+END_SRC

*** Custom File

By default, Emacs customizations[fn:6] done through the =customize=
interface write to =user-init-file=.

While I usually prefer configuring emacs programmatically, settings
that depend on resources outside of this repository, such as
org-agenda files, will impact portability and potentially break on
other machines.

#+BEGIN_SRC emacs-lisp
(let ((directory (emacs-etc-dir "custom"))
      (file (pcase system-type
              (`darwin "custom-macos.el")
              (`gnu/linux "custom-linux.el")
              (`windows "custom-windows.el"))))
  (setq custom-file (expand-file-name file directory))
  ;; Create custom file if it does not exist.
  (if-not (file-exists-p custom-file)
      (with-temp-buffer
        (find-file custom-file)
        (save-buffer)
        (kill-buffer)))
  (load custom-file))


(defun goto-custom ()
    (interactive)
    (find-file custom-file))

(define-key goto-map "C" #'goto-custom)
#+END_SRC

*** Backup Files

This might come back to bite me one day but I never use them.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

*** Autosave
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
(setq auto-save-no-message t)
#+END_SRC

*** Lockfiles

Causes a conflict with ~lsp-mode~.
#+NAME: lockfiles-spec
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

*** Shortcuts

#+BEGIN_SRC emacs-lisp

(defun goto-init ()
  (interactive)
  (find-file (expand-file-name "init.el" user-emacs-directory)))

(defun goto-literate ()
  (interactive)
  (find-file dotemacs-user-literate-init-file))

(defun goto-tangled-init ()
  (interactive)
  (find-file
    (concat (file-name-sans-extension dotemacs-user-literate-init-file) ".el")))

(define-key goto-map "i" #'goto-init)
(define-key goto-map "l" #'goto-literate)
(define-key goto-map "t" #'goto-tangled-init)

#+END_SRC

*** Auto Revert Mode
:PROPERTIES:
:ID:       0082E12B-58E5-48B9-8E5A-132EE31F99B3
:END:

#+NAME: buffer/revert
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :straight nil
  :init
  (global-auto-revert-mode t))

#+END_SRC

** Text editing
:PROPERTIES:
:ID:       11FDD2DB-E7F5-4EB9-AD41-9B5DFAC004E0
:END:
*** Editing
**** Multiple Cursors

#+NAME: cursor/mc
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :custom
  (mc/always-run-for-all t)
  :init
  (global-unset-key (kbd "M-<down-mouse-1>"))
  :bind
  (("C-c C-s-." . mc/edit-lines)
   ("C->" . mc/mark-next-like-this)
   ("C-M->" . mc/mark-next-lines)
   ("C-c C->" . mc/mark-all-like-this)
   ("M-<mouse-1>" . mc/add-cursor-on-click))
  :config
  (when (eq system-type 'darwin)
    (global-set-key (kbd "s-d")  'mc/mark-next-like-this)
    (global-set-key (kbd "s-D")  'mc/mark-all-dwin)
    (global-set-key (kbd "M-s-d" 'mc/edit-beginnings-of-lines))))
#+END_SRC

**** better beginning of line
From Bozhidar Batsov, the author or prelude.

#+BEGIN_SRC emacs-lisp

(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.
Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.
If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)
(global-set-key (kbd "s-<left>") 'smarter-move-beginning-of-line)

#+END_SRC

**** Cleanup Whitespace

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq require-final-newline t)
#+END_SRC

**** End sentences at single space.

#+BEGIN_SRC emacs-lisp
(setq-default sentence-end-double-space nil)

  #+END_SRC

**** Fix word
:PROPERTIES:
:ID:       ADAC2F3D-0C61-4700-B25B-894F5C32379A
:END:

#+BEGIN_SRC emacs-lisp
(use-package fix-word
  :bind
  (("M-u" . fix-word-upcase)
   ("M-l" . fix-word-downcase)
   ("M-c" . fix-word-capitalize)))
#+END_SRC

*** Deleting
**** Delete Selection Mode

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

**** smart hungry delete

#+BEGIN_SRC emacs-lisp
(use-package smart-hungry-delete
  :init
  (smart-hungry-delete-add-default-hooks)
  ;; :bind (("<backspace>" . smart-hungry-delete-backward-char)
	;; 	     ("C-d" . smart-hungry-delete-forward-char))
  ;; :bind* (:map counsel-find-file-map
;;                (("<backspace>" . delete-backward-char)
;;                 ("C-d" . delete-forward-char)))
  )


#+END_SRC

*** Searching
**** ack

#+NAME: search/ack
#+BEGIN_SRC emacs-lisp
(use-package ack
  :if (executable-find "ack")
  :straight t)
#+END_SRC

**** ag

#+NAME: ag-config
#+BEGIN_SRC emacs-lisp
(use-package ag)
#+END_SRC

**** grep+

#+BEGIN_SRC emacs-lisp
(use-package grep+)
#+END_SRC

**** ripgrep

#+NAME: ripgrep
#+BEGIN_SRC emacs-lisp
(use-package rg
  :ensure-system-package
  (rg . ripgrep))

#+END_SRC

******* projectile ripgrep

#+NAME: project-ripgrep
#+BEGIN_SRC emacs-lisp

  (use-package projectile-ripgrep
      :after (projectile)
      ;; takes a cons in the form of `(binary . package-name)`
      :ensure-system-package (rg . ripgrep))

#+END_SRC

**** Codesearch

#+BEGIN_SRC emacs-lisp
(use-package codesearch)
#+END_SRC

****** Counsel code search
#+BEGIN_SRC emacs-lisp
(use-package counsel-codesearch
    :requires codesearch)
#+END_SRC

****** Projectile code search

#+NAME: project-code-search
#+BEGIN_SRC emacs-lisp
(use-package projectile-codesearch)
#+END_SRC

*** Regions
**** Whole line or region

#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region)
#+END_SRC

**** Wrap region

#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :init
  (require 'wrap-region)
  (wrap-region-add-wrappers
   '(("*" "*" nil org-mode)
     ("~" "~" nil org-mode)
     ("/" "/" nil org-mode)
     ("=" "=" nil org-mode)
     ("+" "+" nil org-mode)
     ("_" "_" nil org-mode)
     ("$" "$" nil (org-mode latex-mode))
     ("⟦" "⟧" "|" (org-mode latex-mode))
     ("⟪" "⟫" "<" (org-mode latex-mode))))
  (wrap-region-global-mode t))
#+END_SRC

**** Expand Region

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  ("s-'" .  er/expand-region)
  ("s-S-'" . er/contract-region))
#+END_SRC

*** Replace
**** Visual regexp

#+BEGIN_SRC emacs-lisp
(use-package visual-regexp)
#+END_SRC

**** Replace from region

#+BEGIN_SRC emacs-lisp
(use-package replace-from-region)
#+END_SRC

*** Checking
**** Flyspell

#+NAME: flyspell-base
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :init
    (with-eval-after-load 'org
      (add-hook 'org-mode-hook 'flyspell-mode))
    :config
    (progn
      (when (executable-find "hunspell")
        (setq-default ispell-program-name "hunspell")
        (setq-default ispell-dictionary "en_US")
        (setq ispell-really-hunspell t))))
#+END_SRC

****** Flyspell Correct

#+NAME: flyspell-correct-config
#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct-ivy
    :after (:all flyspell ivy)
    :demand t
    :config
    (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-previous-word-generic))
#+END_SRC

**** Langtool

LanguageTool is a Java plugin which provides style and grammar
checking for natural language.

#+NAME: sc-langtool
#+BEGIN_SRC emacs-lisp
(use-package langtool
  :if (eq system-type 'darwin)
  :after (flyspell)
  :demand t
  :custom
  (langtool-language-tool-jar
   "/usr/local/opt/languagetool/libexec/languagetool-commandline.jar")
  (langtool-mother-tongue "en")
  (langtool-disabled-rules '("DASH_RULE"))
  :init
  (defun langtool-autoshow-detail-popup (overlays)
    (when (require 'popup nil t)
      ;; Do not interrupt current popup
      (unless (or popup-instances
                 ;; suppress popup after type `C-g` .
                 (memq last-command '(keyboard-quit)))
        (let ((msg (langtool-details-error-message overlays)))
          (popup-tip msg)))))
  :config
  (setq langtool-autoshow-message-function 'langtool-autoshow-detail-popup))
#+END_SRC

**** Academic Phrases

#+NAME: sc-academic
#+BEGIN_SRC emacs-lisp
(use-package academic-phrases)
#+END_SRC

**** Proselint

#+NAME: sc-proselint
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'flycheck
    (flycheck-define-checker proselint
                             "A linter for prose."
                             :command ("proselint" source-inplace)
                             :error-patterns
                             ((warning line-start (file-name) ":" line ":" column ": "
                                       (id (one-or-more (not (any " "))))
                                       (message) line-end))
                             :modes (text-mode org-mode markdown-mode gfm-mode))
    (add-to-list 'flycheck-checkers 'proselint))

#+END_SRC

**** Dictionary.el
:PROPERTIES:
:ID:       98EF59F6-66E8-47B3-A437-B1D53A74832A
:CUSTOM_ID: dictionary-el
:END:

The [[https://github.com/myrkr/dictionary-el][dictionary.el]] package provides an Emacs client which uses an open source
dictionary server to lookup words. What it lacks in bells and
whistles, it makes up for in compatibility and hackability [fn:18].

#+NAME: completion/dictionary-el
#+BEGIN_SRC emacs-lisp
(use-package dictionary
  :commands (dictionary-lookup-definition))
#+END_SRC


**** Typo Mode
:PROPERTIES:
:ID:       7F09312B-CA58-4884-896C-DDC323FB3B83
:END:
#+NAME: writing-typo
#+BEGIN_SRC emacs-lisp
 (use-package typo)
#+END_SRC

**** Writegood
:PROPERTIES:
:ID:       10DB611C-6B5A-4441-8FAB-E6996B14D19C
:END:

#+BEGIN_SRC emacs-lisp
 (use-package writegood-mode)
#+END_SRC

** Projects
*** Projectile

#+NAME: project-projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :custom
  (projectile-completion-system 'ivy)
  (projectile-switch-project-action #'projectile-dired)
  (projectile-find-dir-includes-top-level t)
  (projectile-enable-caching t)
  :init
    (el-patch-feature projectile)

  (el-patch-defun projectile-run-compilation (cmd)
    "Run external or Elisp compilation command CMD."
    (if (functionp cmd)
        (funcall cmd)
      (compile cmd (el-patch-add t))))

  (defvar dotemacs/ignored-project-directories
    '("~/.emacs.d/straight"))

  (defun projectile-ignore-projects-in-directory (project-root)
    "Ignore directories in `dotemacs/ignored-project-directories'."
    (cl-flet ((ignored-dir-or-subdir-p
               (path)
               (f-descendant-of?
                (f-expand project-root)
                path)))
      (->> dotemacs/ignored-project-directories
         (seq-filter #'ignored-dir-or-subdir-p)
         seq-empty-p not)))

  (setq projectile-ignored-project-function
        #'projectile-ignore-projects-in-directory)

  :config
  (when (featurep 'which-key)
    (which-key-add-key-based-replacements "C-c p" " Projectile")

    (push '((nil . "projectile-\\(.+\\)") . (nil . "\\1"))
          which-key-replacement-alist))

  (setq projectile-globally-ignored-directories
       (append projectile-globally-ignored-directories
                '("gradle" "target" ".meghanada"
                  ".gradle" "build" "bin" "node_modules"
                  "ltximg" "CMakeFiles" ".cquery_cached_index"))))

#+END_SRC

**** Projectile Codesearch

#+NAME: project-codesearch
#+BEGIN_SRC emacs-lisp
  (use-package projectile-codesearch
      :after (projectile)
      :bind (:map projectile-command-map
                  ("s c" . projectile-codesearch-search)))
#+END_SRC

**** Projectile Ripgrep

#+NAME: project-ripgrep
#+BEGIN_SRC emacs-lisp

  (use-package projectile-ripgrep
      :after (projectile)
      ;; takes a cons in the form of `(binary . package-name)`
      :ensure-system-package (rg . ripgrep))

#+END_SRC

**** Projectile Treemacs

#+NAME: projectile/treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs-projectile
  :after (treemacs)
  :demand t)
#+END_SRC


*** Find File in Project

#+NAME: project-ffip
#+BEGIN_SRC emacs-lisp
(use-package find-file-in-project
  :bind ("s-p" . ffip)
  :custom
  (ffip-use-rust-fd t)
  (add-to-list 'ffip-prune-patterns "*/straight"))
#+END_SRC

*** File System
**** Dired

#+BEGIN_SRC emacs-lisp
(use-package dired
  :straight nil
  :custom
  ;; When split frames with two dired buffers,
  ;; use other buffer as the current directory.
  (dired-dwim-target t)
  :bind (:map dired-mode-map
              ;; When moving to parent directory by `^´, Dired by default
              ;; creates a new buffer for each movement up. This rebinds
              ;; `^´ to use the same buffer.
              ("^" . dired/reuse-buffer)
              ("z" . dired-do-open-with))
  :init
  ;; from [[https://jblevins.org/log/dired-open][Integrating OS X and Emacs Dired]]:
  (defun dired-do-open-with (&optional arg)
    "Open the marked (or next ARG) files."
    (interactive "P")
    (cl-flet ((dired-open-with (file)
                               (start-process "default app" nil "open" file)))
      (let ((file-list (dired-get-marked-files t arg nil nil t)))
        (mapcar #'dired-open-with file-list))))

  (defun dired/reuse-buffer ()
    "Reuse the existing dired buffer when moving to the
parent directory."
	  (interactive)
    (find-alternate-file ".."))
  :config
  (when (symbolp 'org-file-apps)
    (add-to-list 'org-file-apps '(directory . emacs))))
#+END_SRC

***** Dired+


Adds extensions and functionality to dired mode.

#+NAME: dired-plus-config
#+BEGIN_SRC emacs-lisp
(use-package dired+
  :init
  (add-hook #'dired-mode-hook #'dired-hide-details-mode))
#+END_SRC

***** Dired Sidebar
:PROPERTIES:
:ID:       2ABE4F83-BA00-441E-8F77-857B455834AC
:END:

#+NAME: dired-sidebar-config
#+BEGIN_SRC emacs-lisp
 (use-package dired-sidebar
     :commands (dired-sidebar-toggle-sidebar)
     :custom
     (dired-sidebar-should-follow-file nil)
     (dired-sidebar-theme 'none)
     :bind
     ("C-c d" . dired-sidebar-toggle-sidebar)
     :hook
     (dired-sidebar-mode . dired-sidebar-refresh-buffer))
#+END_SRC





**** Pack

#+BEGIN_SRC emacs-lisp
(use-package pack
    :bind
  (:map dired-mode-map
        ("P" .  pack-dired-dwim)))
#+END_SRC

**** Neotree

[[https://github.com/jaypei/emacs-neotree][Neotree]][fn:13] is a [[https://github.com/scrooloose/nerdtree][Nerdtree]]-like file explorer for managing projects in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :after (projectile)
  :demand t
  :commands (neotree-project-dir)
  :bind
  (([f8] . neotree-project-dir))
  :custom
  (neo-theme (if (display-graphic-p) 'icons 'arrow))
  (neo-smart-open t)
  :config
  (progn
    ;; @source https://www.emacswiki.org/emacs/NeoTree
    (defun neotree-project-dir ()
      "Open NeoTree using the git root"
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                 (progn
                   (neotree-dir project-dir)
                   (neotree-find file-name)))
          (message "Project root not found."))))))
#+END_SRC

**** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :custom
  (treemacs-python-executable (or (executable-find "python3") (executable-find "python")))
  (treemacs-collapse-dirs
   (if (executable-find "python3") 3 0))
  (treemacs-deferred-git-apply-delay   0.5)
  (treemacs-display-in-side-window     t)
  (treemacs-file-event-delay           5000)
  (treemacs-file-follow-delay          0.2)
  (treemacs-follow-after-init          t)
  (treemacs-follow-recenter-distance   0.1)
  (treemacs-goto-tag-strategy          'refetch-index)
  (treemacs-indentation                2)
  (treemacs-indentation-string         " ")
  (treemacs-is-never-other-window      nil)
  (treemacs-max-git-entries            5000)
  (treemacs-no-png-images              nil)
  (treemacs-project-follow-cleanup     nil)
  (treemacs-persist-file
   (no-littering-expand-var-file-name "treemacs-persist"))
  (treemacs-recenter-after-file-follow nil)
  (treemacs-recenter-after-tag-follow  nil)
  (treemacs-show-cursor                nil)
  (treemacs-show-hidden-files          t)
  (treemacs-silent-filewatch           nil)
  (treemacs-silent-refresh             nil)
  (treemacs-sorting                    'alphabetic-desc)
  (treemacs-space-between-root-nodes   t)
  (treemacs-tag-follow-cleanup         t)
  (treemacs-tag-follow-delay           1.5)
  (treemacs-width                      35)
  :config
  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;;(treemacs-resize-icons 44)

  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode t)
  (pcase (cons (not (null (executable-find "git")))
               (not (null (executable-find "python3"))))
    (`(t . t)
     (treemacs-git-mode 'extended))
    (`(t . _)
     (treemacs-git-mode 'simple)))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+END_SRC

**** Speedbar

***** same frame
#+NAME: speed-sr
#+BEGIN_SRC emacs-lisp
(use-package sr-speedbar)
#+END_SRC

***** Projectile Speedbar
#+NAME: projectile-speedbar
#+BEGIN_SRC emacs-lisp
(use-package projectile-speedbar
  :after (:all speedbar projectile)
  :bind ("M-<f2>" . projectile-speedbar-open-current-buffer-in-tree))
#+END_SRC

**** Open With
:PROPERTIES:
:ID:       8D3D83D3-552F-40DC-91B4-AD9D60315748
:END:

#+NAME: open-with-spec
#+BEGIN_SRC emacs-lisp
(use-package openwith
  :straight t)
#+END_SRC

*** Search
**** Codesearch

#+BEGIN_SRC emacs-lisp
(use-package codesearch)
#+END_SRC

**** Avy
Jump to arbitrary point in Buffer

#+NAME: search/avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind
    ("C-:" . avy-goto-char))
#+END_SRC

**** ack

#+NAME: search/ack
#+BEGIN_SRC emacs-lisp
(use-package ack
  :if (executable-find "ack")
  :straight t)
#+END_SRC

**** ag

#+NAME: ag-config
#+BEGIN_SRC emacs-lisp
(use-package ag)
#+END_SRC

**** grep+

#+BEGIN_SRC emacs-lisp
(use-package grep+)

#+END_SRC

**** rg

#+NAME: ripgrep
#+BEGIN_SRC emacs-lisp
(use-package rg
  :ensure-system-package
  (rg . ripgrep))

#+END_SRC

**** Visual Replace

#+BEGIN_SRC emacs-lisp
(use-package visual-regexp)
#+END_SRC

**** Undo Tree

Visualize buffer modifications during an Emacs session as an
interactive tree .

#+NAME: search/undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :custom
  (undo-tree-auto-save-history t)
  (undo-tree-visualizer-timestamps t)
  (undo-tree-visualizer-diff t)
  :init
  (global-undo-tree-mode)
  :config
  (when (eq system-type 'darwin)
    (global-set-key (kbd "s-z") 'undo-tree-undo)
    (global-set-key (kbd "s-Z") 'undo-tree-redo)))
#+END_SRC

** Shell
:PROPERTIES:
:ID:       055F15AE-FAFA-416A-ABC5-8DBB9D9D7CBF
:END:
*** Terminal Colors
**** Ansi Color

#+NAME: sh/ansi
#+BEGIN_SRC emacs-lisp
(use-package ansi-color
  :custom
  (ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
  :init
  (defun colorize-compilation-buffer ()
    "Escape ANSI color sequence in the compilation buffer."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))

  (defun display-ansi-colors ()
    "Display ANSI color sequences in the current buffer."
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max)))

  ;; :config
  ;; (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
  ;; (add-hook 'comint-output-filter-functions 'ansi-color-process-output)
  )
#+END_SRC

**** xterm color

#+NAME: sh/xtcolor
#+BEGIN_SRC emacs-lisp

 (use-package xterm-color
     :init
     ;; Comint and Shell
     (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
     (setq comint-output-filter-functions
           (remove 'ansi-color-process-output comint-output-filter-functions))

     (defun esh/xterm-color ()
       "Initialize xterm coloring for eshell."
    (with-eval-after-load 'eshell
      (setq-local xterm-color-preserve-properties t)
      (make-local-variable 'eshell-preoutput-filter-functions)
      (add-hook 'eshell-preoutput-filter-functions 'xterm-color-filter)
      (setq-local eshell-output-filter-functions
                  (remove 'eshell-handle-ansi-color
                          eshell-output-filter-functions))))

     :hook
     (eshell-mode . esh/xterm-color))

#+END_SRC

*** Emacs shell
**** eshell

#+NAME: esh/eshell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :custom
  (pcomplete-cycle-completions nil)
  (eshell-cmpl-cycle-completions nil)
  (eshell-buffer-maximum-lines 20000)
  (eshell-history-size 350)
  (eshell-hist-ignoredups t)
  (eshell-buffer-shorthand t)
  (eshell-highlight-prompt t)
  (eshell-plain-echo-behavior t)

  :init
  (defvar company-default-idle-delay nil)


  (defun esh/protect-prompt ()
    "Protect Eshell prompt like the prompt in `comint-mode'."
      (let ((inhibit-field-text-motion t))
        (add-text-properties
         (point-at-bol)
         (point)
         '(rear-nonsticky t
           inhibit-line-move-field-capture t
           field output
           read-only t
           front-sticky (field inhibit-line-move-field-capture)))))

  (defun esh/toggle-shell-completion-based-on-path ()
    "Deactivates automatic completion on remote paths. "
    (when (featurep 'company)
      (unless (numberp company-default-idle-delay)
        (setq company-default-idle-delay company-idle-delay))

      (if (file-remote-p default-directory)
          (setq-local company-idle-delay nil)
        (setq-local company-idle-delay company-default-idle-delay))))

  (defun esh/company ()
    "Change the company frontend to be compatible with short eshell
windows. Additionally, modify company backends in the local buffer."
    (when (featurep 'company)
      (setq-local company-frontends '(company-preview-frontend))
      (set (make-local-variable 'company-backends)
           (append '(company-capf) company-backends))))


  (defun esh/disable-semantic ()
    (when (featurep 'semantic)
      (semantic-mode -1)))

  :hook
  (eshell-mode . esh/company)
  (eshell-mode . esh/disable-semantic)
  (eshell-directory-change . esh/toggle-shell-completion-based-on-path))
#+END_SRC

**** Pretty Eshell

From Eric Kaschalk's [[https://github.com/ekaschalk/.spacemacs.d][spacemacs display layer]].

#+NAME: esh/pretty
#+BEGIN_SRC emacs-lisp
(use-package pretty-eshell
  :if (and (featurep 'no-littering)
         (file-exists-p
          (no-littering-expand-etc-file-name
           "local/pretty-eshell/pretty-eshell.el")))
  :straight nil
  :load-path "etc/local/pretty-eshell"
  :custom-face
  (eshell-prompt ((t (:foreground "gray83"))))
  :custom
  ;; Eshell prompt regexp and string.
  (eshell-prompt-regexp "λ ")   ; or "└─> "
  :init
  (progn
    (require 'pretty-eshell)
    (setq pretty-eshell-header "\n ")
    (setq pretty-eshell-prompt-string "λ ")
    ;; Directory
    (pretty-eshell-section
     esh-dir
     "\xf07c"  ; 
     (abbreviate-file-name (eshell/pwd))
     '(:foreground "gold" :weight bold :underline t))

    ;; Git Branch
    (pretty-eshell-section
     esh-git
     "\xe907"  ; 
     (magit-get-current-branch)
     '(:foreground "pink"))

    ;; Python Virtual Environment
    (pretty-eshell-section
     esh-python
     "\xe928"  ; 
     pyvenv-virtual-env-name)

    ;; Time
    (pretty-eshell-section
     esh-clock
     "\xf017"  ; 
     (format-time-string "%H:%M" (current-time))
     '(:foreground "forest green"))

    ;; Prompt Number
    (pretty-eshell-section
     esh-num
     "\xf0c9"  ; 
     (number-to-string pretty-eshell-prompt-num)
     '(:foreground "brown"))

    (setq pretty-eshell-funcs
          (list esh-dir esh-git esh-python esh-clock esh-num))))
#+END_SRC

**** eshell bookmark

#+NAME: esh/bmk
#+BEGIN_SRC emacs-lisp
(use-package eshell-bookmark
  :hook
  (eshell-mode . eshell-bookmark-setup))
#+END_SRC

**** eshell-z

#+NAME: esh/z
#+BEGIN_SRC emacs-lisp
(use-package eshell-z)
#+END_SRC

*** ~M-x shell~

#+NAME: sh/shell
#+BEGIN_SRC emacs-lisp
(use-package shell
  :init

  (defun string-trim-final-newline (string)
    (let ((len (length string)))
      (cond
       ((and (> len 0) (eql (aref string (- len 1)) ?\n))
        (substring string 0 (- len 1)))
       (t string))))


  (defun shell-command-to-string-trim-final-newline
      (orig-fun &rest args)
    (let ((res (apply orig-fun args)))
      (string-trim-final-newline res)))

  (advice-add 'shell-command-to-string
              :around #'shell-command-to-string-trim-final-newline)


  (defun inferior-shell (&optional ARG)
    "Wrapper to open shell in current window"
    (interactive)
    (switch-to-buffer "*shell*")
    (shell "*shell*"))

  (defun shell/comint-input-sender-hook ()
    "Check certain shell commands.
  Executes the appropriate behavior for certain commands."
    (setq comint-input-sender
          (lambda (proc command)
            (cond
             ;; Check for clear command and execute it.
             ((string-match "^[ \t]*clear[ \t]*$" command)
              (comint-send-string proc "\n")
              (let ((inhibit-read-only  t))
                (erase-buffer)))
             ;; Check for man command and execute it.
             ((string-match "^[ \t]*man[ \t]*" command)
              (comint-send-string proc "\n")
              (setq command (replace-regexp-in-string
                             "^[ \t]*man[ \t]*" "" command))
              (setq command (replace-regexp-in-string
                             "[ \t]+$" "" command))
              (funcall 'man command))
             ;; Send other commands to the default handler.
             (t (comint-simple-send proc command))))))

  (defun shell/disable-hl-line-mode ()
    "Locally disable `global-hl-line-mode'."
    (setq-local global-hl-line-mode nil))

  :hook
  (shell-mode . shell/comint-input-sender-hook)
  (shell-mode . shell/disable-hl-line-mode))
#+END_SRC

*** Term

#+NAME: sh/term
#+BEGIN_SRC emacs-lisp
(use-package term
  :custom
  (ansi-term-color-vector
   [term
    term-color-black
    term-color-red
    term-color-green
    term-color-yellow
    term-color-blue
    term-color-magenta
    term-color-cyan
    term-color-white])
  :init
  (defun term-send-tab ()
    "Send tab in term mode."
    (interactive)
    (term-send-raw-string "\t"))

  (defun ansi-term-handle-close ()
    "Close current term buffer when `exit' from term buffer."
    (when (ignore-errors (get-buffer-process (current-buffer)))
      (set-process-sentinel
       (get-buffer-process (current-buffer))
       (lambda (proc change)
         (when (string-match "\\(finished\\|exited\\)"
                             change)
           (kill-buffer (process-buffer proc))
           (when (> (count-windows) 1)
             (delete-window)))))))
  :hook
  (term-mode . ansi-term-handle-close))
#+END_SRC

*** Multi Term

#+NAME: sh/multiterm
#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :after (term)
  :bind
  (:map term-mode-map
  ( "C-c C-j" . term-line-mode))
  :init
  (defun multiterm (&optional ARG)
    "Wrapper to be able to call multi-term from shell-pop"
     (interactive)
     (multi-term))

  :config
  (add-to-list 'term-bind-key-alist '("<tab>" . term-send-tab)))
#+END_SRC

*** Shell Pop

#+NAME: sh/pop
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :custom
  (shell-pop-window-position 'bottom)
  (shell-pop-window-size 30)
  (shell-pop-term-shell shell-file-name)
  (shell-pop-full-span t)
  :init
  (defun resize-shell-pop-to-desired-width ()
    (when (and (string= (buffer-name) shell-pop-last-shell-buffer-name)
             (memq shell-pop-window-position '(left right)))
      (enlarge-window-horizontally
       (- (/ (* (frame-width) shell-default-width) 100)
          (window-width)))))

  (defmacro make-shell-pop-command (func &optional shell)
    "Create a function to open a shell via the function FUNC.
SHELL is the SHELL function to use (i.e. when FUNC represents a terminal)."
    (let* ((name (symbol-name func)))
      `(defun ,(intern (concat "shell-pop-" name)) (index)
         ,(format
           (concat "Toggle a popup window with `%S'.\n"
                   "Multiple shells can be opened with a numerical prefix "
                   "argument. Using the universal prefix argument will "
                   "open the shell in the current buffer instead of a "
                   "popup buffer.") func)
         (interactive "P")
         (require 'shell-pop)
         (if (equal '(4) index)
             ;; no popup
             (,func ,shell)
           (shell-pop--set-shell-type
            'shell-pop-shell-type
            (backquote (,name
                        ,(concat "*" name "*")
                        (lambda nil (,func ,shell)))))
           (shell-pop index)
           (resize-shell-pop-to-desired-width)))))

  (make-shell-pop-command eshell)
  (make-shell-pop-command term shell-pop-term-shell)
  (make-shell-pop-command ansi-term shell-pop-term-shell)
  (make-shell-pop-command inferior-shell)
  (make-shell-pop-command multiterm))
#+END_SRC

*** With Editor

#+NAME: sh/witheditor
#+BEGIN_SRC emacs-lisp
(use-package with-editor
  :hook
  ((shell-mode term-exec eshell-mode) . with-editor-export-editor))
#+END_SRC

*** SSH

#+NAME: remote/ssh
#+BEGIN_SRC emacs-lisp
(use-package ssh
  :init
  (defun ssh/enable-path-completion ()
    "Enable directory tracking and path autocompletion
over ssh."
    (setq ssh-directory-tracking-mode 'ftp)
    (shell-dirtrack-mode t)
    (setq dirtrackp nil))

  :hook
  (ssh-mode . ssh/enable-path-completion))
#+END_SRC

***** SSH tunnels

#+BEGIN_SRC emacs-lisp
(use-package ssh-tunnels)
#+END_SRC

***** SSH Deploy

#+BEGIN_SRC emacs-lisp
(use-package ssh-deploy)

#+END_SRC

*** SCP

#+NAME: remote/scp
#+BEGIN_SRC emacs-lisp
(use-package scp
  :preface
  (setq enable-local-variables :all enable-local-eval t)
  :init
  (cl-defun scp/setup (&optional host user password remote-path port)
    "Set the connection information for the current project using
directory local variables."
    (interactive (list
                  (read-string "Host: "
                               tramp-default-host)
                  (read-string "User: "
                               (or tramp-default-user
                                  (getenv "USER")))
                  (read-string "Password: ")
                  (read-string "Remote Path: "
                               (concat
                                "~/"
                                (basename default-directory)))
                  (read-string "Port: " "22")))
    (let ((vars
           (mapcar* #'cons
                    '(host user password remote-path port)
                    (list host user password remote-path port))))
      (dolist (var vars)
        (add-dir-local-variable nil (car var) (cdr var))))))
#+END_SRC

*** Tramp

#+NAME: remote/tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :custom
  ;; use ssh by default
  (tramp-default-method "ssh")
  (tramp-default-user user-login-name))
#+END_SRC

**** Docker Tramp
:PROPERTIES:
:ID:       0BC85ED8-9B18-4CDA-9C45-B4B54BFE632E
:END:

#+NAME: docker/tramp
#+BEGIN_SRC emacs-lisp
(use-package docker-tramp)
#+END_SRC

**** Kubernetes Tramp

#+BEGIN_SRC emacs-lisp
(use-package kubernetes-tramp)
#+END_SRC

** Documentation
:PROPERTIES:
:ID:       67707BA1-09DE-4175-BD74-4BA869BFBAA9
:END:

*** Help
**** Help+

#+BEGIN_SRC emacs-lisp
(use-package help+
    :demand t)
#+END_SRC

***** help-mode+

#+BEGIN_SRC emacs-lisp :tangle
(use-package help-mode+
    :demand t)
#+END_SRC

***** help-macro+

#+BEGIN_SRC emacs-lisp
(use-package help-macro+
    :demand t)
#+END_SRC

***** help-fns+

#+BEGIN_SRC emacs-lisp
(use-package help-fns+
    :demand t)
#+END_SRC

**** Helpful

#+NAME: help-helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind
  ("C-h f" . helpful-callable)
  ("C-h v" . helpful-variable)
  ("C-h k" . helpful-key)
  ("C-h C" . helpful-command)
  ("C-c C-d" . helpful-at-point)
  ("C-h F" . helpful-function))

#+END_SRC

**** Help find org mode

#+BEGIN_SRC emacs-lisp
(use-package help-find-org-mode
  :init
  (help-find-org-mode 1))
#+END_SRC

*** Elisp refs

#+BEGIN_SRC emacs-lisp
(use-package elisp-refs)
#+END_SRC

*** Info+
:PROPERTIES:
:ID:       81C8F5CC-5F6E-417F-B549-BE2523A726BB
:END:

#+BEGIN_SRC emacs-lisp
(use-package info+)
#+END_SRC

** Frames
:PROPERTIES:
:ID:       0D07CBD4-1F78-4228-A86F-73257A4BA467
:END:
*** Frame+
:PROPERTIES:
:ID:       4B926D23-5661-4301-B4D6-39967E34EA23
:END:

#+NAME: frame-plus
#+BEGIN_SRC emacs-lisp
(use-package frame+)
#+END_SRC

*** Frame fns
#+BEGIN_SRC emacs-lisp
(use-package frame-fns)
#+END_SRC

*** Frame cmds
:PROPERTIES:
:ID:       BBFEF753-9BE3-4B00-9CF1-36AA98244704
:END:

#+BEGIN_SRC emacs-lisp
(use-package frame-cmds)
#+END_SRC

*** Transpose frame
#+BEGIN_SRC emacs-lisp
(use-package transpose-frame
  :bind ("C-x M-t" . transpose-frame))

#+END_SRC
*** Posframe
**** Ivy Posframe

#+NAME: ivy/posframe
#+BEGIN_SRC emacs-lisp
(use-package ivy-posframe)
#+END_SRC

** Faces
:PROPERTIES:
:ID:       DB2AF151-88E9-4976-8E1D-EA289AFA9630
:END:
*** Faces+

#+BEGIN_SRC emacs-lisp
(use-package faces+)
#+END_SRC

*** Face functions

#+BEGIN_SRC emacs-lisp
(use-package face-fns)
#+END_SRC

*** Face remap+

#+BEGIN_SRC emacs-lisp
(use-package face-remap+)
#+END_SRC

*** Face Explorer

#+BEGIN_SRC emacs-lisp
(use-package face-explorer)
#+END_SRC

*** Font lock
**** FontLock+

#+NAME: font-lock-plus
#+BEGIN_SRC emacs-lisp
(use-package font-lock+
  :demand t
  :init
  (require 'font-lock+))

#+END_SRC

***** Italicize font lock keyword face
:PROPERTIES:
:ID:       C72C2D39-2562-4E7F-B9BC-0F4D0881670B
:END:

#+NAME: theme-italicize-for-modes
#+BEGIN_SRC emacs-lisp
(defcustom dotemacs-italicize-keyword-modes '(emacs-lisp-mode js2-mode)
  "Major modes for which an italicized font lock keyword
face shall be used."
  :type '(symbol))

(defun dotemacs/italicize-keyword-fn ()
(face-remap-add-relative 'font-lock-keyword-face
                         '(:slant italic
                           :family "Operator Mono")))

(defun dotemacs/italicize-keyword-faces ()
  (cl-flet ((mode->hook (mode)
              (intern (concat (symbol-name mode) "-hook"))))
    (cl-loop
       for mode in dotemacs-italicize-keyword-modes
       for hooksym = (mode->hook mode)
       do
         (add-hook hooksym 'dotemacs/italicize-keyword-fn))))


(add-hook 'after-init-hook 'dotemacs/italicize-keyword-faces)

#+END_SRC

****** Per buffer Themes

#+NAME: theme/per-buffer
#+BEGIN_SRC emacs-lisp
(use-package per-buffer-theme)
#+END_SRC

**** Font lock studio

#+BEGIN_SRC emacs-lisp
(use-package font-lock-studio)
#+END_SRC

*** Button Lock
:PROPERTIES:
:ID:       24DBC7FD-6AE3-4A2B-A42E-8FBC2E8127C5
:END:

#+NAME: button/lock
#+BEGIN_SRC emacs-lisp
(use-package button-lock)
#+END_SRC

** Window
:PROPERTIES:
:ID:       39D49D11-3663-4F0F-A2CE-2CE4FE8CB2CB
:END:
*** Window Resize

Default keybindings for window resize:

- =C-x ^= :: makes current window taller [[help:enlarge-window][`enlarge-window']]
- =C-x }= :: make it larger [[help:enlarge-window-horizontally][`enlarge-window-horizontally']]
- =C-x {= :: make it narrower [[help:shrink-window-horizontally][`shrin-window-horizontally']]

This following block modifies the keybindings for these commands to
use the arrow keys instead. I use the "C-s" modifier because it just
so happens this prefix can be extended by every key in the arrow pad
without causing a conflict with external keymaps on my system.

The suggested keybindings from the footnoted EmacsWiki page may be more
accessible for you [fn:15].

#+NAME: window-resize-keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-s-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-s-<down>") 'shrink-window)
(global-set-key (kbd "C-s-<up>") 'enlarge-window)
#+END_SRC

*** Winner Mode

[[https://www.emacswiki.org/emacs/WinnerMode][Winner mode]] is a global minor mode that allows easy switching across
different window configurations.

#+NAME: winner-mode-config
#+BEGIN_SRC emacs-lisp
(use-package winner-mode
  :straight nil
  :init
  (when (fboundp 'winner-mode)
    (winner-mode 1)))
#+END_SRC

*** Ace Window

#+NAME: window/ace
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
      :bind
      ("M-o" . ace-window)
      :custom
      (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (aw-background nil))

#+END_SRC

*** Perspective


#+NAME: persp/perspective
#+BEGIN_SRC emacs-lisp
(use-package perspective
  :init
  (persp-mode 1))
#+END_SRC

**** Persp Projectile

#+NAME: persp/projectile
#+BEGIN_SRC emacs-lisp
(use-package persp-projectile
  :after (:all projectile counsel-projectile perspective)
  :bind ((:map projectile-mode-map
               ("s-S" . projectile-persp-switch-project))))
#+END_SRC

*** Popwin

#+NAME: popwin-config
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package popwin
    :defines popwin:keymap
    :after (perspective)
    :bind-keymap ("C-z" . popwin:keymap)
    :bind (:map popwin:keymap
                ("m" . popwin:messages))
    :init
    (require 'popwin)
    :config
    (popwin-mode 1))
#+END_SRC

*** Poporg

#+BEGIN_SRC emacs-lisp
(use-package poporg
  :bind ("C-c \"" . 'poporg-dwim))
#+END_SRC

*** Golden Ratio

#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :init
  (setq golden-ratio-auto-scale t))
#+END_SRC

*** Purpose

#+NAME: purpose
#+BEGIN_SRC emacs-lisp
  (use-package window-purpose)

  (use-package ivy-purpose
      :custom (pop-up-frames nil)
      :after (window-purpose)
      :init
      (ivy-purpose-setup)
      :config
      ;; give help buffers the 'popup-frame purpose
      (add-to-list 'purpose-user-mode-purposes
                  '(help-mode . popup-frame))
      (add-to-list 'purpose-special-action-sequences
                   '(popup-frame
                     purpose-display-reuse-window-buffer
                     purpose-display-reuse-window-purpose
                     purpose-display-pop-up-frame)))
#+END_SRC

** Minibuffer
:PROPERTIES:
:ID:       356E9F9B-4A80-4D65-9846-2B37DB270206
:END:
*** Prompt Properties

Don't let the cursor go into the minibuffer prompt.

From Xah Lee's [[http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html][emacs-stop-cursor-enter-prompt]], found in the [[https://github.com/syl20bnr/spacemacs/blob/bd7ef98e4c35fd87538dd2a81356cc83f5fd02f3/layers/%2Bdistributions/spacemacs-base/config.el#L128-L131][config.el]] file of the spacemacs base layer.

#+NAME: mb-prompt
#+BEGIN_SRC emacs-lisp
(setq minibuffer-prompt-properties
      '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
#+END_SRC

*** Ivy

[[https://github.com/abo-abo/swiper][Ivy]] is a completion and selection framework in the same vein
as helm.

It doesn't have the same kind of ecosystem or interopability,
but its easy to configure, offers a minimalistic interface,
and is every bit as good of a completion tool as helm is,
if not better.

I prefer the default regex matcher, but if you want fuzzy matching as a fallback or replacement checkout this [[https://oremacs.com/2016/01/06/ivy-flx/][article]].

#+NAME: ivy/mode
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :bind (("C-c C-r" . ivy-resume))
  :init
  (ivy-mode +1)
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-initial-inputs-alist nil)
  (ivy-sort-max-size 50000)
  (ivy-re-builders-alist
   '((swiper . ivy--regex-plus)
     (read-file-name-internal . ivy--regex-fuzzy)
     (t . ivy--regex-ignore-order)))
  (ivy-use-selectable-prompt nil))
#+END_SRC

**** Ivy rtags
:PROPERTIES:
:ID:       D38BB737-FE4B-4DD6-8208-0F538ED777CB
:END:

#+NAME: ivy/rtags
#+BEGIN_SRC emacs-lisp
(use-package ivy-rtags
  :after (rtags)
  :init
  (setq rtags-display-result-backend 'ivy))

#+END_SRC

**** Ivy xref
#+NAME: ivy/xref
#+BEGIN_SRC emacs-lisp
(use-package ivy-xref
    :init
  (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))
#+END_SRC

**** Ivy todos

#+NAME: ivy/todo
#+BEGIN_SRC emacs-lisp

  (use-package ivy-todo
    :custom
    (ivy-todo-file (agenda-dir "ivy-todo.org")))


#+END_SRC

**** Ivy rich

#+NAME: ivy/rich
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :after (:all ivy counsel)
    :demand t
    :init
    (ivy-rich-mode 1)
    :config
    (defun ivy-rich-switch-buffer-icon (candidate)
      "Use `all-the-icons' icons in buffer list."
      (with-current-buffer
	  (get-buffer candidate)
	(let ((icon (all-the-icons-icon-for-mode major-mode)))
	  (if (symbolp icon)
	      (all-the-icons-icon-for-mode 'fundamental-mode)
	    icon))))

    (setq ivy-rich--display-transformers-list
     '(ivy-switch-buffer
       (:columns
	((ivy-rich-switch-buffer-icon :width 2)
	 (ivy-rich-candidate (:width 30))
	 (ivy-rich-switch-buffer-size (:width 7))
	 (ivy-rich-switch-buffer-indicators
	  (:width 4 :face error :align right))
	 (ivy-rich-switch-buffer-major-mode
	  (:width 12 :face warning))
	 (ivy-rich-switch-buffer-project (:width 15 :face success))
	 (ivy-rich-switch-buffer-path
	  (:width (lambda (x)
		    (ivy-rich-switch-buffer-shorten-path
		     x (ivy-rich-minibuffer-width 0.3))))))
	:predicate
	(lambda (cand) (get-buffer cand)))
       counsel-M-x
       (:columns
	((counsel-M-x-transformer (:width 40))
	 (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
       counsel-describe-function
       (:columns
	((counsel-describe-function-transformer (:width 40))
	 (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
       counsel-describe-variable
       (:columns
	((counsel-describe-variable-transformer (:width 40))
	 (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
       counsel-recentf
       (:columns
	((ivy-rich-candidate (:width 0.8))
	 (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))))))
#+END_SRC

**** Ivy pages

#+NAME: ivy/pages
#+BEGIN_SRC emacs-lisp
  (use-package ivy-pages
    :after (ivy))
#+END_SRC

**** Ivy Posframe

#+NAME: ivy/posframe
#+BEGIN_SRC emacs-lisp
(use-package ivy-posframe)
#+END_SRC

**** Ivy yasnippet
:PROPERTIES:
:ID:       FC448B14-3574-43EB-B7A7-1777E6507C58
END:

#+BEGIN_SRC emacs-lisp
(use-package ivy-yasnippet)
#+END_SRC

*** Counsel

#+NAME: mb-counsel
#+BEGIN_SRC emacs-lisp
;; counsel mode

;; Counsel Projectile

;; Counsel Gtags

;; Counsel iTunes

;; Counsel spotify

;; Counsel Dash

;; Counsel Tramp

;; Counsel Code Search

#+END_SRC

**** counsel mode

#+NAME: counsel/mode
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind (("<f1> l" . counsel-find-library)
           ("C-c l" . counsel-load-library)
           ("C-c g" . counsel-git)
           ("C-c G" . counsel-git-grep)
           ("C-c k" . counsel-ag)
           ("C-x l" . counsel-locate)
           ([remap insert-char] . counsel-unicode-char)
           (:map minibuffer-local-map
                 ("C-r" . counsel-minibuffer-history))
           (:map org-mode-map
                 ("C-c C-j" . counsel-org-goto)
                 ("C-c M-t" . counsel-org-tag)
                 ("C-c f"   . counsel-org-file)))
    :init
    (counsel-mode +1)

    :config
    (setq-default counsel-git-grep-cmd counsel-git-grep-cmd-default)
    (setq counsel-mode-override-describe-bindings t)
    (when (featurep 'helpful)
      (setq counsel-describe-variable-function #'helpful-variable)
      (setq counsel-describe-function-function #'helpful-callable))
    :blackout t)

#+END_SRC

**** counsel Projectile

[[https://github.com/ericdanan/counsel-projectile][Counsel Projectile]] provides a project management interface via ivy and
friends.

#+NAME: counsel/projectile
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
    :after (:all projectile counsel)
    :demand t
    :init
    (counsel-projectile-mode t)
    ;; Use Dired
    (setcar counsel-projectile-switch-project-action 4))
#+END_SRC

**** counsel Gtags

#+NAME: counsel/ggtags
#+BEGIN_SRC emacs-lisp
(use-package counsel-gtags
  :custom
	(counsel-gtags-ignore-case t)
  (counsel-gtags-auto-update t)
  :hook
  (c-mode-common . counsel-gtags-mode))
#+END_SRC

**** counsel iTunes

#+NAME: counsel/itunes
#+BEGIN_SRC emacs-lisp
(use-package counsel-itunes
  :if (executable-find "osascript")
  :straight
  (counsel-itunes
   :host github
   :repo "jchaffin/counsel-itunes")
  :demand t
  :preface
  (set-fontset-font
   "fontset-default" '(#xE030 .  #xE060)
   "Material Icons" nil 'prepend)
  :after (:all counsel ivy))

#+END_SRC

**** counsel Spotify

#+NAME: counsel/spotify
#+BEGIN_SRC emacs-lisp
(use-package counsel-spotify
  :straight t)
#+END_SRC

**** counsel Dash

Counsel dash provides a simple wrapper around [[https://github.com/areina/helm-dash][helm-dash]] bindings to provide
ivy integration with dash docsets. This is not great, as installing
=helm-dash= requires installing =helm= itself.

See my [[#macos-dash][implementation]] if you are running macOS, have [[https://kapeli.com/dash][Dash]] installed on
your system, and would like to open docsets natively in the Dash
documentation browser.

#+NAME: counsel/dash
#+BEGIN_SRC emacs-lisp
  (use-package counsel-dash
    :after (:all counsel)
    :if (eq system-type 'darwin)
    :ensure-system-package
    ("/Applications/Dash.app" . "brew cask install dash"))

#+END_SRC

**** counsel Codesearch

#+NAME: counsel/codesearch
#+BEGIN_SRC emacs-lisp
(use-package counsel-codesearch
    :requires codesearch)
#+END_SRC

**** counsel Tramp

#+NAME: counsel/tramp
#+BEGIN_SRC emacs-lisp
(use-package counsel-tramp
  :after (counsel))
#+END_SRC

*** Swiper

#+NAME: mb-swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
    :custom
    (enable-recursive-minibuffers t)
    :bind
    ("\C-s" . swiper)
    :config
    (if (eq system-type 'darwin)
        (global-set-key (kbd "s-f") 'swiper)))
#+END_SRC

*** Omnibox

#+NAME: mb-omnibox
#+BEGIN_SRC emacs-lisp
;; Omnibox
(use-package omnibox
  :commands omnibox-M-x
  :bind (:map omnibox-mode-map
              ("M-x" . omnibox-M-x)))
#+END_SRC

** Completion
:PROPERTIES:
:ID:       2527EA69-7553-43C5-A1E6-5084BD977200
:END:
*** Abbrev

#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :straight nil
  :custom
  (abbrev-file-name (emacs-etc-dir "abbrev/defs.el")))
#+END_SRC

*** Prescient

Filter and sort completion candidates.

**** prescient.el

Package ~prescient~ is a library for intelligent sorting and
filtering in various contexts.

#+NAME: prescient/mode
#+BEGIN_SRC emacs-lisp
(use-package prescient
  :config
  ;; Remember usage statistics across Emacs sessions.
  (prescient-persist-mode +1))
#+END_SRC

**** company prescient

Package ~company-prescient~ provides intelligent sorting and
filtering for candidates in Company completions.

#+NAME: prescient/company
#+BEGIN_SRC emacs-lisp
(use-package company-prescient
  :after (:all prescient company)
  :demand t
  :config
  ;; Use `prescient' for Company menus.
  (company-prescient-mode +1))
#+END_SRC

**** ivy prescient

Package ~ivy-prescient~ provides intelligent sorting and filtering
for candidates in Ivy menus.

#+NAME: prescient/ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy-prescient
  :init
  ;; Use `prescient' for Ivy menus.
  (ivy-prescient-mode +1))

#+END_SRC

*** Company

Emacs has two popular packages for code completion --
[[https://github.com/auto-complete/auto-complete][autocomplete]] and [[https://github.com/company-mode/company-mode][company]]. This reddit [[https://www.reddit.com/r/emacs/comments/2ekw22/autocompletemode_vs_companymode_which_is_better/][thread]] was enough for
me to go with company.


If you need more convincing, [[https://github.com/company-mode/company-mode/issues/68][company-mode/company-mode#68]]
offers a comprehensive discussion on the two.

The ticket is from the ‘company-mode‘ repository, so there's
probably some bias there, but company-mode hasn't provided
any reason for me reconsider my choice.

#+NAME: company/mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :commands global-company-mode
  :custom
  (company-tooltip-align-annotations t)
  (company-show-numbers t)
  (company-idle-delay 0.2)
  :config
  (company-tng-configure-default)
  (setq company-frontends
        '(company-tng-frontend
          company-pseudo-tooltip-frontend
          company-echo-metadata-frontend))
  :hook
  (after-init . global-company-mode))
#+END_SRC

**** Company posframe

#+BEGIN_SRC emacs-lisp
(use-package company-posframe
  :after (:all company posframe)
  :demand t
  :init
  (company-posframe-mode 1))

#+END_SRC

**** Company Dict

#+NAME: completion/company-dict
#+BEGIN_SRC emacs-lisp
(use-package company-dict
  :after (company)
  :demand t
  :init
  (add-to-list 'company-backends 'company-dict)
  :config
  (setq company-dict-enable-fuzzy t
        company-dict-enable-yasnippet t))
#+END_SRC

**** Company Quick Help

[[https://github.com/expez/company-quickhelp][Company Quick Help]] emulates =autocomplete= documentation-on-idle behavior, but using the less-buggy =pos-tip= package rather than =popup-el=.

#+NAME: company/quickhelp
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :after (company)
  :commands (company-quickhelp-manual-begin)
  :bind
  (:map company-active-map
        ("C-c h" . company-quickhelp-manual-begin))
  :config
  (company-quickhelp-mode 1))
#+END_SRC

**** Company Box

#+NAME: company/box
#+BEGIN_SRC emacs-lisp
(use-package company-box
    :custom (company-box-enable-icon nil))
#+END_SRC

*** Autoinsert

#+BEGIN_SRC emacs-lisp
(use-package autoinsert
  :init
  (defun autoinsert-yas-expand()
    "Replace text in yasnippet template."
    (yas-expand-snippet (buffer-string) (point-min) (point-max)))
  (setq auto-insert-query nil)
  (auto-insert-mode 1)
  :config
  (define-auto-insert "\\.el$" [ "default-elisp.el" autoinsert-yas-expand ])
  :hook
  (find-file . auto-insert))

#+END_SRC

*** YASnippet

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system based off the TextMate snippet syntax.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
    :bind
    (:map goto-map
          ("s" . goto-snippet-dir))

    :preface
    (defvar snippet-directory (emacs-etc-dir "yasnippet" "snippets")
      "Directory for yasnippets.")
    (defun goto-snippet-dir ()
      "Goto `snippet-directory'."
      (interactive)
      (let ((default-directory snippet-directory))
        (dired default-directory)))

    :init
    (yas-global-mode 1)
    :config

    (when (featurep 'which-key)
      (which-key-add-key-based-replacements
        "C-c &" " YASnippet")))
#+END_SRC

**** Ivy YASnippet

#+BEGIN_SRC emacs-lisp
(use-package ivy-yasnippet)
#+END_SRC

#+NAME: snippets-autoyas
#+BEGIN_SRC emacs-lisp
(use-package auto-yasnippet)
#+END_SRC

**** Autoyas

#+NAME: snippets-autoyas
#+BEGIN_SRC emacs-lisp
(use-package auto-yasnippet)
#+END_SRC

*** header2

#+BEGIN_SRC emacs-lisp
(use-package header2)
#+END_SRC

*** Skeletor

#+NAME: skeletor-spec
#+BEGIN_SRC emacs-lisp
  (use-package skeletor
    :custom
    (skeletor-user-directory (emacs-etc-dir "skeletor/project-skeletons"))
    (skeletor-completing-read-function 'ivy-completing-read)
    (skeletor-python-bin-search-path
     '("/usr/local/bin" "/usr/bin"))
    (skeletor-project-directory (projects-dir))

    :init

    (defun skeletor-add-pyenv-pythons ()
      "Add python binaries managed by pyenv to
   `skeletor-python-bin-search-path'."
      (let* ((pyenv-dir (or (getenv "PYENV_ROOT")
                           (user-home ".pyenv")))
             (pyenv-version-dir
              (and pyenv-dir (resolve-path pyenv-dir "versions")))
             (pyenv-versions
              (directory-files-no-wildcards pyenv-version-dir t))
             (python-bins
              (mapcar
               (lambda (d)
                 (resolve-path d "bin"))
               pyenv-versions)))
        (dolist (python-bin python-bins)
          (add-to-list 'skeletor-python-bin-search-path
                       python-bin))))

    (when (executable-find "pyenv")
      (skeletor-add-pyenv-pythons))

    :config
    (add-to-list 'skeletor-global-substitutions
                 (cons "__TIME__"
                       (lambda () (format-time-string "%c"))))

    (skeletor-define-template "cmake-unix-makefiles"
      :requires-executables
      '(("cmake". "https://cmake.org")
        ("make" . "https://www.gnu.org/software/make"))

      :substitutions
      (list
       (cons "__DESCRIPTION__"
             (lambda ()
               (read-string "Description: ")))
       (cons "__TARGET_NAME__"
             (lambda ()
               (read-string "Target: ")))
       (cons "__PROJECT-VARS__" ".dir-locals"))

      :after-creation
      (lambda (dir)
        (skeletor-async-shell-command "mkdir build")
        (skeletor-async-shell-command
         (concat "("
                 " cd build &&"
                 " cmake -G 'Unix Makefiles'"
                 " -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .. "
                 ")"))
        (skeletor-async-shell-command
         "ln -s `pwd`/build/compile_commands.json .")
        (dired dir)
        (revert-buffer)))



    (defun skeletor/projectile-ignore ()
      (with-eval-after-load 'projectile
        (add-to-list
         'projectile-project-ignored-directories
         skeletor--directory)))

    :hook
    (project-mode . skeletor/projectile-ignore))

#+END_SRC

*** Expand Region

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  ("s-'" .  er/expand-region)
  ("s-S-'" . er/contract-region))
#+END_SRC

*** Code Library

#+BEGIN_SRC emacs-lisp
(use-package code-library
    :custom
    (code-library-directory (emacs-etc-dir "codelibrary"))
    (code-library-sync-to-gist t))
#+END_SRC

** Images
:PROPERTIES:
:ID:       36DECCD2-7A7F-4B6A-A3AA-88C6CC72CFBE
:END:

*** Artist Mode

Artist mode is a built-in Emacs package.

#+BEGIN_SRC emacs-lisp
(use-package artist-mode
  :straight nil
  :bind ((:map artist-mode-map
               ("C-c C-a p" . artist-select-op-pen-line))))
#+END_SRC

*** UML Diagrams
**** Ditaa

#+NAME: uml-ditaa
#+BEGIN_SRC emacs-lisp

(when (and (eq system-type 'darwin)
           (executable-find "brew")
           (executable-find "ditaa"))
  (let ((ditaa-path (replace-regexp-in-string
                     "\n"  ""
                     (shell-command-to-string
                      "realpath $(brew --prefix ditaa)/libexec/*.jar"))))
    (setq org-ditaa-jar-path ditaa-path)))

#+END_SRC

**** PlantUML

#+NAME: uml-plantuml
#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :if (executable-find "plantuml")
  :defines (org-plantuml-jar-path plantuml-jar-path)
  :init
  (defun dotemacs/plantuml-resolve-jar-path ()
      (when (executable-find "plantuml")
        (replace-regexp-in-string
         "\n" ""
         (shell-command-to-string
          "realpath $(brew --prefix plantuml)/libexec/plantuml.jar"))))
  (when (eq system-type 'darwin)
    (setq org-plantuml-jar-path (dotemacs/plantuml-resolve-jar-path))
    (setq plantuml-jar-path (dotemacs/plantuml-resolve-jar-path))))
#+END_SRC

*** Graphviz

#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode
  :if (executable-find "dot")
  :mode "\\.dot\\'"
  :defines graphiz-dot-program-set
  :bind ((:map graphviz-dot-mode-map
               ("M-s g" . graphviz-dot-program-set)))
  :config
  (defun graphviz-dot-program-set (&optional program)
    "Set the process for `graphviz-dot-dot-program' interactively."
    (interactive)
    (let ((dot-program (or program (completing-read "Process: " graphviz-dot-layout-programs))))
      (setq graphviz-dot-dot-program dot-program)))

  (defun dotemacs/graphviz-dot-mode-setup ()
    "Setup graphviz dot mode."
    (define-key graphviz-dot-mode-map "{" nil)
    (define-key graphviz-dot-mode-map "}" nil)
    (add-to-list 'org-babel-load-languages '(dot . t))
    (setq org-src-lang-modes
          (append '(("dot" . graphviz-dot))
                  (delete '("dot" . fundamental) org-src-lang-modes))))

  (with-eval-after-load 'graphviz-dot-mode
    (dotemacs/graphviz-dot-mode-setup)))

#+END_SRC

*** Thesaurus

This library needs to allow setting transfer protocol on the user
end. It's hardcoded to use port 80. HTTP doesn't really work on my
school's WLAN.

#+BEGIN_SRC emacs-lisp

(use-package thesaurus
  :config
  (progn
    ;; `thesaurus-bhl-api-key' is set in secrets
    (setq thesaurus-prompt-mechanism 'counsel-imenu
          url-proxy-services nil)))

#+END_SRC

*** Image+
:PROPERTIES:
:ID:       51961976-3E9D-4438-947A-912D21993F1D
:END:

[[https://github.com/mhayashi1120/Emacs-imagex][Image+]] provides extensions for image file manipulation in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package image+
    :if (display-graphic-p)
    :after (image)
    :config
    (eval-after-load 'image+
      `(when (require 'hydra nil t)
         (defhydra imagex-sticky-binding (global-map "C-x C-l")
           "Manipulating image"
           ("+" imagex-sticky-zoom-in "zoom in")
           ("-" imagex-sticky-zoom-out "zoom out")
           ("M" imagex-sticky-maximize "maximize")
           ("O" imagex-sticky-restore-original "restore orginal")
           ("S" imagex-sticky-save-image "save file")
           ("r" imagex-sticky-rotate-right "rotate right")
           ("l" imagex-sticky-rotate-left "rotate left")))))
#+END_SRC

* Org
:PROPERTIES:
:ID:       C2106106-C5F8-4B9B-815D-058678CB9242
:END:
** Org LaTeX
*** Latex
:PROPERTIES:
:ID:       C2BC6BE6-0295-4540-8E6F-9C8620FCBE0B
:CUSTOM_ID: sec:latex
:END:
**** Auctex

#+BEGIN_SRC emacs-lisp
(use-package auctex
  :bind (:map LaTeX-mode-map
              ("M-s l" . TeX-engine-set)))
#+END_SRC

***** company auctex
:PROPERTIES:
:ID:       EF3C7FFE-2A5E-4DF9-A2E6-FC0FBC9E8F9D
:END:

#+NAME: latex-company-auctex
#+BEGIN_SRC emacs-lisp
(use-package company-auctex
  :demand t
  :after (:all company tex)
  :init
  (company-auctex-init))
#+END_SRC

***** auctex latexmk
:PROPERTIES:
:ID:       68110AC8-A864-46E1-B4CC-C3297F78C7B4
:END:

#+NAME: latex-auctex-latexmk
#+BEGIN_SRC emacs-lisp
(use-package auctex-latexmk
  :after (tex)
  :custom
  (auctex-latexmk-inherit-TeX-PDF-mode t)
  :init
  (auctex-latexmk-setup))
#+END_SRC

**** Tex

#+NAME: latex-tex
#+BEGIN_SRC emacs-lisp
(use-package tex
  :straight auctex
  :custom
  ;; (TeX-command-default
  ;;  (if (executable-find "latexmk") "LatexMk" "LaTeX"))
  (TeX-error-overview-open-after-TeX-run t)
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-syntactic-comment t)
  ;; nonstopmode
  (TeX-interactive-mode nil)
  ;; Don't insert line-break at inline math
  (LaTeX-fill-break-at-separators nil)
  (LaTeX-item-indent nil)
  :init
  ;; https://emacs.stackexchange.com/a/19475
  (defun latex/pdfview ()
    "Use `pdf-view-mode' to open PDF files.
This requires the pdf-tools package to be installed."
    (when (file-exists-p (or pdf-info-epdfinfo-program ""))
      (add-to-list 'TeX-view-program-list '("PDF Tools" TeX-pdf-tools-sync-view))
      (setf (alist-get 'output-pdf TeX-view-program-selection) '("PDF Tools"))
      (setq TeX-source-correlate-start-server t)
      (add-hook 'TeX-after-compilation-finished-functions
                #'TeX-revert-document-buffer)))

  (defun latex/setup ()
    ;; Use the shell escape flag with `TeX-command'.
    (setq TeX-command-extra-options "-shell-escape")
    (when (fboundp 'flyspell-mode)
      (flyspell-mode +1))
    (when (fboundp 'doc-view-mode)
      (add-hook 'doc-view-mode 'auto-revert-mode))
    (when (fboundp 'display-line-numbers-mode)
      (display-line-numbers-mode +1))
    (when (fboundp 'ggtags-mode)
      (ggtags-mode +1))
    (when (fboundp 'typo-mode)
      (typo-mode -1))
    (when (fboundp 'smartparens-mode)
      (smartparens-mode +1)))

  :hook
  (LaTeX-mode . latex/pdfview)
  (LaTeX-mode . latex/setup)
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . TeX-fold-mode)
  (LaTeX-mode . TeX-source-correlate-mode)
  (LaTeX-mode . TeX-PDF-mode)

)

#+END_SRC

**** Math
:PROPERTIES:
:ID:       1DCF30B4-5549-4415-B588-FE9C5056F0A3
:END:

***** Company Math

#+NAME: latex-math-completion
#+BEGIN_SRC emacs-lisp
(use-package company-math
  :after (company)
  :demand t
  :init
  (add-to-list 'company-backends 'company-math-symbols-unicode))
#+END_SRC

***** Math Symbols

Entered on [2018-06-13 Wed 11:42]

#+NAME: latex-math-symbols
#+BEGIN_SRC emacs-lisp
  (use-package math-symbols
    :init

    (defun latex/font (math-input before after)
     "Insert a LaTeX font.

   MATH-INPUT is the input method to toggle in math environments.

   The BEFORE and AFTER arguments are the strings to insert around
   the marked region, when active. If the thing at point is a word,
   then wrap the word. Otherwise the two elements are joined at point."
     (cond ((texmathp)
            (if current-input-method
                (set-input-method nil)
              (set-input-method math-input)))
           ((region-active-p)
            (save-excursion
              (goto-char (region-beginning))
              (insert before)
              (goto-char (region-end))
              (insert after)))
           ((thing-at-point 'word)
            (save-excursion
              (goto-char (beginning-of-thing 'word))
              (insert before)
              (goto-char (end-of-thing 'word))
              (insert after)))
           (t
            (save-excursion
              (insert (concat before after)))
            (goto-char (+ (point) (length before))))))

    (defun latex/prettify-symbols-extra ()
      (if osx-browse-mode
          (osx-browse-mode nil))

      (when (fboundp 'prettify-symbols-mode)
        (prettify-symbols-mode 1))

      (setq prettify-symbols-alist
            '(("\\complement" . "∁"))))

    (setq-default abbrev-mode t)
    (setq latex-mode-abbrev-table nil)

    (define-abbrev-table 'latex-mode-abbrev-table
        '(("uiff"  "⟷")
          ("uif"  "⟶")
          ("uand" "∧")
          ("ulambda" "𝜆")
          ("uor" "∨")
          ("uxor" "⨁")
          ("uexists" "∃")
          ("unexists" "∄")
          ("usubset" "⊂")
          ("unsubset" "⊄")))

    (defun latex/unbind-osx-browse ()
      (when (fboundp 'osx-browse-mode)
        (let ((map osx-browse-mode-map))
          (define-key map (kbd "s-b") nil)
          (define-key map (kbd "s-i") nil))))

    (defun latex/font-italic ()
      "Insert a literal italic typeset command, or toggle input method
  in math environments with unicode math enabled."
      (interactive)
      (latex/font "math-symbols-italic" "\\textit{" "}"))

    (defun latex/font-bold ()
      "Insert a literal bold typeset command, or toggle input method
  in math environments with unicode math enabled."
      (interactive)
      (latex/font "math-symbols-bold" "\\textbf{" "}")
      (let ((map LaTeX-mode-map))
        (define-key map (kbd "s-b") 'latex/font-bold)
        (define-key map (kbd "s-i") 'latex/font-italic)))

    :hook
    (LaTeX-mode . latex/unbind-osx-browse)
    (LaTeX-mode . latex/prettify-symbols-extra))

#+END_SRC

***** Unicode math input

#+BEGIN_SRC emacs-lisp
(use-package unicode-math-input)
#+END_SRC

**** Extra

#+BEGIN_SRC emacs-lisp
(use-package latex-extra
  :custom
  (latex/no-fill-environments
   '("align" "align*" "forest" "forest*"
     "equation" "equation*" "exe"
     "tabular" "tikzpicture"))

    :bind (:map LaTeX-mode-map
                ("C-c C-a" . latex/compile-commands-until-done)
                ("C-c C-n" . latex/next-section)
                ("C-c C-u" . latex/up-section)
                ("C-c C-f" . latex/next-section-same-level)
                ("C-M-f"   . latex/forward-environment)
                ("C-M-b"   . latex/backward-environment)
                ("C-M-a"   . latex/beginning-of-environment)
                ("C-c C-p" . latex/previous-section)
                ("C-c C-b" . latex/previous-section-same-level)
                ("C-c C-q" . latex/clean-fill-indent-environment))

    :init
    (defun latex/extra ()
      (latex-extra-mode +1))

    :hook
    (LaTeX-mode . latex/extra))

#+END_SRC

**** Reftex


RefTeX is a citation and reference tool maintained by the
AucTeX team.

Since Emacs 24.3, its built in with the Emacs distribution.

#+NAME: latex-reftex
#+BEGIN_SRC emacs-lisp
(use-package reftex
    :straight nil
    :init
    (defun reftex/setup ()
      (turn-on-reftex)
      (setq reftex-plug-into-AUCTeX
            '(nil nil t t t)
            reftex-use-fonts t
            reftex-default-bibliography
            `(,(org-dir "ref/references.bib"))))
    :hook
    (LaTeX-mode . reftex/setup))
#+END_SRC

***** Company Reftex
:PROPERTIES:
:ID:       7E380FB6-09B2-4E73-87D1-5515402B58D1
:END:

#+NAME: latex-company-reftex
#+BEGIN_SRC emacs-lisp
(use-package company-reftex
  :demand t
  :after (:all company reftex))
#+END_SRC

**** Magic Latex Buffer

Prettify dedicated org-mode latex buffers.

#+NAME: latex-magic-latex-buffer
#+BEGIN_SRC emacs-lisp
  (use-package magic-latex-buffer
      :custom
      (magic-latex-enable-block-highlight t)
      (magic-latex-enable-suscript nil)
      (magic-latex-enable-pretty-symbols t)
      (magic-latex-enable-block-align nil)
      (magic-latex-enable-inline-image nil)
      :hook
      (LaTeX-mode . magic-latex-buffer))
#+END_SRC

**** Texinfo

#+NAME: latex-texinfo
#+BEGIN_SRC emacs-lisp
(use-package texinfo
  :defines texinfo-section-list
  :commands texinfo-mode
  :mode
  ("\\.texi\\'" . texinfo-mode))
#+END_SRC

*** Preview
**** LaTeX Preview Pane

Not tangling right now because it's creating a new buffer after every
save.

#+NAME: latex-latex-preview-pane
#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
    :after (:all pdf-tools tex)
    :init (latex-preview-pane-enable))
#+END_SRC

**** Use single directory for storing latex fragments

#+NAME: org-preview-directory
#+BEGIN_SRC emacs-lisp
(let ((ltximg (file-truename '"~/.tmp/ltximg/")))
  (when (file-directory-p ltximg)
    (setq org-preview-latex-image-directory ltximg)))
#+END_SRC

**** Clear Cache

#+NAME: org-preview-clear-cache
#+BEGIN_SRC emacs-lisp
(defun org-preview-clear-cache ()
  (interactive)
  (let ((preview-cache
         (f-join default-directory org-preview-latex-image-directory)))
    (if (f-directory? preview-cache)
        (f-delete preview-cache t)
      (message "%s" "Directory 'ltximg' does not exist."))))
#+END_SRC

**** Set the default preview process

#+NAME: org-preview-default
#+BEGIN_SRC emacs-lisp
(if (image-type-available-p 'imagemagick)
    (setq org-preview-latex-default-process 'imagemagick)
  (setq org-preview-latex-default-process 'dvisvgm))
#+END_SRC

**** Format Options

#+NAME: org-preview-format
#+BEGIN_SRC emacs-lisp
 (when (boundp 'org-format-latex-options)
  (plist-put org-format-latex-options :scale 1.2))
#+END_SRC

**** Parsing keywords

#+NAME: org-preview-parsing
#+BEGIN_SRC emacs-lisp
(defun org-preview/process-keyword  (p)
  (interactive)
  (org-element-map (org-element-parse-buffer) 'keyword
    (lambda (k)
      (if (string= p (org-element-property :key k))
          (intern (org-element-property :value k))))
    nil t))

(defun org-preview/process-compiler ()
  (or (org-preview/process-keyword "LATEX_COMPILER")
     org-latex-compiler))

(defun org-preview/set-process ()
  (or (org-preview/process-keyword "PREVIEW")
     org-preview-latex-default-process))

(defun org-preview/process-class ()
  (or (org-preview/process-keyword "LATEX_CLASS")
     org-latex-default-class))

(defun org-preview/uclasem-p ()
  (let ((latex-class (org-preview/process-class)))
    (string= "uclasem" latex-class)))

(defun org-preview/uclacs-p ()
  (let ((latex-class (org-preview/process-class)))
    (string= "uclacs" latex-class)))

#+END_SRC

**** XeLaTeX

#+NAME: org-preview-xelatex
#+BEGIN_SRC emacs-lisp
(defcustom xelatex-preview-header org-format-latex-header
  "The preamble to use for previewing LaTeX fragments with XeLaTeX."
  :type 'string)

(defcustom xelatex-preview-process-alist
  '((dvipng
     :programs
     ("xelatex" "dvipng")
     :description "dvi > png"
     :message "You need to install the programs: xelatex and dvipng"
     :image-input-type "dvi"
     :image-output-type "png"
     :image-size-adjust (1.3 1.3)
     :latex-compiler
     ("xelatex -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
    (dvisvgm
     :programs
     ("latex" "dvisvgm")
     :description "dvi > svg"
     :message "you need to install the programs: xelatex and dvisvgm."
     :use-xcolor t
     :image-input-type "xdv"
     :image-output-type "svg"
     :image-size-adjust
     (1.7 . 1.5)
     :latex-compiler
     ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("dvisvgm %f -n -b min -c %S -o %O"))
    (imagemagick
     :programs ("xelatex" "convert")
     :description "pdf > png"
     :message "You need to install xelatex and imagemagick"
     :use-xcolor t
     :image-input-type "pdf"
     :image-output-type "png"
     :image-size-adjust (1.0 1.0)
     :latex-compiler ("xelatex -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("convert -density %D -trim -antialias %f -quality 100 %O")))
  "Preview engines for xelatex."
  :type '(alist
          :tag "LaTeX to image backends"
          :value-type (plist)))

(defun org-preview-xelatex ()
  (interactive)
  (let ((preview-file
         (emacs-etc-dir "preview/uclasem-preview.tex")))
    (set (make-local-variable 'org-preview-latex-process-alist)
         xelatex-preview-process-alist)

    (when (assoc 'latex org-babel-load-languages)
      (set (make-local-variable 'org-edit-latex-frag-master)
           preview-file))

    (set (make-local-variable 'org-format-latex-header)
         (if (org-preview/uclasem-p)
             (read-file-contents preview-file)
           xelatex-preview-header)))
  )
#+END_SRC

**** LuaLaTeX

#+NAME: org-preview-lualatex
#+BEGIN_SRC emacs-lisp
(defcustom lualatex-preview-header nil
  "The preamble to use for previewing LaTeX fragments with LuLaTeX."
  :type 'string)

(defcustom lualatex-preview-process-alist
  '((dvipng
     :programs
     ("lualatex" "dvipng")
     :description "dvi > png"
     :message "You need to install the programs: lualatex and dvipng"
     :image-input-type "dvi"
     :image-output-type "png"
     :image-size-adjust (1.3 1.3)
     :latex-compiler
     ("lualatex -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
    (dvisvgm
     :programs
     ("latex" "dvisvgm")
     :description "dvi > svg"
     :message "you need to install the programs: lualatex and dvisvgm."
     :use-xcolor t
     :image-input-type "xdv"
     :image-output-type "svg"
     :image-size-adjust
     (1.7 . 1.5)
     :latex-compiler
     ("lualatex -no-pdf -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("dvisvgm %f -n -b min -c %S -o %O"))
    (imagemagick
     :programs ("lualatex" "convert")
     :description "pdf > png"
     :message "You need to install lualatex and imagemagick"
     :use-xcolor t
     :image-input-type "pdf"
     :image-output-type "png"
     :image-size-adjust (1.0 1.0)
     :latex-compiler ("lualatex -interaction nonstopmode -output-directory %o %f")
     :image-converter
     ("convert -density %D -trim -antialias %f -quality 100 %O")))
  "Preview engines for lualatex."
  :type '(alist
          :tag "LaTeX to image backends"
		      :value-type (plist)))


(defun org-preview-lualatex ()
  (interactive)
  (let ((preview-file (emacs-etc-dir "preview/uclacs-preview.tex")))
    (set (make-local-variable 'org-preview-latex-process-alist)
         lualatex-preview-process-alist)

    (when (assoc 'latex org-babel-load-languages)
      (set (make-local-variable 'org-edit-latex-frag-master)
           preview-file))

    (set (make-local-variable 'org-format-latex-header)
         (if (org-preview/uclacs-p)
             (concat lualatex-preview-header
                     (read-file-contents preview-file))
           lualatex-preview-header))))
#+END_SRC

***** Scrolling
:PROPERTIES:
:ID:       57C52822-10CA-4C35-AB6F-4E6C62F4B53D
:END:
****** Scroll to first error on compilation

#+NAME: scroll/compile-error
#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output 'first-error)
#+END_SRC

****** Smooth Scrolling

#+NAME: scroll/smooth
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :init
  (smooth-scrolling-mode 1)
  :config
  (setq scroll-step 1
        scroll-margin 10
        next-line-add-newlines nil
        scroll-preserve-screen-position 1)

  (setq mouse-wheel-follow-mouse 't)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))))
#+END_SRC

****** Sublimity Scroll

#+NAME: scroll/subliminity
#+BEGIN_SRC emacs-lisp
  (use-package sublimity
      :init
    (require 'sublimity-scroll))
#+END_SRC

**** Dynamic latex previews

Generate latex fragments based on the latex compiler and class in the current buffer.

#+NAME: org-preview-dynamic
#+BEGIN_SRC emacs-lisp
(defun org-preview-with-compiler ()
  (interactive)
  (let ((latex-compiler (org-preview/process-compiler)))
    (when-let (preview-process (org-preview/set-process))
      (set (make-local-variable 'org-preview-latex-default-process)
           preview-process))

    (when (or (string= latex-compiler "xelatex")
             (string= latex-compiler "xetex"))
      (org-preview-xelatex))

    (when (string= latex-compiler "lualatex")
      (org-preview-lualatex))))

(add-hook 'org-mode-hook 'org-preview-with-compiler)
#+END_SRC

*** cdlatex

#+NAME: latex-cdlatex
#+BEGIN_SRC emacs-lisp
(use-package cdlatex
  :custom
  ;; Disable auto label insertion in expanded template.
  ;; Labels conflict when used in conjunction with `org-ref'
  (cdlatex-insert-auto-labels-in-env-templates t)
  :hook
  ;; with AucTeX LaTeX mode
  ;; (LaTeX-mode . turn-on-cdlatex)
  ;; with Emacs latex mode
  ;; (latex-mode . turn-on-cdlatex)
  (org-mode . org-cdlatex-mode))
#+END_SRC

*** Edit Latex

#+NAME: org-latex-edit-latex
#+BEGIN_SRC emacs-lisp
(use-package org-edit-latex)
#+END_SRC

*** BibTeX

#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :straight nil
  :custom
  (bibtex-BibTeX-entry-alist
   '(("Article" "Article in Journal"
      (("author")
       ("title" "Title of the article (BibTeX converts it to lowercase)"))
      (("journal")
       ("year"))
      (("volume" "Volume of the journal")
       ("number" "Number of the journal (only allowed if entry contains volume)")
       ("pages" "Pages in the journal")
       ("month")
       ("note")))
     ("InProceedings" "Article in Conference Proceedings"
      (("author")
       ("title" "Title of the article in proceedings (BibTeX converts it to lowercase)"))
      (("booktitle" "Name of the conference proceedings")
       ("year"))
      (("editor")
       ("volume" "Volume of the conference proceedings in the series")
       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
       ("series" "Series in which the conference proceedings appeared")
       ("pages" "Pages in the conference proceedings")
       ("month")
       ("address")
       ("organization" "Sponsoring organization of the conference")
       ("publisher" "Publishing company, its location")
       ("note")))
     ("Conference" "Article in Conference Proceedings"
      (("author")
       ("title" "Title of the article in proceedings (BibTeX converts it to lowercase)"))
      (("booktitle" "Name of the conference proceedings")
       ("year"))
      (("editor")
       ("volume" "Volume of the conference proceedings in the series")
       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
       ("series" "Series in which the conference proceedings appeared")
       ("pages" "Pages in the conference proceedings")
       ("month")
       ("address")
       ("organization" "Sponsoring organization of the conference")
       ("publisher" "Publishing company, its location")
       ("note")))
     ("InCollection" "Article in a Collection"
      (("author")
       ("title" "Title of the article in book (BibTeX converts it to lowercase)")
       ("booktitle" "Name of the book"))
      (("publisher")
       ("year"))
      (("editor")
       ("volume" "Volume of the book in the series")
       ("number" "Number of the book in a small series (overwritten by volume)")
       ("series" "Series in which the book appeared")
       ("type" "Word to use instead of \"chapter\"")
       ("chapter" "Chapter in the book")
       ("pages" "Pages in the book")
       ("edition" "Edition of the book as a capitalized English word")
       ("month")
       ("address")
       ("note")))
     ("InBook" "Chapter or Pages in a Book"
      (("author" nil nil 0)
       ("editor" nil nil 0)
       ("title" "Title of the book")
       ("chapter" "Chapter in the book"))
      (("publisher")
       ("year"))
      (("volume" "Volume of the book in the series")
       ("number" "Number of the book in a small series (overwritten by volume)")
       ("series" "Series in which the book appeared")
       ("type" "Word to use instead of \"chapter\"")
       ("address")
       ("edition" "Edition of the book as a capitalized English word")
       ("month")
       ("pages" "Pages in the book")
       ("note")))
     ("Proceedings" "Conference Proceedings"
      (("title" "Title of the conference proceedings")
       ("year"))
      nil
      (("booktitle" "Title of the proceedings for cross references")
       ("editor")
       ("volume" "Volume of the conference proceedings in the series")
       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
       ("series" "Series in which the conference proceedings appeared")
       ("address")
       ("month")
       ("organization" "Sponsoring organization of the conference")
       ("publisher" "Publishing company, its location")
       ("note")))
     ("Book" "Book"
      (("author" nil nil 0)
       ("editor" nil nil 0)
       ("title" "Title of the book"))
      (("publisher")
       ("year"))
      (("volume" "Volume of the book in the series")
       ("number" "Number of the book in a small series (overwritten by volume)")
       ("series" "Series in which the book appeared")
       ("address")
       ("edition" "Edition of the book as a capitalized English word")
       ("month")
       ("note")))
     ("Booklet" "Booklet (Bound, but no Publisher)"
      (("title" "Title of the booklet (BibTeX converts it to lowercase)"))
      nil
      (("author")
       ("howpublished" "The way in which the booklet was published")
       ("address")
       ("month")
       ("year")
       ("note")))
     ("PhdThesis" "PhD. Thesis"
      (("author")
       ("title" "Title of the PhD. thesis")
       ("school" "School where the PhD. thesis was written")
       ("year"))
      nil
      (("type" "Type of the PhD. thesis")
       ("address" "Address of the school (if not part of field \"school\") or country")
       ("month")
       ("note")))
     ("MastersThesis" "Master's Thesis"
      (("author")
       ("title" "Title of the master's thesis (BibTeX converts it to lowercase)")
       ("school" "School where the master's thesis was written")
       ("year"))
      nil
      (("type" "Type of the master's thesis (if other than \"Master's thesis\")")
       ("address" "Address of the school (if not part of field \"school\") or country")
       ("month")
       ("note")))
     ("TechReport" "Technical Report"
      (("author")
       ("title" "Title of the technical report (BibTeX converts it to lowercase)")
       ("institution" "Sponsoring institution of the report")
       ("year"))
      nil
      (("type" "Type of the report (if other than \"technical report\")")
       ("number" "Number of the technical report")
       ("address")
       ("month")
       ("note")))
     ("Manual" "Technical Manual"
      (("title" "Title of the manual"))
      nil
      (("author")
       ("organization" "Publishing organization of the manual")
       ("address")
       ("edition" "Edition of the manual as a capitalized English word")
       ("month")
       ("year")
       ("note")))
     ("Unpublished" "Unpublished"
      (("author")
       ("title" "Title of the unpublished work (BibTeX converts it to lowercase)")
       ("note"))
      nil
      (("month")
       ("year")))
     ("Misc" "Miscellaneous" nil nil
      (("author")
       ("title" "Title of the work (BibTeX converts it to lowercase)")
       ("howpublished" "The way in which the work was published")
       ("month")
       ("year")
       ("note")))
     ("Online" "Online Resource"
      (("author" nil nil 0)
       ("editor" nil nil 0)
       ("title" nil nil nil)
       ("year" nil nil 1)
       ("date" nil nil 1)
       ("url" nil nil nil))
      nil
      (("subtitle" nil nil)
       ("titleaddon" nil nil)
       ("language" nil nil)
       ("howpublished" nil nil)
       ("type" nil nil)
       ("version" nil nil)
       ("note" nil nil)
       ("organization" nil nil)
       ("location" nil nil)
       ("date" nil nil)
       ("month" nil nil)
       ("year" nil nil)
       ("addendum" nil nil)
       ("pubstate" nil nil)
       ("doi" nil nil)
       ("eprint" nil nil)
       ("eprintclass" nil nil)
       ("eprinttype" nil nil)
       ("url" nil nil)
       ("urldate" nil nil)))))
  :config
  (defun bibtex-create-entries-buffer ()
  "Create a buffer listing the available bibtex
entry types and required fields."
  (interactive)
  (let ((buf (get-buffer-create "*BibTeX Entries*")))
    (with-current-buffer buf
      (org-mode)
      (insert "#+TITLE: BibTeX specification\n")
      (insert "* Entries\n")
      (loop for (type doc required crossref optional) in bibtex-BibTeX-entry-alist
            do
            (insert (format "\n** %s (%s)\n" type doc))
            (insert "\n*** Required fields\n\n")
            (loop for field in required
	                do
	                (insert (format "- %s" (car field)))
	                (message "%s" field)
	                (if (>= (length field) 2)
		                  (insert (format " :: %s\n" (nth 1 field)))
	                  (insert "\n")))
            (insert "\n*** Optional if Crossref present but otherwise required fields\n\n")
            (loop for field in crossref
	                do
	                (insert (format "- %s" (car field)))
	                (if (>= (length field) 2)
		                  (insert (format " :: %s\n" (nth 1 field)))
	                  (insert "\n")))
            (insert "\n*** Optional fields\n\n")
            (loop for field in optional
	                do
	                (insert (format "- %s" (car field)))
	                (if (>= (length field) 2)
		                  (insert (format " :: %s\n" (nth 1 field)))
	                  (insert "\n")))))
    (switch-to-buffer-other-window buf))))

#+END_SRC

*** Org Ref
:PROPERTIES:
:ID:       1038C1B0-F5E1-4246-A360-B29BFBA82AC2
:CUSTOM_ID: org-ref
:END:

#+BEGIN_SRC emacs-lisp

(use-package org-ref
  :after ivy
  :demand t
  :bind*
  (:map org-mode-map
        :prefix-map org-ref-prefix-map
        :prefix-docstring "Org ref citation manager."
        :prefix "C-c r"
        ("b" . org-ref-insert-bibliography-link)
        ("c" . org-ref-insert-cite-link)
        ("f" . org-ref-list-of-figures)
        ("g" . org-ref-insert-glossary-link)
        ("l" . org-ref-insert-label-link)
        ("r" . org-ref-insert-ref-link)
        ("s" .  org-ref-insert-bibliographystyle-link))
  :custom
  (org-ref-completion-library 'org-ref-ivy-cite)
  (org-ref-default-bibliography (list (org-dir "ref/references.org")))
  (org-ref-bibliography-notes (org-dir "ref/notes.org"))
  (org-ref-notes-directory (org-dir "ref/notes/"))
  (org-ref-pdf-directory (dropbox-dir "pdfs/" :slash t))
  (org-ref-show-citation-on-enter t)
  (org-ref-show-broken-links t)
  (org-ref-bibtex-hydra-key-binding "\C-cj")

  :init
  ;; https://github.com/jkitchin/org-ref/issues/428
  (progn
    (require 'doi-utils)
    (require 'org-ref-url-utils)
    (require 'org-id)
    (require 'org-ref-latex)
    (require 'org-ref-bibtex)
    (require 'org-ref-pdf)
    (require 'org-ref-scopus)
    (require 'org-ref-isbn)
    (require 'org-ref-pubmed)
    (require 'org-ref-arxiv)
    (require 'org-ref-sci-id)
    (require 'org-ref-wos)
    (require 'org-ref-worldcat)
    (require 'x2bib))

  :config

  (which-key-add-major-mode-key-based-replacements 'org-mode
    "C-c r" "Org Ref"
    "C-c r c" "Cite"
    "C-c r b" "Bibliography"
    "C-c r g" "Glossary"
    "C-c r f" "List of figures"
    "C-c r l"  "Labels"
    "C-c r r" "References"
    "C-c r s" "Bibliography style")

  (require 'org-ref-core)

  ;; vref ref type

  (defun org-ref-vref-complete-link (&optional arg)
    "Completion function for ref links.
Optional argument ARG Does nothing."
    (let ((label) (line))
      (setq label (completing-read "label:  " (org-ref-get-labels)))
      (setq line (completing-read "line label:  " (org-ref-get-labels)))
      (format "algref:%s,%s" label line)))


  (defun org-ref-vref-export (keyword desc format)
    "An export function for vref links."
    (cond
     ((eq format 'html)
      (format "<a href=\"#%s\">%s</a>" keyword (or desc keyword)))
     ((eq format 'latex) (format "\\vref{%s}" keyword))))

  (org-ref-link-set-parameters "vref"
    :follow #'org-ref-ref-follow
    :export #'org-ref-vref-export
    :complete #'org-ref-complete-link
    :face 'org-ref-ref-face-fn
    :help-echo #'org-ref-ref-help-echo)


  (setq org-ref-ref-types '("ref" "eqref" "pageref" "nameref"
                            "autoref" "cref" "Cref" "vref" "algref"))

  ;; Org Ref PDF

  (defun org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
           (key (car results))
           (pdf-file (funcall org-ref-get-pdf-filename-function key)))
      (if (file-exists-p pdf-file)
          (find-file pdf-file)
        (message "No PDF found for %s" key))))

  (setq org-ref-open-pdf-function 'org-ref-open-pdf-at-point)


  (defun goto-org-ref-manual (&optional path)
    (interactive)
    (unless path
      (setq path (emacs-dir "straight" "repos" "org-ref" "org-ref.org")))
    (find-file path)))
#+END_SRC

*** VIewing PDFs
**** PDF Tools

[[https://github.com/politza/pdf-tools][PDF Tools]] adds several features and enhancements for interacting with
PDF documents in Emacs. It serves as a replacement for DocView mode.

Credits to Dr. Ben Maughan over at Pragmatic Emacs for this
[[http://pragmaticemacs.com/category/emacs/][blogpost]] demonstrating how to get the most out of this package.

#+NAME: pdf/tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :mode (("\\.pdf\\'" . pdf-view-mode))
  :bind (:map pdf-view-mode-map
              ("C-s" . isearch-forward)
              ("h"   . pdf-annot-add-highlight-markup-annotation)
              ("t"   . pdf-annot-add-text-annotation)
              ("D"   . pdf-annot-delete))
  :init
  (pdf-tools-install)
  :config
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t
        pdf-view-resize-factor 1))
#+END_SRC

**** Org PDF View

Now we can open pdf files with =org-pdfview= [fn:12]:

#+NAME: pdf/org
#+BEGIN_SRC emacs-lisp
(use-package org-pdfview
  :after (:all pdf-tools)
  :demand t
  :config
  (progn
    (add-hook 'org-mode-hook
              (lambda ()
                (add-to-list 'org-file-apps
                             '("\\.pdf\\'" .
                               (lambda (file link)
                                 (org-pdfview-open link))))))))
#+END_SRC

** Org Structure
*** Outlines
**** Navi

#+BEGIN_SRC emacs-lisp
(use-package navi)
#+END_SRC

**** Outshine

#+BEGIN_SRC emacs-lisp
(use-package outshine
  :init
  (setq outshine-minor-mode-prefix "\M-#")
  (bind-keys* :map org-mode-map ("C-c M-o" . org-store-link))
  :hook ((outline-minor-mode . outshine-mode)))
#+END_SRC

**** Outorg


#+BEGIN_SRC emacs-lisp
(use-package outorg
  :after (:all outshine))
#+END_SRC

**** foldout.el
:PROPERTIES:
:ID:       7A037F3A-7569-44C4-858A-B298381AC21D
:END:

~foldout.el~, which is part of Emacs, is a nice little companion for
~outline-mode~.  With ~foldout.el~ one can narrow to a subtree and
later unnarrow.  ~foldout.el~ is useful for Org mode out of the box.

There is one annoyance though (at least for me):
~foldout-zoom-subtree~ opens the drawers.

This can be fixed e.g. by using the following slightly modified
version of ~foldout-zoom-subtree~ which uses function ~org-show-entry~
instead of ~outline-show-entry~.

#+BEGIN_SRC emacs-lisp
  (defun foldout-zoom-org-subtree (&optional exposure)
    "Same as `foldout-zoom-subtree' with often nicer zoom in Org mode."
    (interactive "P")
    (cl-letf
        (((symbol-function #'outline-show-entry) (lambda () (org-show-entry))))
      (foldout-zoom-subtree exposure)))
#+END_SRC

*** Org Outline Numbering

#+NAME: org-ui-outline-numbering
#+BEGIN_SRC emacs-lisp
  (use-package org-outline-numbering
    :custom-face
    (org-outline-numbering-face
     ((t (:family "Sans" :weight book :inherit (default)))))
    :init
    (defun org/outline-numbering ()
      (org-outline-numbering-mode 1)))

#+END_SRC

****

*** Org radiobutton
:PROPERTIES:
:ID:       EA7D1F8C-6A3E-4154-B1ED-581F8B5446C3
:END:

The [[https://github.com/Fuco1/org-radiobutton][org-radiobutton]] package a minor mode which automates the property
requirements for radiobutton lists.

See this [[https://fuco1.github.io/2018-03-11-Use-org-radiobutton-to-select-an-option-from-a-list.html][blogpost]] for more information.

#+NAME: org-ui-radiobutton
#+BEGIN_SRC emacs-lisp
(use-package org-radiobutton
  :init
  (when (fboundp 'global-org-radiobutton-mode)
    (global-org-radiobutton-mode)))
#+END_SRC

*** Org Links :structure:
**** Add Tags Link

#+NAME: org-links-tags
#+BEGIN_SRC emacs-lisp
(defun dotemacs/tag-link (tag)
  "Display a list of TODO headlines with tag TAG.
With prefix argument, also display headlines without a TODO keyword."
  (org-tags-view (null current-prefix-arg) tag))

(org-add-link-type
 "tag" 'dotemacs/tag-link)
#+END_SRC

**** Org Elisp Help Links

#+NAME: org-links-elisp-help
#+BEGIN_SRC emacs-lisp
(use-package org-elisp-help
  :straight t)
#+END_SRC

**** Org YouTube

From [[http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html][Endless Parentheses]] blogpost:

Embed YouTube Links in iframe.

#+NAME: org-links-youtube
#+BEGIN_SRC emacs-lisp
(org-link-set-parameters
 "youtube"
 :follow (lambda (path)
	   (browse-url (format "https://youtu.be/%s" path)))
 :export (lambda (path desc backend)
	   (cond
	    ((eq 'md backend)
	     (format "[%s](%s)

<a href=\"https://www.youtube.com/watch?v=%s\">
<img src=\"http://img.youtube.com/vi/%s/0.jpg\"></a>"
		     (or desc (format "https://youtu.be/%s" path))
		     (format "https://youtu.be/%s" path)
		     path path))))
 :help-echo "A youtube video. Click to open in browser.")

#+END_SRC

**** Org Link Minor Mode

#+NAME: org-links-minor
#+BEGIN_SRC emacs-lisp
(use-package org-link-minor-mode
  :hook (prog-mode . org-link-minor-mode))
#+END_SRC

**** Org Latex Links

#+NAME: org-links-latex
#+BEGIN_SRC emacs-lisp
;; From https://orgmode.org/worg/org-tutorials/org-latex-export.html
(org-add-link-type
 "latex" nil
 (lambda (path desc format)
   (cond
    ((eq format 'html)
     (format "<span class=\"%s\">%s</span>" path desc))
    ((eq format 'latex)
     (format "\\%s{%s}" path desc)))))

;; See https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg00982.html
(setq org-latex-link-with-unknown-path-format "\\textsc{%s}")
#+END_SRC

**** Devonthink links

#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-devonthink
  :straight nil
  :load-path "etc/local/org-devonthink")

#+END_SRC


**** Org Bookmark Heading

:PROPERTIES:
:ID:       B7904803-C4A6-439D-BD21-E449CF0B79F5
:END:

#+NAME: org-links-bookmark
#+BEGIN_SRC emacs-lisp
(use-package org-bookmark-heading
  :init
  (require 'org-bookmark-heading))
#+END_SRC

**** Check for possibly problematic old link escapes
:PROPERTIES:
:ID:       628ECB9A-4F8A-453E-8521-318C008FD287
:END:

#+BEGIN_SRC emacs-lisp
  (defun org-check-percent-escapes ()
    "*Check buffer for possibly problematic old link escapes."
    (interactive)
    (when (eq major-mode 'org-mode)
      (let ((old-escapes '("%20" "%5B" "%5D" "%E0" "%E2" "%E7" "%E8" "%E9"
                           "%EA" "%EE" "%F4" "%F9" "%FB" "%3B" "%3D" "%2B")))
        (unless (boundp 'warning-suppress-types)
          (setq warning-suppress-types nil))
        (widen)
        (show-all)
        (goto-char (point-min))
        (while (re-search-forward org-any-link-re nil t)
          (let ((end (match-end 0)))
            (goto-char (match-beginning 0))
            (while (re-search-forward "%[0-9a-zA-Z]\\{2\\}" end t)
              (let ((escape (match-string-no-properties 0)))
                (unless (member (upcase escape) old-escapes)
                  (warn "Found unknown percent escape sequence %s at buffer %s, position %d"
                        escape
                        (buffer-name)
                        (- (point) 3)))))
            (goto-char end))))))
#+END_SRC

**** Hyperlink extraction
:PROPERTIES:
:ID:       D2FDF2BE-E489-4D6E-8955-F61B7E4AA487
:END:

#+NAME: org-hacks-extract-hyperlink
#+BEGIN_SRC emacs-lisp

  (defun org-extract-link ()
    "Extract the link location at point and put it on the killring."
    (interactive)
    (when (org-in-regexp org-bracket-link-regexp 1)
      (kill-new (org-link-unescape (org-match-string-no-properties 1)))))


(defun browse-url-extract-org-link (orig-fun &rest args)
  "If `thing-at-point' is a org-link, then call `org-extract-link'
  and apply ORIG-FUN with the extracted url in the car of original ARGS."
  (when (and (eq major-mode 'org-mode)
               (string= (car (org-thing-at-point)) "link"))
    (setcar args (org-extract-link)))
  (apply orig-fun args))

(advice-add 'osx-browse-url :around #'browse-url-extract-org-link)
#+END_SRC

*** Org ID :structure:

#+BEGIN_SRC emacs-lisp
(use-package org-id
  :straight org-plus-contrib
  :custom
  (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  :init/el-patch
  ;; Custom id utilities
  ;; See [[https://writequit.org/articles/emacs-org-mode-generate-ids.html][Emacs Org Mode Generate Ids]]
  (with-eval-after-load 'org-id
    (el-patch-feature org-id)
    (el-patch-defun org-id-new (&optional prefix)
      "Create a new globally unique ID.

An ID consists of two parts separated by a colon:
- a prefix
- a unique part that will be created according to `org-id-method'.

PREFIX can specify the prefix, the default is given by the variable
`org-id-prefix'.  However, if PREFIX is the symbol `none', don't use any
prefix even if `org-id-prefix' specifies one.

So a typical ID could look like \"Org:4nd91V40HI\"."
      (let* ((prefix (if (eq prefix 'none)
		                     ""
		                   (concat (or prefix org-id-prefix) (el-patch-swap ":" "-"))))
	           unique)
        (if (equal prefix (el-patch-swap ":" "-")) (setq prefix ""))
        (cond
          ((memq org-id-method '(uuidgen uuid))
           (setq unique (org-trim (shell-command-to-string org-id-uuid-program)))
           (unless (org-uuidgen-p unique)
	           (setq unique (org-id-uuid))))
          ((eq org-id-method 'org)
           (let* ((etime (org-reverse-string (org-id-time-to-b36)))
	                (postfix (if org-id-include-domain
			                         (progn
			                           (require 'message)
			                           (concat "@" (message-make-fqdn))))))
	           (setq unique (concat etime postfix))))
          (t (error "Invalid `org-id-method'")))
        (concat prefix unique))))
  :init
  (defun org-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
    If POM is nil, refer to the entry at point. If the entry does
    not have an CUSTOM_ID, the function returns nil. However, when
    CREATE is non nil, create a CUSTOM_ID if none is present
    already. PREFIX will be passed through to `org-id-new'. In any
    case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
          ((and id (stringp id) (string-match "\\S-" id))
           id)
          (create
           (setq id (org-id-new (concat prefix "h")))
           (org-entry-put pom "CUSTOM_ID" id)
           (org-id-add-location id (buffer-file-name
                                    (buffer-base-buffer id))))))))

  (defun org-add-ids-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the current
    file which do not already have one. Only adds ids if the
    `auto-id' option is set to `t' in the file somewhere. ie,
    ,#+OPTIONS: auto-id:t"
    (interactive)
    (save-excursion
      (widen)
      (goto-char (point-min))
      (when (re-search-forward "^#\\+OPTIONS:.*auto-id:t" (point-max) t)
        (org-map-entries (lambda () (org-custom-id-get (point) 'create))))))

  (defun org-add-custom-ids-before-save ()
    "Automatically adds custom ids to headlines in file before save."
    (add-hook 'before-save-hook
              (lambda ()
                (when (and (eq major-mode 'org-mode)
                         (eq buffer-read-only nil))
                  (org-add-ids-to-headlines-in-file)))))

  (defun org-capture-add-custom-id ()
    "Add a CUSTOM_ID property to headlines created by `org-capture'."
    (org-custom-id-get (point) 'create))

  :hook
  (org-mode . org-add-ids-to-headlines-in-file))

#+END_SRC

** Org Coding
*** Org Babel
:PROPERTIES:
:ID:       8209391F-1D45-46CC-8184-78F393D467CA
:END:
**** Ob Http

#+NAME: org-ob-http
#+BEGIN_SRC emacs-lisp
(use-package ob-http
  :after (ob)
  :demand t)
#+END_SRC

**** Ob ClojureScript

[[https://github.com/emacsmirror/ob-clojurescript][ob-clojurescript]] uses [[https://github.com/anmonteiro/lumo][lumo]] to evaluate ClojureScript code blocks in
=org-mode= buffers.

#+NAME: org-ob-cljs
#+BEGIN_SRC emacs-lisp
(use-package ob-clojurescript
  :if (executable-find "lumo")
  :after (ob)
  :demand t)
#+END_SRC

**** Ob async

#+BEGIN_SRC emacs-lisp
(use-package ob-async)
#+END_SRC

**** Ob Babel

#+BEGIN_SRC emacs-lisp
(use-package org-babel-eval-in-repl
  :after (eval-in-repl)
  :bind
  (:map org-mode-map
        ("C-<return>" . ober-eval-in-repl)
        ("C-c C-c" . ober-eval-block-in-repl)))



#+END_SRC

**** ob browser

#+BEGIN_SRC emacs-lisp
(use-package ob-browser
  :ensure-system-package (ob-browser . "yarn add phantomjs"))
#+END_SRC

**** Ob Diagrams

#+BEGIN_SRC emacs-lisp
(use-package ob-diagrams)
#+END_SRC

**** Load Languages

#+NAME: org-ob-load-langs
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (clojure . t)
     (clojurescript . t)
     (dot . t)
     (ditaa . t)
     (latex . t)
     (lisp . t)
     (emacs-lisp . t)
     (http . t)
     (perl . t)
     (python . t)
     (plantuml . t)
     (java . t)
     (ruby . t)
     (R . t)
     (shell . t)
     (org . t)))
#+END_SRC

**** Lentic
#+BEGIN_SRC emacs-lisp
(use-package lentic)
#+END_SRC

*** Org2elcomment

#+BEGIN_SRC emacs-lisp
(use-package org2elcomment)
#+END_SRC

** Org Tasks
*** Drill

#+BEGIN_SRC emacs-lisp
(use-package org-drill
  :straight org-plus-contrib
  :init
  (require 'org-drill))
#+END_SRC
*** Attach

#+NAME: org-docmgr-attach
#+BEGIN_SRC emacs-lisp
  (use-package org-attach
    :straight org-plus-contrib
    :custom
    (org-attach-auto-tag "attach"))
#+END_SRC

*** Capture :tasks:

#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :straight org-plus-contrib
  :demand t
  :custom
  (org-default-notes-file
   (expand-file-name "notes.org" org-directory))
  :init
  (require 'org-capture)
  (setq-default org-capture-templates
                `(("l" "Protocol Link" entry
                   (file+headline ,org-default-notes-file "Inbox")
                   "* [[%:link][%:description]] \n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?\n\nCaptured: %U"))))
#+END_SRC


**** Capture popup frame

#+BEGIN_SRC emacs-lisp
(use-package org-capture-pop-frame)
#+END_SRC

**** Org Category Capture

#+BEGIN_SRC emacs-lisp
(use-package org-category-capture)
#+END_SRC

**** Alfred capture
:PROPERTIES:
:ID:       A54EEE41-A32C-468D-A736-9CF314311FF6
:END:

#+BEGIN_SRC emacs-lisp
(use-package alfred-org-capture
    :straight (alfred-org-capture
               :type git
               :host github
               :repo "jjasghar/alfred-org-capture"
               :files ("el/alfred-org-capture.el")))

#+END_SRC

*** Habit

#+BEGIN_SRC emacs-lisp
  (use-package org-habit
    :straight org-plus-contrib
    :init
    (require 'org-habit))
#+END_SRC

*** Agenda


I use per-project agenda files for the most part (now being managed
using [[#org-projectile][org-projectile]]), but I like having a designated global one for miscellaneous or arbitrary tasks.


#+NAME: agenda/org-agenda
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :straight org-plus-contrib
    :custom
    (org-tags-column 0)
    (diary-file (expand-file-name "diary.org" org-directory))
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-deadline-prewarning-if-scheduled t)
    (org-agenda-time-leading-zero t)
    ;; http://cachestocaches.com/2016/9/my-workflow-org-agenda/
    (org-refile-targets (quote ((nil  :maxlevel . 9)
                                (org-agenda-files :maxlevel . 9))))

    :init

    (defun goto-agenda-dir ()
      (interactive)
      (dired (agenda-dir)))


    (define-key goto-map "a" #'goto-agenda-dir)

    (setq org-agenda-category-icon-alist
     `(("global"     ,(list "")  nil nil :ascent center)
       ("Quarter"    ,(list "")   nil nil :ascent center)
       ("LING 165C"  ,(list "𝜆")  nil nil :ascent center)
       ("LING 102"   ,(list "ə")  nil nil :ascent center)
       ("COMSCI 161" ,(list "𝛺") nil nil :ascent center)
       ("COMSCI 131" ,(list "") nil nil :ascent center)))

    (defvar-local org-use-level-faces nil)
    (defvar org-level-remap-face nil)

    (defun halidom/remap-org-level-faces ()
      "Use minimal foreground face in `org-agenda-files' buffers."

      (let ((foreground (face-foreground 'default nil 'default)))
        (unless org-use-level-faces
          (mapcar
           (lambda (face)
             (add-to-list 'org-level-remap-face
                          (face-remap-add-relative
                           face
                           :foreground foreground)))
           org-level-faces)
          (setq-local org-use-level-faces t))))

    (defun halidom/org-agenda-file-face ()
      (cond ((org-agenda-file-p) (halidom/remap-org-level-faces))
            (org-use-level-faces
             (mapcar
              (lambda (f)
                (setq face-remapping-alist
                      (delq f face-remapping-alist)))
              org-level-remap-face))))


    (defvar halidom/default-agenda-file
      (file-truename  "Dropbox/org/todos/TODOs.org")
      "The file path of the default agenda file.")

    (when (file-exists-p halidom/default-agenda-file)
      (add-to-list 'org-agenda-files halidom/default-agenda-file))

    :hook
    (org-mode . halidom/org-agenda-file-face))


#+END_SRC

**** Super agenda

#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda)
#+END_SRC

**** Agenda ng

#+NAME: agenda/ng
#+BEGIN_SRC emacs-lisp
(use-package org-agenda-ng
  :straight (org-agenda-ng :host github
                           :repo "alphapapa/org-agenda-ng"
                           :files ("org-agenda-ng.el")))

#+END_SRC

**** Org ql

#+BEGIN_SRC emacs-lisp
(use-package org-ql
    :straight
    (org-ql
      :type git
      :host github
      :repo "alphapapa/org-agenda-ng"
      :files ("org-ql.el")))
#+END_SRC

***** QL Agenda

#+BEGIN_SRC emacs-lisp
(use-package org-ql-agenda
    :straight
    (org-ql-agenda
      :type git
      :host github
      :repo "alphapapa/org-agenda-ng"
      :files ("org-ql-agenda.el")))
#+END_SRC

**** Org Sidebar

#+NAME: agenda/sidebar
#+BEGIN_SRC emacs-lisp
(use-package org-sidebar
  :straight
  (org-sidebar
   :host github
   :repo "alphapapa/org-sidebar")

  :init
  (require 'org-ql)
  (require 'dash-functional)
  (require 'org-sidebar)

  :config
  (cl-defmacro course-sidebar (name description)
    `(progn
       (org-sidebar-defsidebar
         ,(intern (concat name "/sidebar"))
         :header ,description
         :sidebars (((and (not (done))
                          (todo)
                          (or (deadline <=)
                              (scheduled <=))
                          (not (tags "optional")))))
         :super-groups ',(append
                          '((:name " Overdue" :scheduled past :deadline past)
                            (:name " Today" :scheduled today :deadline today)
                            (:name " Homework" :tag "homework")))
         :files ,(expand-file-name
                  "TODOs.org"
                  (concat "~/Dropbox/courses/" name "/")))
       (defun ,(intern (concat name "-sidebar")) ()
         (interactive)
         (funcall ',(intern (concat name "/sidebar"))))))

  (defvar org-course-courses
    '(("comsci161" . "Intro to A.I.")
      ("comsci131" . "Programming Languages")
      ("ling165c"  . "Semantics II")
      ("ling102"   . "Phonetics")))

    (cl-loop for (course . description) in org-course-courses do
           (eval `(course-sidebar ,course ,description))))
#+END_SRC

**** Org Timeline

#+NAME: emacs-lisp
#+BEGIN_SRC emacs-lisp
(use-package org-timeline
  :init
  (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append))
#+END_SRC

**** Org Projectile
:PROPERTIES:
:ID:       D469E868-7FCB-45FD-AB3E-609018F4BC58
:CUSTOM_ID: org-projectile
:END:

#+NAME: org-taskmgr-projectile
#+BEGIN_SRC emacs-lisp
  (use-package org-projectile
    :commands (org-projectile-files-to-agenda org-projectile-per-project-function)
    :after (:all projectile org-agenda)
    :bind (:map projectile-command-map
                ("n" . org-projectile-project-todo-completing-read))
    :custom
    (org-todo-keywords
          '((sequence "TODO(t)" "|" "DONE(d)")
            (sequence "|" "CANCELLED(c)")))
    (org-todo-keyword-faces
     '(("CANCELLED" . (:foreground "yellow"))))

    (org-projectile-per-project-filepath #'org-project-per-project-function)

    :init
    (defun org-projectile-per-project-function (project-path)
      (let  ((project-agenda-file
              (--> project-path (split-string it "/" t) nreverse car (concat it ".org"))))
        (if (file-exists-p
             ;; org file matches project root name
             (expand-file-name project-agenda-file project-path)) project-agenda-file "TODOs.org")))

    (defvar-local org-default-agenda-file
      (file-truename "~/Dropbox/org/todos/TODOS.org"))

    :init
    (defun org-projectile-files-to-agenda ()
      "Add projectile project files to agenda."
      (interactive)
      (cl-flet*
          ((project-agenda-filepath (p)
                                    (expand-file-name
                                     (funcall #'org-projectile-per-project-function p) p))
           (todo-file-p (p)
                        (file-exists-p (project-agenda-filepath p)))
           (build-agenda (ps)
                         (setq org-agenda-files
                               (seq-uniq (append org-agenda-files ps)))))

          (->> projectile-known-projects
             (seq-filter #'todo-file-p)
             (mapcar #'project-agenda-filepath)
             build-agenda)))
    :hook
    ((org-agenda-mode dashboard-mode) . org-projectile-files-to-agenda)
    :config
    (org-projectile-per-project))

#+END_SRC


*** Calendar
**** Google Calendar


The [[https://github.com/myuhe/org-gcal.el][org-gcal]] package provides org-mode integration with Google
Calendar.

#+NAME: org-taskmgr-gcal
#+BEGIN_SRC emacs-lisp
(use-package org-gcal
  :preface
  (defvar gcal-agenda-file (org-dir "agenda/schedule.org"))
  :init
  (require 'secrets)
  (require 'org-gcal)
  :custom
  (org-gcal-file-alist
   `(("jchaffin@g.ucla.edu" . ,gcal-agenda-file)))
  :config
  (require 'org-agenda)
  (unless (member gcal-agenda-file org-agenda-files)
    (add-to-list 'org-agenda-files gcal-agenda-file)))
#+END_SRC

**** Google maps

#+NAME: org-taskmgr-maps
#+BEGIN_SRC emacs-lisp
(use-package google-maps)
#+END_SRC

**** calfw

#+NAME: org-taskmgr-calfw
#+BEGIN_SRC emacs-lisp
(use-package calfw
  :custom
  (cfw:org-capture-template
   '("c" "calfw2org" entry (file "agenda/schedule.org")  "* %?n %(cfw:org-capture-day)"))
  (cfw:render-line-breaker 'cfw:render-line-breaker-wordwrap)
  (cfw:display-calendar-holidays nil)
  (cfw:fchar-junction ?╋)
  (cfw:fchar-vertical-line ?┃)
  (cfw:fchar-horizontal-line ?━)
  (cfw:fchar-left-junction ?┣)
  (cfw:fchar-right-junction ?┫)
  (cfw:fchar-top-junction ?┯)
  (cfw:fchar-top-left-corner ?┏)
  (cfw:fchar-top-right-corner ?┓)

  :hook
  (cfw:details-mode . org-link-minor-mode))

(use-package calfw-org
  :demand t
  :custom
  (cfw:org-capture-template
   '("c" "calfw2org" entry
     (file "agenda/schedule.org")
     "*  %?\n %(cfw:org-capture-day)"))
  :init
  (require 'calfw)
  (defun cfw:open-calendar ()
   (interactive)
   (let ((cp
          (cfw:create-calendar-component-buffer
           :view 'month
           :contents-sources
           (list
            (cfw:org-create-file-source
             "semantics" "~/Dropbox/courses/ling165c/TODOS.org" "#91E5DD")
            (cfw:org-create-file-source
             "phonetics" "~/Dropbox/courses/ling102/TODOs.org" "purple")
            (cfw:org-create-file-source
             "COMSCI 131" "~/Dropbox/courses/comsci131/comsci131.org" "tomato1")
            (cfw:org-create-file-source
             "COMSCI 161" "~/Dropbox/courses/comsci131/comsci161.org" "grey")
            (cfw:org-create-file-source
             "Class Schedule" "~/Dropbox/org/agenda/schedule.org" "tomato1")))))

     (switch-to-buffer (cfw:cp-get-buffer cp))))
)
#+END_SRC

**** Manipulate hours/minutes/seconds in table formulas
:PROPERTIES:
:ID:       6C19B664-DF90-4312-A985-20885879D722
:END:

#+BEGIN_SRC emacs-lisp
(defun org-time-string-to-seconds (s)
  "Convert a string HH:MM:SS to a number of seconds."
  (cond
   ((and (stringp s)
         (string-match "\\([0-9]+\\):\\([0-9]+\\):\\([0-9]+\\)" s))
    (let ((hour (string-to-number (match-string 1 s)))
          (min (string-to-number (match-string 2 s)))
          (sec (string-to-number (match-string 3 s))))
      (+ (* hour 3600) (* min 60) sec)))
   ((and (stringp s)
         (string-match "\\([0-9]+\\):\\([0-9]+\\)" s))
    (let ((min (string-to-number (match-string 1 s)))
          (sec (string-to-number (match-string 2 s))))
      (+ (* min 60) sec)))
   ((stringp s) (string-to-number s))
   (t s)))
(defun org-time-seconds-to-string (secs)
  "Convert a number of seconds to a time string."
  (cond ((>= secs 3600) (format-seconds "%h:%.2m:%.2s" secs))
        ((>= secs 60) (format-seconds "%m:%.2s" secs))
        (t (format-seconds "%s" secs))))

(defmacro with-time (time-output-p &rest exprs)
  "Evaluate an org-table formula, converting all fields that look
like time data to integer seconds.  If TIME-OUTPUT-P then return
the result as a time value."
  (list
   (if time-output-p 'org-time-seconds-to-string 'identity)
   (cons 'progn
         (mapcar
          (lambda (expr)
            `,(cons (car expr)
                    (mapcar
                     (lambda (el)
                       (if (listp el)
                           (list 'with-time nil el)
                         (org-time-string-to-seconds el)))
                     (cdr expr))))
          `,@exprs))))

#+END_SRC

*** Clock
**** Pomodoro
:PROPERTIES:
:ID:       3600535E-2C20-4E33-8572-E933319E87B3
:CUSTOM_ID: org-pomodoro
:END:

#+NAME: org-taskmgr-pomodoro
#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
  :bind (:map org-mode-map
              ("C-c M-RET p" . org-pomodoro))
  :config
  (progn
    (defalias #'org-pomodoro-path
      (apply-partially #'emacs-etc-dir "org/pomodoro"))

    (setq org-pomodoro-audio-player "/usr/bin/afplay"
          org-pomodoro-tick-sound
          (org-pomodoro-path "clock-ticking-2.wav")
          ;; Start Settings
          org-pomodoro-start-sound-p t ;; enable starting sound
          org-pomodoro-start-sound-args "--volume 0.08"
          org-pomodoro-start-sound
          (org-pomodoro-path "Victory.wav")
        ;; Finished Settings
          org-pomodoro-finished-sound-args "--volume 0.2"
          org-pomodoro-finished-sound
          (org-pomodoro-path "Waves.wav")
          ;; Short Break Settings
          org-pomodoro-short-break-length 5
          org-pomodoro-short-break-sound-args "--volume 0.2"
          org-pomodoro-short-break-sound org-pomodoro-finished-sound
          ;; Long Break Settings
          org-pomodoro-long-break-length 15
          org-pomodoro-long-break-sound-args "--volume 0.2"
          org-pomodoro-long-break-sound
          (org-pomodoro-path "Complete.wav"))))
#+END_SRC

**** counsel org clock

#+NAME: org-taskmgr-coclock
#+BEGIN_SRC emacs-lisp
(use-package counsel-org-clock
  :straight (:host github
                   :repo "akirak/counsel-org-clock")
  :after (:all org-agenda ivy))
#+END_SRC

**** org mru clock

The [[https://github.com/unhammer/org-mru-clock][org-mru-clock]] package prefills clock history with clocks from
org agenda files.

#+NAME: org-taskmgr-mru-clock
#+BEGIN_SRC emacs-lisp
(use-package org-mru-clock
  :after (:all org-agenda ivy)
  :demand t
  :bind (("C-c C-x i" . org-mru-clock-in)
         ("C-c C-x C-j" . org-mru-clock-select-recent-task))
  :init
  (progn
    (setq org-mru-clock-how-many 50
          org-mru-completing-read #'ivy-completing-read)))
#+END_SRC

Check out this [[http://mbork.pl/2018-04-28_org-mru-clock][article]] for how these two packages compare.[fn:11].

**** Org clock convenience

#+BEGIN_SRC emacs-lisp
(use-package org-clock-convenience)
#+END_SRC

*** Org Brain

#+NAME: org-ideamgr-brain
#+BEGIN_SRC emacs-lisp
(use-package org-brain
  :if (eq system-type 'darwin)
  :defines (org-brain-path)
  :init
  (setq org-brain-path (concat (file-name-as-directory org-directory) "brain"))
  :config
  (progn
    (setq org-id-track-globally t
          org-brain-visualize-default-choices 'all
          org-brain-title-max-length 12)
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?" :empty-lines 1)
          org-capture-templates)))
#+END_SRC

** Org Appearance

These settings subjectively improve the overall viewable-ness of
org-mode buffers.


*** Per-image display width

Specify image width in org buffer on per-image basis.

#+NAME: org-ui-fixedwidth-image
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

*** Org Visual

#+BEGIN_SRC emacs-lisp
(defun org/visual ()
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(add-hook 'org-mode-hook #'org/visual)
#+END_SRC

*** Org Bullets

Inspired by this [[http://nadeausoftware.com/articles/2007/11/latency_friendly_customized_bullets_using_unicode_characters][article]] on creating latency-friendly unicode bullets,
the [[https://github.com/sabof/org-bullets][org-bullets]] library provides support for displaying org-mode
bullets as UTF-8 characters.

- The default set ::  ◉ ○ ✸ ✿
- Smaller set :: ► • ★ ▸
- Alternative options :: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶


The default set of bullet points can be modified via the
=[[help:org-bullets-bullet-list][org-bullets-bullet-list]]= variable.


#+NAME: org-ui-org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
    :demand t
    :custom
    (org-bullets-bullet-list '("‣" "•"))
    :init
    (defun org-bullets/enable ()
      (org-bullets-mode +1))

    :hook
    (org-mode . org-bullets/enable))
#+END_SRC

*** Org Fancy Priorities

#+BEGIN_SRC emacs-lisp
(use-package org-fancy-priorities
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("" "⬆" "⬇" "")))
#+END_SRC

*** Org Pretty Table

#+NAME: org-ui-table
#+BEGIN_SRC emacs-lisp
(use-package org-pretty-table
  :straight (org-pretty-table
             :host github
             :type git
             :repo "Fuco1/org-pretty-table"))
#+END_SRC

*** TOC Org

The [[https://github.com/snosov1/toc-org][toc-org]] package automatically generates a table of contents for
the org-mode document on save.

The org header represented by a TOC entry can be visited via the
=org-open-at-point= command, which is bound to the keystroke =C-c C-o=
by default.

Note that this functionality is provided by =toc-org= modifying the
value of =org-link-translation-function= to the library internal
=toc-org-unhrefify=, so it won't work if this symbol is non-nil at
time of install.

#+NAME: org-ui-toc-org
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :init
  (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

*** Column View

#+NAME: org-ui-column-view
#+BEGIN_SRC emacs-lisp
(setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
#+END_SRC

*** Equation Renumbering

Anotha [[http://kitchingroup.cheme.cmu.edu/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode/][one]] from the kitchin group!

#+NAME: org-ui-equation-renumbering
#+BEGIN_SRC emacs-lisp
(defun org-renumber-environment (orig-func &rest args)
  (let ((results '())
        (counter -1)
        (numberp))

    (setq results
          (loop for (begin .  env) in
               (org-element-map (org-element-parse-buffer) 'latex-environment
                 (lambda (env)
                   (cons
                    (org-element-property :begin env)
                    (org-element-property :value env))))
             collect
               (cond
                 ((and (string-match "\\\\begin{equation}" env)
                     (not (string-match "\\\\tag{" env)))
                  (incf counter)
                  (cons begin counter))
                 ((string-match "\\\\begin{align}" env)
                  (prog2
                      (incf counter)
                      (cons begin counter)
                    (with-temp-buffer
                      (insert env)
                      (goto-char (point-min))
                              ;; \\ is used for a new line. Each one leads to a number
                      (incf counter (count-matches "\\\\$"))
                      ;; unless there are nonumbers.
                      (goto-char (point-min))
                      (decf counter (count-matches
                                     "\\nonumber")))))
                         (t
                          (cons begin nil)))))

    (when (setq numberp (cdr (assoc (point) results)))
      (setf (car args)
            (concat
             (format "\\setcounter{equation}{%s}\n" numberp)
             (car args)))))

  (apply orig-func args))

;; (advice-add 'org-create-formula-image
;;           :around #'org-renumber-environment)

#+END_SRC

*** Highlight inline LaTeX fragments
:PROPERTIES:
:ID:       8E0531C6-0E85-4F0A-9340-2868F54F3A6D
:END:

#+NAME: org-latex-highlight-tex
#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex))
#+END_SRC

**  Org Prose

*** Insert literal entities

From this StackExchange [[https://emacs.stackexchange.com/a/16746][post]]:

#+NAME: org-ui-literal
#+BEGIN_SRC emacs-lisp
(defun modi/org-entity-get-name (char)
  "Return the entity name for CHAR. For example, return \"ast\" for *."
  (let ((ll (append org-entities-user
                    org-entities))
        e name utf8)
    (catch 'break
      (while ll
        (setq e (pop ll))
        (when (not (stringp e))
          (setq utf8 (nth 6 e))
          (when (string= char utf8)
            (setq name (car e))
            (throw 'break name)))))))

(defun modi/org-insert-org-entity-maybe (&rest args)
  "When the universal prefix C-u is used before entering any character,
    insert the character's `org-entity' name if available.

    If C-u prefix is not used and if `org-entity' name is not available, the
    returned value `entity-name' will be nil."
  ;; It would be fine to use just (this-command-keys) instead of
  ;; (substring (this-command-keys) -1) below in emacs 25+.
  ;; But if the user pressed "C-u *", then
  ;;  - in emacs 24.5, (this-command-keys) would return "^U*", and
  ;;  - in emacs 25.x, (this-command-keys) would return "*".
  ;; But in both versions, (substring (this-command-keys) -1) will return
  ;; "*", which is what we want.
  ;; http://thread.gmane.org/gmane.emacs.orgmode/106974/focus=106996
  (let ((pressed-key (substring (this-command-keys) -1))
        entity-name)
    (when (and (listp args) (eq 4 (car args)))
      (setq entity-name (modi/org-entity-get-name pressed-key))
      (when entity-name
        (setq entity-name (concat "\\" entity-name "{}"))
        (insert entity-name)
        (message (concat "Inserted `org-entity' "
                         (propertize entity-name
                                     'face 'font-lock-function-name-face)
                         " for the symbol "
                         (propertize pressed-key
                                     'face 'font-lock-function-name-face)
                         "."))))
    entity-name))

;; Run `org-self-insert-command' only if `modi/org-insert-org-entity-maybe'
;; returns nil.
(advice-add 'org-self-insert-command :before-until #'modi/org-insert-org-entity-maybe)

#+END_SRC

*** Org Index :notetaking:

#+NAME: org-docmgr-index
#+BEGIN_SRC emacs-lisp
(use-package org-index)
#+END_SRC

*** Org Interleave :notetaking:

#+NAME: org-docmgr-interleave
#+BEGIN_SRC emacs-lisp
(use-package org-noter)
#+END_SRC

*** Org Journal :notetaking:

#+NAME: org-docmgr-journal
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :custom
    (org-journal-enable-agenda-integration t)
    (org-journal-dir (org-dir "journal"))
    (org-journal-date-prefix "#+TITLE: ")
    (org-journal-date-format "%A, %B %d %Y")
    (org-journal-time-prefix "* ")
    (org-journal-time-format "")

    :config
    (with-eval-after-load 'org-capture
      (push '("j" "Journal" entry
              (file+olp+datetree "~/Dropbox/org/journal.org")
            "* %?\nEntered on %U\n %i\n %a")
            org-capture-templates)))

#+END_SRC

** Org Export
:PROPERTIES:
:ID:       46A0BACE-34F1-4547-8EC4-367FD085E1B5
:CUSTOM_ID: sec:ox
:END:

*** Ox Extra

Ignores headlines tagged =:ignore:=. Unlike =:noexport:=, the contents
and subtrees of the ignored headlines will be retained.

#+NAME: ox/extra
#+BEGIN_SRC emacs-lisp
(use-package ox-extra
  :straight org-plus-contrib
  :demand t
  :config
  (ox-extras-activate
   '(ignore-headlines
     org-export-filter-parse-tree-functions)))
#+END_SRC

*** Ox Publish

#+NAME: ox/publish
#+BEGIN_SRC emacs-lisp
(use-package ox-publish
  :straight org-plus-contrib
  :after (ox)
  :demand t)
#+END_SRC

*** Ox Org

#+NAME: ox/org
#+BEGIN_SRC emacs-lisp
(defun org-to-org-handle-includes ()
  "Copy the contents of the current buffer to OUTFILE,
recursively processing #+INCLUDEs."
  (let* ((s (buffer-string))
     (fname (buffer-file-name))
     (ofname (format "%s.I.org" (file-name-sans-extension fname))))
    (setq result
      (with-temp-buffer
        (insert s)
        (org-export-handle-include-files-recurse)
        (buffer-string)))
    (find-file ofname)
    (delete-region (point-min) (point-max))
    (insert result)
    (save-buffer)))
#+END_SRC

*** Ox Latex
:PROPERTIES:
:CUSTOM_ID: sec:ox-latex
:END:

#+NAME: ox/latex
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
;; Prefer user labels

;; Subfigure

;; PDF Process Interface

;; Hyperref Template

;; Custom classes

#+END_SRC

**** Prefer user provided labeling

#+NAME: oxl/labels
#+BEGIN_SRC emacs-lisp
(setq org-latex-prefer-user-labels t)
#+END_SRC

**** Subfigure Export

#+NAME: oxl/subfigure
#+BEGIN_SRC emacs-lisp
(use-package ox-latex-subfigure
  :straight
  (ox-latex-subfigure
   :type git
   :host github
   :repo "linktohack/ox-latex-subfigure")
  :config
  (require 'ox-latex-subfigure)
  (add-to-list 'org-latex-packages-alist (("" "subcaption" nil))))

#+END_SRC

**** Minted

Allow toggling of minted inclusion in exported header. This might be necessary when using a custom latex class or loading minted manually.

#+NAME: oxl/minted
#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (defvar enable-default-minted nil))

(setq org-latex-listings 'minted)

(setq org-latex-packages-alist '(("" "booktabs" nil)))
(setq org-latex-tables-booktabs t)

(setq org-latex-minted-options
      '(("mathescape" "true")
        ("linenos" "true")
        ("breaklines" "true")
        ("numbersep" "5pt")
        ("frame" "lines")
        ("framesep" "2mm")))

(defun latex-toggle-default-minted ()
  (interactive)
  (if (not enable-default-minted)
      (progn
        (setq org-latex-packages-alist
              (append org-latex-packages-alist '(("newfloat" "minted"))))
        (setq enable-default-minted t)
        (message "%s" "Exporting with default minted."))
    (progn
      (setq enable-default-minted nil)
      (dolist (elt org-latex-packages-alist)
        (if (string= (cadr elt) "minted")
            (setq org-latex-packages-alist (remove elt org-latex-packages-alist))))
      (message "%s" "Disabled default minted."))))


#+END_SRC

**** Set latex pdf process

[[https://ctan.org/pkg/latexmk?lang=en][Latexmk]] automates the proces of building LaTeX documents to pdf.

It can be done through the =org-mode= latex export dispatcher in a single command:

#+NAME: oxl/pdf
#+BEGIN_SRC emacs-lisp
(setq latex-process-latex
  '("%latex -interaction nonstopmode -output-directory %o %f"
    "%latex -interaction nonstopmode -output-directory %o %f"
    "%latex -interaction nonstopmode -output-directory %o %f"))

(setq latex-process-pdflatex
  '("latexmk -pdflatex='pdflatex -interaction=nonstopmode -shell-escape' -synctex=1 -pdf -bibtex -f %f"))

(setq latex-process-xelatex
  '("latexmk -pdf -synctex=1 -shell-escape -xelatex -f %f"))

(setq latex-process-lualatex
  '("latexmk -pdf -synctex=1 -shell-escape -lualatex -f %f"))

(defcustom dotemacs-latex-pdf-engines
  '(("latex" . latex-process-latex)
    ("lualatex" . latex-process-lualatex)
    ("xelatex" . latex-process-xelatex)
    ("pdflatex" . latex-process-pdflatex))
  "A list of LaTeX commands available to run when
`org-latex-export-to-pdf' is invoked."
  :type '(cons string symbol))

(setq org-latex-pdf-process latex-process-xelatex)

(defvar org-latex-pdf-process-set-hook nil)

(defun org-latex-pdf-process-set (&optional process)
  (interactive)
  (let* ((process (or
                   process
                   (assoc (completing-read "Process: " dotemacs-latex-pdf-engines nil nil)
                          dotemacs-latex-pdf-engines)))
         (cmd-string (cdr process)))
    (setq org-latex-pdf-process (symbol-value cmd-string))
    (setq org-latex-compiler (car process))
    (run-hooks 'org-latex-pdf-process-set-hook)))


(add-hook 'org-mode-hook
          (lambda () (local-set-key (kbd "M-s l") 'org-latex-pdf-process-set)))


#+END_SRC

**** Hyperref Template

The default cross-referencing and hyperlink styles provided by
=hyperref= are awful. This makes them less awful.

#+NAME: oxl/hyperref
#+BEGIN_SRC emacs-lisp
;; TODO: Dynamically set to a sensible default if using 'article class
;; or a class in `org-latex-classes' that includes hyperref.
(setq org-latex-hyperref-template nil)
#+END_SRC

**** Export classes

#+NAME: oxl/classes
#+BEGIN_SRC emacs-lisp
;; Org Ling

;; UCLA CS

;; Humanities

;; Article No Default Packages

;; Unicode math

#+END_SRC

***** Article Standalone

From John Kitchen's [[https://github.com/jkitchin/scimax][scimax]] project, a starter for scientists and engineers.

#+NAME: ox-class/article-standalone
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
	     '("article-standalone"
	       "\\documentclass{article}
          [NO-DEFAULT-PACKAGES]
          [PACKAGES]
          [EXTRA]" ;; header-string
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*a{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** Uclasem

#+NAME: ox-class/uclasem
#+BEGIN_SRC emacs-lisp
(if (and (executable-find "kpsewhich")
         (shell-command-to-string "kpsewhich uclasem.cls"))

    (add-to-list 'org-latex-classes
                 '("uclasem"
                   "\\documentclass{uclasem}
                    [NO-DEFAULT-PACKAGES]
                    [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

***** UCLA CS

#+NAME: ox-class/uclacs
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("uclacs"
               "\\documentclass{uclacs}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** Humanities

My custom mla-style LaTeX class.

#+NAME: ox-class/humanities
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("humanities"
               "\\documentclass{humanities}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** Unicode Math

#+NAME: ox-class/unicode-math
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
    '("unicode-math"
      "\\documentclass{article}
       [PACKAGES]
       [NO-DEFAULT-PACKAGES]
       [EXTRA]
       \\usepackage{fontspec}
       \\usepackage{amsmath}
       \\usepackage{xltxtra}
       \\usepackage{unicode-math}
       \\setmathfont{STIX2Math}[
         Path/Users/jacobchaffin/Library/Fonts/,
         Extension={.otf},
         Scale=1]
       \\setmainfont{STIX2Text}[
         Path/Users/jacobchaffin/Library/Fonts/,
         Extension={.otf},
         UprightFont={*-Regular},
         BoldFont={*-Bold},
         ItalicFont={*-Italic},
         BoldItalicFont={*-BoldItalic}]"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

*** Ox Linguistics

#+NAME: ox/linguistics
#+BEGIN_SRC emacs-lisp
(use-package ox-linguistics
    :straight (ox-linguistics
               :host github
               :repo "jchaffin/ox-linguistics"
               :files ("lisp/*.el"))
    :after (:all ox ox-latex)
    :demand t)
#+END_SRC

**** gb4e

#+BEGIN_SRC emacs-lisp
(use-package gb4e)
#+END_SRC

*** Ox Bibtex

#+NAME: ox/bibtex
#+BEGIN_SRC emacs-lisp
(use-package ox-bibtex
  :straight org-plus-contrib
  :mode
  (("\\.org.bib\\'" . org-mode))
  :after (ox)
  :demand t
  :config
  (progn
    (require 'org-bibtex)
    (setq org-bibtex-file "references.org")))
#+END_SRC

*** Ox Pandoc

[[https://pandoc.org/][Pandoc]] is a document conversion tool that can convert pretty much
anything. The [[https://github.com/kawabata/ox-pandoc][ox-pandoc]] package allows us to utiliize this capability
for exporting org-mode documents to various formats.

#+NAME: ox/pandoc
#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc
  :if (executable-find "pandoc")
  :after (:all ox org-ref)
  :custom

  (org-pandoc-options '((standalone . t)))

  :demand t
  :config
  (progn

    ;; LaTeX-Beamer-PDF
    (defun ox-pandoc--pdf-engine ()
      "Set the default latex pdf engine to the one set by `org-latex-pdf-process'. "
      (let ((syms (mapcar (lambda (x) (cdr x)) dotemacs-latex-pdf-engines))
            (pred (lambda (sym) (eq (symbol-value sym) org-latex-pdf-process)))
            (sep "latex-process-"))
        (cadr (split-string (symbol-name (car (seq-filter pred syms))) sep))))

    (setq org-pandoc-options-for-beamer-pdf
          `((pdf-engine . ,(ox-pandoc--pdf-engine)))
          org-pandoc-options-for-latex-pdf
          `((pdf-engine . ,(ox-pandoc--pdf-engine))))

    (defun org-pandoc-pdf-engine-set (&optional process)
      "Set the latex pdf engine for `org-pandoc-export-to-latex-pdf'."
      (interactive)
      (let* ((process (or process
                          (assoc
                           (completing-read "Pandoc Process: "
                                            dotemacs-latex-pdf-engines nil nil)
                           dotemacs-latex-pdf-engines)))
             (sym (substring-no-properties (car process))))
        (setq org-pandoc-options-for-beamer-pdf
              `((pdf-engine . ,sym))
              org-pandoc-options-for-latex-pdf
              `((pdf-engine . ,sym)))))

    ;; Open MS .doc?x files with system viewer.
    (when (symbolp 'org-file-apps)
      (add-to-list 'org-file-apps '("\\.docx?\\'" . system)))))
#+END_SRC

*** Ox GFM

#+NAME: ox/gfm
#+BEGIN_SRC emacs-lisp
(use-package ox-gfm
  :after (ox)
  :demand t)
#+END_SRC

*** Ox Hugo

[[https://ox-hugo.scripter.co/][ox-hugo]] is an org exporter for Hugo-compatible markdown.

#+NAME: ox/hugo
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :after (ox))
#+END_SRC

*** Ox HTML

#+NAME: ox/html
#+BEGIN_SRC emacs-lisp
(use-package org-html-themes
    :straight
    (org-html-themes
      :host github
      :repo "fniessen/org-html-themes"
      :local-repo-name org-html-themes
      :files ("setup/*" "styles/*")))
#+END_SRC

** Org Hacks
:PROPERTIES:
:ID:       872F7F61-7971-42E4-BC24-FEA9D67634D2
:END:

From Thomas Frössman's [[http://thomasf.github.io/solarized-css/test/org-hacks.html#sec-1-8-5][org hacks]]:

*** Org occur open

#+BEGIN_SRC emacs-lisp
  (defun org-occur-open (uri)
    "Visit the file specified by URI, and run `occur' on the fragment
    (anything after the first '#') in the uri."
    (let ((list (split-string uri "#")))
      (org-open-file (car list) t)
      (occur (mapconcat 'identity (cdr list) "#"))))
  (org-add-link-type "occur" 'org-occur-open)
#+END_SRC

*** Reveal cursor in folded subtree.
:PROPERTIES:
:ID:       088BEAF5-B9FE-43F4-995D-5E26FB6DCB16
:END:

Fix problem with  which puts point back in a folded position.

#+NAME: org-hacks-saveplace-fix
#+BEGIN_SRC emacs-lisp
(defun org-mode-save-place-fix ()
  (when (outline-invisible-p)
    (save-excursion
      (outline-previous-visible-heading 1)
      (org-show-subtree))))

(add-hook 'org-mode-hook 'org-mode-save-place-fix)
#+END_SRC

*** ibuffer and org files

Neil Smithline posted this snippet to let you browse org files with
=ibuffer=:

#+BEGIN_SRC emacs-lisp
  (require 'ibuffer)

  (defun org-ibuffer ()
    "Open an `ibuffer' window showing only `org-mode' buffers."
    (interactive)
    (ibuffer nil "*Org Buffers*" '((used-mode . org-mode))))
#+END_SRC

*** File conversion

#+BEGIN_SRC emacs-lisp :tangle no
  ;; - fileconversion version 0.10
  ;; - DISCLAIMER: Make a backup of your Org files before trying
  ;;   `f-org-fileconv-*'. It is recommended to use a version control
  ;;   system like git and to review and commit the changes in the Org
  ;;   files regularly.
  ;; - Supported "#+STARTUP:" formats: "hidestarsfile",
  ;;   "nbspstarsfile", "markdownstarsfile".

  ;; Design summary: fileconversion is a round robin of two states linked by
  ;; two actions:
  ;; - State `v-org-fileconv-level-org-p' is nil: The level is "file"
  ;;   (encoded).
  ;; - Action `f-org-fileconv-decode': Replace file char with "*".
  ;; - State `v-org-fileconv-level-org-p' is non-nil: The level is "Org"
  ;;   (decoded).
  ;; - Action `f-org-fileconv-encode': Replace "*" with file char.
  ;;
  ;; Naming convention of prefix:
  ;; - f-[...]: "my function", instead of the unspecific prefix `my-*'.
  ;; - v-[...]: "my variable", instead of the unspecific prefix `my-*'.

  (defvar v-org-fileconv-level-org-p nil
    "Whether level of buffer is Org or only file.
  nil: level is file (encoded), non-nil: level is Org (decoded).")
  (make-variable-buffer-local 'v-org-fileconv-level-org-p)
  ;; Survive a change of major mode that does `kill-all-local-variables', e.
  ;; g. when reentering Org mode through "C-c C-c" on a #+STARTUP: line.
  (put 'v-org-fileconv-level-org-p 'permanent-local t)

  ;; * Callback `f-org-fileconv-org-mode-beg' before `org-mode'
  (defadvice org-mode (before org-mode-advice-before-fileconv)
    (f-org-fileconv-org-mode-beg))
  (ad-activate 'org-mode)
  (defun f-org-fileconv-org-mode-beg ()
    ;; - Reason to test `buffer-file-name': Only when converting really
    ;;   from/to an Org _file_, not e. g. for a temp Org buffer unrelated to a
    ;;   file.
    ;; - No `message' to not wipe a possible "File mode specification error:".
    ;; - `f-org-fileconv-decode' in org-mode-hook would be too late for
    ;;   performance reasons, see
    ;;   http://lists.gnu.org/archive/html/emacs-orgmode/2013-11/msg00920.html
    (when (buffer-file-name) (f-org-fileconv-decode)))

  ;; * Callback `f-org-fileconv-org-mode-end' after `org-mode'
  (add-hook 'org-mode-hook 'f-org-fileconv-org-mode-end
            nil   ; _Prepend_ to hook to have it first.
            nil)  ; Hook addition global.
  (defun f-org-fileconv-org-mode-end ()
    ;; - Reason to test `buffer-file-name': only when converting really
    ;;   from/to an Org _file_, not e. g. for a temp Org buffer unrelated to a
    ;;   file.
    ;; - No `message' to not wipe a possible "File mode specification error:".
    (when (buffer-file-name)
      ;; - Adding this to `change-major-mode-hook' or "defadvice before" of
      ;;   org-mode would be too early and already trigger during find-file.
      ;; - Argument 4: t to limit hook addition to buffer locally, this way
      ;;   and as required the hook addition will disappear when the major
      ;;   mode of the buffer changes.
      (add-hook 'change-major-mode-hook 'f-org-fileconv-encode nil t)
      (add-hook 'before-save-hook       'f-org-fileconv-encode nil t)
      (add-hook 'after-save-hook        'f-org-fileconv-decode nil t)))

  (defun f-org-fileconv-re ()
    "Check whether there is a #+STARTUP: line for fileconversion.
  If found then return the expressions required for the conversion."
    (save-excursion
      (goto-char (point-min))  ; `beginning-of-buffer' is not allowed.
      (let (re-list (count 0))
        (while (re-search-forward "^[ \t]*#\\+STARTUP:" nil t)
          ;; #+STARTUP: hidestarsfile
          (when (string-match-p "\\bhidestarsfile\\b" (thing-at-point 'line))
            ;; Exclude e. g.:
            ;; - Line starting with star for bold emphasis.
            ;; - Line of stars to underline section title in loosely quoted
            ;;   ASCII style (star at end of line).
            (setq re-list '("\\(\\* \\)"  ; common-re
                            ?\ ))         ; file-char
            (setq count (1+ count)))
          ;; #+STARTUP: nbspstarsfile
          (when (string-match-p "\\bnbspstarsfile\\b" (thing-at-point 'line))
            (setq re-list '("\\(\\* \\)"  ; common-re
                            ?\xa0))       ; file-char non-breaking space
            (setq count (1+ count)))
          ;; #+STARTUP: markdownstarsfile
          (when (string-match-p "\\bmarkdownstarsfile\\b"
                                (thing-at-point 'line))
            ;; Exclude e. g. "#STARTUP:".
            (setq re-list '("\\( \\)"  ; common-re
                            ?#))       ; file-char
            (setq count (1+ count))))
        (when (> count 1) (error "More than one fileconversion found."))
        re-list)))

  (defun f-org-fileconv-decode ()
    "In headings replace file char with '*'."
    (let ((re-list (f-org-fileconv-re)))
      (when (and re-list (not v-org-fileconv-level-org-p))
        ;; No `save-excursion' to be able to keep point in case of error.
        (let* ((common-re (nth 0 re-list))
               (file-char (nth 1 re-list))
               (file-re   (concat "^" (string file-char) "+" common-re))
               (org-re    (concat "^\\*+" common-re))
               len
               (p         (point)))
          (goto-char (point-min))  ; `beginning-of-buffer' is not allowed.
          ;; Syntax check.
          (when (re-search-forward org-re nil t)
            (goto-char (match-beginning 0))
            (org-reveal)
            (error "Org fileconversion decode: Syntax conflict at point."))
          (goto-char (point-min))  ; `beginning-of-buffer' is not allowed.
          ;; Substitution.
          (with-silent-modifications
            (while (re-search-forward file-re nil t)
              (goto-char (match-beginning 0))
              ;; Faster than a lisp call of insert and delete on each single
              ;; char.
              (setq len (- (match-beginning 1) (match-beginning 0)))
              (insert-char ?* len)
              (delete-char len)))
          (goto-char p))))

          ;; Notes for ediff when only one file has fileconversion:
          ;; - The changes to the buffer with fileconversion until here are
          ;;   not regarded by `ediff-files' because the first call to diff is
          ;;   made with the bare files directly. Only `ediff-update-diffs'
          ;;   and `ediff-buffers' write the decoded buffers to temp files and
          ;;   then call diff with them.
          ;; - Workarounds (choose one):
          ;;   - After ediff-files first do a "!" (ediff-update-diffs) in the
          ;;     "*Ediff Control Panel*".
          ;;   - Instead of using `ediff-files' first open the files and then
          ;;     run `ediff-buffers' (better for e. g. a script that takes two
          ;;     files as arguments and uses "emacs --eval").

    ;; The level is Org most of all when no fileconversion is in effect.
    (setq v-org-fileconv-level-org-p t))

  (defun f-org-fileconv-encode ()
    "In headings replace '*' with file char."
    (let ((re-list (f-org-fileconv-re)))
      (when (and re-list v-org-fileconv-level-org-p)
        ;; No `save-excursion' to be able to keep point in case of error.
        (let* ((common-re (nth 0 re-list))
               (file-char (nth 1 re-list))
               (file-re   (concat "^" (string file-char) "+" common-re))
               (org-re    (concat "^\\*+" common-re))
               len
               (p         (point)))
          (goto-char (point-min))  ; `beginning-of-buffer' is not allowed.
          ;; Syntax check.
          (when (re-search-forward file-re nil t)
            (goto-char (match-beginning 0))
            (org-reveal)
            (error "Org fileconversion encode: Syntax conflict at point."))
          (goto-char (point-min))  ; `beginning-of-buffer' is not allowed.
          ;; Substitution.
          (with-silent-modifications
            (while (re-search-forward org-re nil t)
              (goto-char (match-beginning 0))
              ;; Faster than a lisp call of insert and delete on each single
              ;; char.
              (setq len (- (match-beginning 1) (match-beginning 0)))
              (insert-char file-char len)
              (delete-char len)))
          (goto-char p)
          (setq v-org-fileconv-level-org-p nil))))
    nil)  ; For the hook.

#+END_SRC

** Org Web
*** Org Protocol

#+BEGIN_SRC emacs-lisp
(use-package org-protocol
    :straight org-plus-contrib
    :custom
    (org-protocol-default-template-key "l")
    :init
    (require 'org-capture)
    (require 'server)
    (unless (server-running-p)
      (setq server-socket-dir (format "/tmp/emacs%d" (user-uid)))
      (server-start))
    (require 'org-protocol))
#+END_SRC

**** Org Contacts

#+NAME: org-capture-contacts
#+BEGIN_SRC emacs-lisp
(use-package org-contacts
  :straight org-plus-contrib
  :init
  (require 'org-contacts)
  (push '("E" "Contacts" entry (file "~/Dropbox/org/contacts.org")
           "* %(org-contacts-template-name)
              :PROPERTIES:
              :EMAIL: %(org-contacts-template-email)
              :END:")
        org-capture-templates))
#+END_SRC

*** Org Download :web:

Drag and Drop images directly from a web browser to an org-mode buffer.

#+NAME: org-docmgr-download
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :defines (org-download-image-dir)
  :commands (org-download-enable  org-download-yank org-download-screenshot)
  :init
  (when (eq system-type 'darwin)
    (setq-default org-download-image-dir "~/Dropbox/org/img/"))
  :hook
  ((dired-mode org-mode) . org-download-enable))
#+END_SRC

*** Org Web Tools :web:

#+BEGIN_SRC emacs-lisp
(use-package org-web-tools)
#+END_SRC

*** Org preview html

#+BEGIN_SRC emacs-lisp
(use-package org-preview-html)
#+END_SRC

* Appearance

Credits to [[https://github.com/domtronn][domtronn]] for a solid portion of this stuff. Dude makes really fantastic Emacs UI libraries and enhancements.

** Theme

#+NAME: theme-interface
#+BEGIN_SRC emacs-lisp
(defcustom dotemacs--theme-style 'dark
  "The default theme mode. Only symbols 'dark and 'light are considered."
  :type '(choice
          (const :tag "Use a dark theme by default." dark)
          (const :tag "Use a light theme by default" light)
          (const :tag "Ignore the value of this variable" nil)))

(defcustom dotemacs-term-theme 'wombat
  "The default term theme."
  :type 'symbol)

(defcustom dotemacs-prose-theme 'tsdh-light
   "The default theme for writing text."
   :type 'symbol)

(defcustom dotemacs-light-theme 'tsdh-light
  "The light theme."
  :type 'symbol)

(defcustom dotemacs-dark-theme 'tsdh-dark
  "The dark theme."
  :type 'symbol)

(defcustom dotemacs-theme 'tsdh-dark
  "The default theme to load."
  :type 'string)

(defcustom dotemacs-theme-colors nil
  "plist of colors for the current theme."
  :type '(plist :key-type symbol :value-type sexp))
#+END_SRC

*** Custom Theme Settings

This disables Emacs asking questions about loading a new theme.

#+NAME: theme-custom-theme
#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
(setq custom-theme-directory (emacs-etc-dir "themes"))
#+END_SRC

*** Themes
**** Zenburn Theme

#+NAME: theme-zenburn
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :straight t)
#+END_SRC

**** Poet Theme
:PROPERTIES:
:ID:       4CB4E70B-93D6-4DAF-B66E-9322A55B7ACC
:END:

#+NAME: theme-poet
#+BEGIN_SRC emacs-lisp
(use-package poet-theme
  :init
  (setq dotemacs-light-theme 'poet))
#+END_SRC

**** Base16 Themes
:PROPERTIES:
:ID:       6C3D859E-C37D-4D75-920A-374E5AAEEEEA
:END:

#+NAME: theme-base16
#+BEGIN_SRC emacs-lisp
(use-package base16-theme
    :demand t
    :init
    (setq dotemacs-dark-theme 'base16-snazzy
          dotemacs-light-theme 'base16-default-light)

     (require 'base16-snazzy-theme)
     (defun base16-p (&optional theme)
      (let ((theme (or theme dotemacs-theme "")))
        (string-prefix-p "base16-" (symbol-name theme))))

    (add-to-list 'custom-theme-load-path
                 (expand-file-name "straight/build/base16-theme"
                                   user-emacs-directory))
    :config
    (setq base16-distinct-fringe-background nil))
#+END_SRC

*** Load Theme

#+NAME: theme-load-theme
#+BEGIN_SRC emacs-lisp
(setq-default custom-enabled-themes (list dotemacs-theme))

(defun remove-themes ()
  "Forcibly load the themes listed in `custom-enabled-themes'."
  (mapc #'disable-theme custom-enabled-themes))

(defvar dotemacs/load-theme-hook nil
  "List of functions to run when `dotemacs/load-theme' is invoked.")



(defun dotemacs--default-theme ()
  (cl-flet ((default-theme-symbol ()
              (symbol-value
               `,(intern (concat "dotemacs-"
                                 (format "%s" (symbol-value 'dotemacs--theme-style))
                                 "-theme"))))
            (req-theme (theme)
                       (require
                        `,(intern (concat (symbol-name theme) "-theme")))))
    (let ((theme (default-theme-symbol)))
      (and  (req-theme theme) theme))))

(cl-defun dotemacs/load-theme (&optional (theme (dotemacs--default-theme)))
  "Opionated theme loading. If invoked without arguments, this
function will load the theme associated with `dotemacs--theme-style'.

Calling this function with the universal-argument `C-u' loads the new
theme in \"quick mode\" by eliding hooks specified in
 `dotemacs/load-theme-hook'."

  (interactive
   (let ((themes (mapcar 'symbol-name (custom-available-themes))))
     (list
      (completing-read "Theme: " themes))))
  (interactive "p")

  (let ((theme-symbol (if (symbolp theme) theme (intern theme))))
    (remove-themes)
    (if (not window-system)
        (load-theme dotemacs-term-theme)
      (setq dotemacs-theme theme-symbol)
      (if (base16-p dotemacs-theme)
          (setq dotemacs-theme-colors
                (symbol-value
                 (intern (eval `(concat ,(symbol-name
                                          (symbol-value 'dotemacs-theme))
                     "-colors")))))
        (setq dotemacs-theme-colors nil))
      (load-theme dotemacs-theme))
    (unless (equal current-prefix-arg '(4))
      (run-hooks 'dotemacs/load-theme-hook))))

(defun dotemacs/load-theme-with-frame (frame)
  (with-selected-frame frame
    (unless (daemonp)
      (dotemacs/load-theme))))

(defun dotemacs--toggle-theme-style ()
  (interactive)
  (if (eq dotemacs--theme-style 'dark)
      (setq dotemacs--theme-style 'light)
    (setq dotemacs--theme-style 'dark)))

(defun dotemacs/toggle-theme ()
  (interactive)
  (dotemacs--toggle-theme-style)
  (dotemacs/load-theme))

(add-hook 'after-init-hook #'dotemacs/load-theme)
;; (add-hook 'after-make-frame-functions #'dotemacs/load-theme-with-frame)
#+END_SRC

** Org faces
:PROPERTIES:
:ID:       D29BA324-2B5B-46A6-A0E6-E266D770AF1F
:END:

#+NAME: theme-org-mode
#+BEGIN_SRC emacs-lisp

;; Org Mode faces
(defun dotemacs/org-faces ()
  "Customize `org-mode' faces for base-16 themes."
  (let ((fg (face-foreground 'default nil 'default))
        (fg2 (or (plist-get dotemacs-theme-colors :base04)))
        (bg2 (or (plist-get dotemacs-theme-colors :base01)))
        (sans-font "Source Sans Pro")
        (header-font "EtBembo"))
    (set-face-attribute 'org-verbatim nil
                          :foreground (color-darken-name fg 15) :inherit 'fixed-pitch-serif)
    (when (and fg2 bg2)
      (set-face-attribute 'org-document-info-keyword nil
                          :foreground fg2 :slant 'italic :inherit 'org-document-info-face)
      (set-face-attribute 'org-block-begin-line nil
                          :height 1.0 :foreground fg2 :background bg2 :inherit 'org-meta-line))
    (set-face-attribute 'org-block-begin-line nil
                        :inherit 'fixed-pitch)
    (set-face-attribute 'org-level-2 nil
                        :family header-font :height 1.2 :inherit 'outline-2)
    (set-face-attribute 'org-level-1 nil
                        :family header-font :height 1.6 :inherit 'outline-1)
    (set-face-attribute 'org-level-2 nil
                        :family header-font :height 1.3 :inherit 'outline-2)
    (set-face-attribute 'org-level-3 nil
                        :family header-font :height 1.2 :slant 'normal :inherit 'outline-3)
    (set-face-attribute 'org-level-4 nil
                        :family header-font :height 1.1 :slant 'normal :inherit 'outline-4)
    (set-face-attribute 'org-level-5 nil
                        :family header-font :height 1.1 :slant 'normal :inherit 'outline-5)
    (set-face-attribute 'org-level-6 nil
                        :family header-font   :height 1.1 :slant 'normal :inherit 'outline-6)
    (set-face-attribute 'org-level-7 nil
                        :family header-font :height 1.0 :slant 'normal :inherit 'outline-7)
    (set-face-attribute 'org-block nil :height 1.0 :slant 'normal :foreground fg)
    (set-face-attribute 'org-document-title nil
                        :family header-font :foreground fg :height 1.8
                        :underline nil :inherit 'variable-pitch)
    (set-face-attribute 'org-block-end-line nil :inherit 'org-block-begin-line)))

;; https://github.com/syl20bnr/spacemacs/pull/7667
(defun dotemacs/org-restart ()
  "Restart all open org-mode buffers."
  (let ((org-buffers (org-buffer-list)))
    (dolist (buf org-buffers)
      (with-current-buffer buf
        (org-mode-restart)
        (dotemacs/org-faces)))))

(defun dotemacs/org-theme-hook ()
  (dotemacs/org-faces)
  (dotemacs/org-restart))

(defun dotemacs/disable-scroll-bar (&optional frame)
  (if frame
      (with-selected-frame frame
        (toggle-scroll-bar -1))
    (toggle-scroll-bar -1)))

;; Add Hooks
(add-hook 'dotemacs/load-theme-hook #'dotemacs/org-theme-hook)
(add-hook 'dotemacs/load-theme-hook #'dotemacs/disable-scroll-bar)
(add-hook 'after-make-frame-functions #'dotemacs/disable-scroll-bar)
#+END_SRC

** Overlays
*** Highlight

#+NAME: hl-highlight
#+BEGIN_SRC emacs-lisp
(use-package highlight)
#+END_SRC

*** Overlay

#+BEGIN_SRC emacs-lisp
(use-package ov)
#+END_SRC

*** Overlay Highlight


#+BEGIN_SRC emacs-lisp
(use-package ov-highlight
  :straight (ov-highlight
             :host github
             :repo "jkitchin/ov-highlight")
  :bind
  (:map org-mode-map
        ("C-c h" . ov-highlight/body))
  :init
  (require 'ov)
  (require 'ov-highlight))
#+END_SRC

*** Rainbow Mode

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :init
  (rainbow-mode 1))
#+END_SRC

*** Col Highlight

#+BEGIN_SRC emacs-lisp
(use-package col-highlight)
#+END_SRC

*** Hl Todo

Highlight =TODO= keywords:

#+NAME: hl-hl-todo
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :commands (hl-todo-mode)
  :config
  (add-hook 'prog-mode-hook #'hl-todo-mode))
#+END_SRC

*** Symbol Highlighting
:PROPERTIES:
:ID:       37242456-1957-470E-885B-099A5D42A191
:END:
**** Symbol Overlay

#+BEGIN_SRC emacs-lisp
(use-package symbol-overlay)
#+END_SRC

**** Hlsexp

Minor mode to highlight sexp.

#+NAME: hl-hl-sexp
#+BEGIN_SRC emacs-lisp
(use-package highlight-sexp
  :straight t)
#+END_SRC

**** Highlight Symbol

#+NAME: hl-highlight-symbol
#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol)
#+END_SRC

*** Highlight Indentation
:PROPERTIES:
:ID:       A2FD2DE5-0295-4F22-974F-8D4D7E6F26C2
:END:

**** Highlight indent guide mode

#+NAME: hli/guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides)
#+END_SRC

**** Highlight indentation

#+NAME: hli/indentation
#+BEGIN_SRC emacs-lisp
(use-package highlight-indentation)

#+END_SRC

**** Visual indentation

#+NAME: hli/visual
#+BEGIN_SRC emacs-lisp
(use-package visual-indentation-mode)
#+END_SRC

*** Pretty Mode
:PROPERTIES:
:ID:       096E820A-240F-4A31-8B93-E72B821FF8CF
:END:

#+NAME: pretty/mode
#+BEGIN_SRC emacs-lisp
(use-package pretty-mode
  :init
  (global-pretty-mode t)

  :config
  (pretty-deactivate-groups
   '(:equality :ordering :ordering-double :ordering-triple
               :arrows :arrows-twoheaded :punctuation
               :logic :sets))
  (pretty-activate-groups '(:greek)))
#+END_SRC

*** Prettify Symbols
:PROPERTIES:
:ID:       C03FF49A-155B-4D77-AE81-ED0EA7EECD3E
:END:

Seems to be problems rendering symbols on Debian. Not sure if this is
because the necessary fonts are not installed or if it's because of
the absence of a window system. I'll check for the latter for now.

#+NAME: pretty/symbols
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (add-hook 'prog-mode-hook 'prettify-symbols-mode))
#+END_SRC

*** Prettify Utilities

#+NAME: pretty/utils
#+BEGIN_SRC emacs-lisp
(use-package prettify-utils
  :straight (prettify-utils
             :host github
             :repo "Ilazki/prettify-utils.el")
  :init
  (require 'prettify-utils))

#+END_SRC

*** Pretty Fonts

#+BEGIN_SRC emacs-lisp
(use-package pretty-fonts
  :load-path "etc/local/pretty-fonts"
  :straight nil
  :init
  (defun pretty-fonts/setup ()
    (require 'pretty-fonts)
    "Setup fira code ligatures and icon font sets."
    (pretty-fonts-add-hook 'prog-mode-hook pretty-fonts-fira-code-alist)
    (pretty-fonts-add-hook 'org-mode-hook  pretty-fonts-fira-code-alist)

    (pretty-fonts-set-fontsets-for-fira-code)
    (pretty-fonts-set-fontsets
     '(;; All-the-icons fontsets
       ("fontawesome"
        ;;                      
        #xf07c #xf0c9 #xf0cb #xf017 #xf101)

       ("all-the-icons"
        ;;    
        #xe907 #xe928)

       ("github-octicons"
        ;;                                     
        #xf091 #xf059 #xf076 #xf075 #xe192  #xf016 #xf071 #xf0c4)

       ("material icons"
        ;;              
        #xe871 #xe918 #xe3e7  #xe5da
        ;;              
        #xe3d0 #xe3d1 #xe3d2 #xe3d4))))
  :hook
  (dotemacs/load-theme . pretty-fonts/setup))
#+END_SRC

*** Pretty Code

#+BEGIN_SRC emacs-lisp

(use-package pretty-code
  :load-path "etc/local/pretty-code"
  :straight nil
  :init
  (require 'pretty-code)
  (pretty-code-add-hook 'emacs-lisp-mode-hook '((:def "defun")))
  (pretty-code-add-hook 'hy-mode-hook         '((:def "defn")
                                                    (:lambda "fn")))
  (pretty-code-add-hook 'python-mode-hook     '((:def "def")
                                                (:lambda "lambda"))))
#+END_SRC

*** Pretty Outlines

#+BEGIN_SRC emacs-lisp

(use-package pretty-outlines
  :straight nil
  :load-path "etc/local/pretty-outlines"
  :custom
  (pretty-outlines-ellipsis "")
  :hook ((outline-mode       . pretty-outlines-set-display-table)
         (outline-minor-mode . pretty-outlines-set-display-table)
         (emacs-lisp-mode . pretty-outlines-add-bullets)
         (python-mode     . pretty-outlines-add-bullets)))


#+END_SRC

** Fonts
:PROPERTIES:
:ID:       98543582-0772-4025-917B-38DF6542DD6F
:END:
*** Don't use default font for symbols

See [[https://www.reddit.com/r/emacs/comments/6yh9r0/defining_unicode_character_blocks/][defining unicode character blocks : emacs]]

#+BEGIN_SRC emacs-lisp
(setq use-default-font-for-symbols nil)
#+END_SRC

*** default text scale
#+BEGIN_SRC emacs-lisp
(use-package default-text-scale)
#+END_SRC

*** Default font

#+BEGIN_SRC emacs-lisp
(defcustom user-fonts-list
  '(("Fira Code" . nil)
    ("Fira Mono for Powerline" . nil)
    ("Operator Mono" . extralight)
    ("SF Mono" . normal)
    ("Ubuntu Mono" . nil)
    ("Monaco" . nil)
    ("Inconsolota" . nil))

  "The default font stack to use for setting the font
  on startup and new frame."
  :type '(string))

(defun font/setup ()
  (interactive)
  (let* ((font-family (or (car (seq-intersection
                               (mapcar #'car user-fonts-list) (font-family-list)))
                         (face-attribute 'fixed-pitch :family)))
         (weight (or (cdr (assoc font-family user-fonts-list)) 'normal)))
    (run-at-time "0.2 sec" nil
                 `(lambda ()
                    (when (not (eq (face-attribute 'default :family)
                                 ,font-family))
                      (set-face-attribute
                       'default nil
                       :family ,font-family
                       :weight (quote ,weight)
                       :height 120))))))

(add-hook 'after-init-hook 'font/setup)
#+END_SRC

*** Variable Pitch


#+BEGIN_SRC emacs-lisp
(use-package org-variable-pitch
  :straight (org-variable-pitch
             :type git
             :host github
             :repo "emacsmirror/org-variable-pitch")
  :custom-face
  (org-indent-face  (((:inherit (org-hide)))))
  :hook
  (org-mode . org-variable-pitch-minor-mode))
#+END_SRC

*** Serif

From[[https://ogbe.net/blog/toggle-serif.html][ Variable-width Serif Fonts when editing plain text in Emacs]]


#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Ligatures
*** Unicode
**** Unicode Fonts

#+BEGIN_SRC emacs-lisp
  (use-package unicode-fonts
    :init
    (unicode-fonts-setup))
#+END_SRC

**** Emojis
***** Apple Color Emoji

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend))
#+END_SRC

***** Unicode Emoticons

#+BEGIN_SRC emacs-lisp
(use-package unicode-emoticons)
#+END_SRC

***** Company Emoji

#+NAME: emoji/company
#+BEGIN_SRC emacs-lisp
(use-package company-emoji
  :after (:all company emojify-mode)
  :demand t
  :init
    ;; https://github.com/dunn/company-emoji#emoji-font-support
  (defun --set-emoji-font (frame)
    "Adjust the font settings of FRAME so Emacs can display emoji properly."
    (if (eq system-type 'darwin)
        ;; For NS/Cocoa
        (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
      ;; For Linux
      (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))
  (--set-emoji-font nil)

  ;; Hook for when a frame is created with emacsclient
  (add-hook 'after-make-frame-functions '--set-emoji-font)

  :config
  (defun company-emoji-setup ()
    (let ((backends (cons 'company-emoji company-backends)))
      (set (make-local-variable 'company-backends) backends)))

  (add-hook 'emojify-mode-hook #'company-emoji-setup))

#+END_SRC

**** Icons
*****  All the  Icons

[[https://github.com/domtronn/all-the-icons.el][All The Icons]] is a utility package for icons in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

****** all the icons dired

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :after (:all all-the-icons dired)
  :demand t
  :init
  (require 'font-lock+)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

****** all the icons ivy

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy
    :after (:all ivy all-the-icons)
    :init
    (all-the-icons-ivy-setup))

#+END_SRC

****** Modify default fontspec
:PROPERTIES:
:ID:       8B26EA14-B8CE-4E10-8B29-B3426E0B6D72
:END:

#+BEGIN_SRC emacs-lisp
(defun fonts/setup-glyphs ()
  "Modify the default fontset to choose the right icons."
  (let ((font-glyphs-alist '(("github-octicons" . (#xF0C5 #xF02F #xF00E))
                             ("file-icons" . (#xE917  #xE600))
                             ("Material Icons" . (#xE80C #xE8CE))))
        (font-families (font-family-list)))
    (dolist (font-glyphs font-glyphs-alist)
      (when (member (car font-glyphs) font-families)
        (mapcar
         (lambda (glyph)
           (set-fontset-font "fontset-default"
                             glyph (car font-glyphs)
                             nil 'prepend))
         (cdr font-glyphs))))))


(add-hook 'after-init-hook 'fonts/setup-glyphs)

#+END_SRC


***** VS Code Icons
:PROPERTIES:
:ID:       4196FB0F-6A8F-4476-AFBD-651C7E5ED8AD
:END:

#+NAME: icons/vscode
#+BEGIN_SRC emacs-lisp
(use-package vscode-icon
  :init
  (require 'vscode-icon)
  :commands (vscode-icon-for-file))

#+END_SRC

** Cursor
*** Disable Blink

Ultimately, I'd like to set a longer blink interval, like the "phase"
~caret_style~ setting in Sublime Text.

#+NAME: cursor/blink
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode -1)
#+END_SRC

*** Only show cursor in selected window

#+NAME: cursor/window
#+BEGIN_SRC emacs-lisp
(setq-default cursor-in-non-selected-windows nil
              x-stretch-cursor nil)
#+END_SRC

*** Change the cursor type

#+NAME: cursor/chg
#+BEGIN_SRC emacs-lisp
(use-package cursor-chg
  :config
  (require 'cursor-chg)
  (change-cursor-mode 1) ; On for overwrite/read-only/input mode
  (toggle-cursor-type-when-idle 1))
#+END_SRC

** Visual
:PROPERTIES:
:ID:       A6A6C1C1-8DF3-45C7-8FB0-D1D1974B8C72
:END:

*** Visual Fill Column
:PROPERTIES:
:ID:       9343B26B-8EB3-4785-BAD0-427AE4E3DD63
:END:

#+NAME: readview-fc
#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column
  :commands (visual-fill-column-mode)
  :custom
  (visual-fill-column-width
   ;; take Emacs 26 line numbers into account
   (+ (if (boundp 'display-line-numbers) 6 0)
      fill-column))
  :config
  (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))

#+END_SRC

*** Fill Column Indicator
:PROPERTIES:
:ID:       8B3DC41D-C8AC-4FE3-801F-A0FFAD14F363
:END:

#+NAME: readview-fc-indicator
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :init
  (setq fci-rule-use-dashes nil))
#+END_SRC

*** Justify Kp
:PROPERTIES:
:ID:       423D21DE-4BD8-49B5-BD6B-F88E267B4008
:END:

#+NAME: readview-justify
#+BEGIN_SRC emacs-lisp
(use-package justify-kp
  :straight (:host github
                   :repo "Fuco1/justify-kp"))
#+END_SRC

** Modeline
:PROPERTIES:
:ID:       3C550304-3F1D-4682-B4C6-527EBDFA0760
:END:
*** Spaceline
**** Spaceline Mode

#+NAME: sl/spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline)
#+END_SRC

**** Spaceline All the Icons

#+NAME: sl/icons
#+BEGIN_SRC emacs-lisp
(use-package spaceline-all-the-icons)

  (defun ml-spaceline-setup ()
    (interactive)
    "Setup the modeline for spaceline."
    (setq spaceline-all-the-icons-separator-type 'arrow)
    (require 'spaceline)
    (require 'spaceline-segments)
    (require 'spaceline-config)
    (require 'all-the-icons)
    (require 'spaceline-all-the-icons)
    (spaceline-all-the-icons--setup-neotree)
    (spaceline-all-the-icons-theme 'mu4e-alert 'org-pomodoro)
    (spaceline-toggle-all-the-icons-flycheck-status-off))

  (add-hook 'after-init-hook #'ml-spaceline-setup)

#+END_SRC


*** Eyeliner


#+BEGIN_SRC emacs-lisp
(use-package eyeliner
    :straight (eyeliner
               :type git
               :host github
               :repo "dustinlacewell/eyeliner")
    :init
    (defun ml-eyeliner-setup ()
      (interactive)
      (require 'eyeliner)
      (eyeliner/install)))

#+END_SRC

* Web
** Libraries
*** Simple httpd

#+NAME: lib/httpd
#+BEGIN_SRC emacs-lisp
(use-package simple-httpd
    :straight (simple-httpd
               :type git
               :host github
               :repo "skeeto/emacs-web-server"
               :local-repo "simple-httpd"))
#+END_SRC

*** WebSocket

#+NAME: lib/websocket
#+BEGIN_SRC emacs-lisp
(use-package websocket)
#+END_SRC

*** UUID

#+NAME: lib/uuid
#+BEGIN_SRC emacs-lisp
(use-package uuid)
#+END_SRC

*** Web Server

#+NAME: lib/webserver
#+BEGIN_SRC emacs-lisp
(use-package web-server)
#+END_SRC

*** Request

#+NAME: lib/request
#+BEGIN_SRC emacs-lisp
(use-package request)
#+END_SRC

*** OAuth

#+NAME: lib/oauth2
#+BEGIN_SRC emacs-lisp
(use-package oauth2)
#+END_SRC

** Browsing
*** Keymap

#+BEGIN_SRC emacs-lisp
(bind-keys*
 :prefix-map web-prefix-map
 :prefix "M-m b")
#+END_SRC

*** Browse url

- [[https://emacs.stackexchange.com/a/7332][Stack Exchange - How to make eww default browser in emacs]]

#+NAME: browser/url
#+BEGIN_SRC emacs-lisp
(use-package browse-url
    :custom (browse-url-chromium-program
             (if (eq system-type 'darwin)
                 "/Applications/Chromium.app/Contents/MacOS/Chromium"
               "chromium"))
  :config
  (progn
    (when (not (display-graphic-p))
      (setq browse-url-browser-function 'eww-browse-url))))

#+END_SRC

*** Browser utilities on macOS

The =osx-browse= library provides several useful commands for using the
Google Chrome, Safari, and Firefox web browsers on macOS.

#+NAME: browser/macos
#+BEGIN_SRC emacs-lisp
(use-package osx-browse
  :if (eq system-type 'darwin)
  :defines (osx-browse-mode osx-browse-mode-map)
  :demand t
  :init
  (progn
    (osx-browse-mode 1)))
#+END_SRC

*** Google search

#+NAME: browser/google
#+BEGIN_SRC emacs-lisp
(use-package google-this
  :init
  (google-this-mode 1)
  :config
  (with-eval-after-load 'which-key
    (which-key-add-key-based-replacements "C-c /" " This")
    (push '(( nil . "google-this-\\(.+\\)") . (nil . "this \\1"))
          which-key-replacement-alist)))
#+END_SRC

*** Search Web

#+NAME: browser/search
#+BEGIN_SRC emacs-lisp
  (use-package search-web)
#+END_SRC

*** xwidget webkit


#+BEGIN_SRC emacs-lisp
(use-package xwidget
  :straight nil
  :bind (:map xwidget-webkit-mode-map
              ("\C-s" . isearch-forward)
              ("d" . xwidget-webkit-download))

  :defines (xwidget-webkit-current-url-as-kill xwidget-webkit-download)
  :init
  (defadvice xwidget-webkit-current-url-message-kill
      (around xwidget-webkit-current-url-message-kill-advice activate)
    (interactive)
    (let ((url (funcall-interactively #'xwidget-webkit-current-url)))
      (kill-new url)
      (message "Copied to kill ring: %s" url)))

  (when (require 'eww nil t)
    (defalias #'xwidget-webkit-decode-url-file-name #'eww-decode-url-file-name)
    (defalias #'xwidget-make-unique-file-name #'eww-make-unique-file-name)

    (defun xwidget-webkit-download (directory)
      "Download the current file from the url visited in the
active xwidget buffer and write to file in DIRECTORY."
      (interactive
       (list (read-directory-name
              "Download to: "
              xwidget-webkit-download-dir  nil nil)))
      (let ((url (funcall-interactively #'xwidget-webkit-current-url))
            (default-directory directory))
        (url-retrieve url #'xwidget-webkit-download-callback (list url directory))))

    (defun xwidget-webkit-download-callback (status url directory)
      (unless (plist-get status :error)
        (let* ((obj (url-generic-parse-url url))
               (path (car (url-path-and-query obj)))
               (file (eww-make-unique-file-name
                      (eww-decode-url-file-name (file-name-nondirectory path))
                      directory)))
          (goto-char (point-min))
          (re-search-forward "\r?\n\r?\n")
          (let ((coding-system-for-write 'no-conversion))
            (write-region (point) (point-max) file))
          (message "Saved %s" file)))))

  :config
  (defun xwidget-webkit-open-file (&optional file)
    "Open local FILE in"
    (interactive "fFile: ")
    (xwidget-webkit-browse-url
     (concat "file://" (copy-file-path)))))
#+END_SRC

*** Set default browser

Interactively.

#+NAME: browser/default
#+BEGIN_SRC emacs-lisp
(defvar browse-url-browser-alist
      '(("chrome" . browse-url-chrome)
        ("firefox" . browse-url-firefox)
        ("eww" . eww-browse-url)
        ("xwidget-webkit" . xwidget-webkit-browse-url)))

(if (eq system-type 'darwin)
    (progn
      (setf (cdr (assoc "chrome" browse-url-browser-alist))
            #'osx-browse-url-chrome)
      (setf (cdr (assoc "firefox" browse-url-browser-alist))
            #'osx-browse-url-firefox)
      (add-to-list 'browse-url-browser-alist
                   '("safari" . osx-browse-url-safari))))

(defun set-browser-function (browser)
  "Interactively set the browser used by `browse-url'. "
  (interactive
   (list (completing-read "Browser: " browse-url-browser-alist)))
  (when-let ((browser-function (cdr (assoc browser browse-url-browser-alist))))
    (setq browse-url-browser-function browser-function)))

(cl-defun make-browser-function (browser)
  `(defun ,(intern (concat "set-browser-function-" browser)) ()
     (interactive)
     (set-browser-function ,browser)))

(defmacro make-browser-functions (browsers)
  `(progn ,@(mapcar 'make-browser-function browsers)))


(eval `(make-browser-functions ,(mapcar 'car browse-url-browser-alist)))

#+END_SRC

*** Engine Mode

#+NAME: browser/engine
#+BEGIN_SRC emacs-lisp
(use-package engine-mode
  :init
  (engine-mode t)
  :defines (engine-mode-prefixed-map)
  :bind*
  (:map web-prefix-map
        ("e". engine-mode-prefixed-map))

  :config
  (setq web-engine-prefix nil)

  (when (and (boundp 'engine/keybinding-prefix) web-engine-prefix)
    (define-key engine-mode-map (kbd "C-x /") nil))

  (defengine cassi
    "http://cassi.cas.org/search.jsp")

  (defengine ctan
    "http://www.ctan.org/search/?x=1&PORTAL=on&phrase=%s"
    :keybinding "c"
    :docstring "Search the Comprehensive TeX Archive Network (ctan.org)")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g"
    :docstring "Search Github")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "Gg"
    :docstring "Search Google")

  (defengine google-bookmarks
    "chrome://bookmarks/?q=%s"
    :keybinding "Gb"
    :docstring "Search bookmarks in Google Chrome")

  (defengine google-images
    "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
    :keybinding "Gi"
    :docstring "Search google-images")

  (defengine google-maps
    "http://maps.google.com/maps?q=%s"
    :keybinding "Gm"
    :docstring "Mappin' it up.")

  (defengine google-schoolar
    "http://scholar.google.com/scholar?q=%s"
    :keybinding "Gs"
    :docstring "Schoolin'it up.")

  (defengine project-gutenberg
    "http://www.gutenberg.org/ebooks/search/?query=%s"
    :docstring "Read good")

  (defengine proquest
    "https://search.proquest.com"
    :keybinding "p"
    :docstring "Search Proquest")

  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s"
    :docstring "Search StackOverflow.")

  (defengine twitter
    "https://twitter.com/search?q=%s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w"
    :docstring "Search wikipedia.")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine wolfram-alpha
    "http://www.wolframalpha.com/input/?i=%s"
    :keybinding "a"
    :docstring "Search Wolfram Alfa")

  (defengine worldcat
    "https://ucla.worldcat.org/search?q=%s"
    :keybinding "W"
    :docstring "Search Worldcat"
    :browser 'osx-browse-url-chrome)

  (defengine youtube
    "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
    :keybinding "y"
    :docstring "Search Youtube")

  (which-key-add-key-based-replacements
    "M-m b"     "🌍 Browse"
    "M-m b e"   "🔎 Web Engine"
    "M-m b e y"  " Youtube"
    "M-m b e p"  " Proquest"
    "M-m b e h"  " GitHub"
    "M-m b e G g"  " Google"
    "M-m b e a"  " Wolfram"
    "M-m b e w"  " Wikipedia"
    "M-m b e s"  " Stack Overflow"
    "M-m b e W"   " Worldcat"
    "M-m b e c"   " CTan"
    "M-m b e G"   " Google"
    "M-m b e G i" " Images"
    "M-m b e G b"  " Bookmarks"
    "M-m b e G m"  " Maps"
    "M-m b e G s"  " Scholar"))
#+END_SRC

** Email
*** Org Mime

#+NAME: mail/mime
#+BEGIN_SRC emacs-lisp
(use-package org-mime
  :config
  (setq org-mime-export-options
        '(:section-numbers nil
          :with-author nil
          :with-toc nil))


  (defun org-mime/style ()
    (org-mime-change-element-style
     "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                   "#E6E1DC" "#232323"))
    (org-mime-change-element-style
     "blockquote" "border-left: 2px solid gray; padding-left: 4px;"))

  (defun org-mime/message-mode-hook ()
    (local-set-key (kbd "C-c M-h") 'org-mime-htmlize))

  (defun org-mime/org-mode-hook ()
      (local-set-key (kbd  "C-c M-h") 'org-mime-org-buffer-htmlize))

  :hook
  (message-mode . org-mime/message-mode-hook)
  (org-mode     . org-mime/org-mode-hook)
  (org-mime-html . org-mime/style))

#+END_SRC

*** Offlineimap

#+NAME: mail/imap
#+BEGIN_SRC emacs-lisp
(use-package offlineimap)
#+END_SRC

*** Mu
**** Mu4e

#+NAME: mu-mu4e
#+BEGIN_SRC emacs-lisp
  (use-package mu4e
      :straight nil
      :load-path "/usr/local/share/emacs/site-lisp/mu/mu4e"
      :init
      (require 'mu4e)

      :config
      ;; use mu4e for email in emacs
      (setq mail-user-agent 'mu4e-user-agent)

      (setq mu4e-maildir "~/.mail")

      ;; Update with offlineimap
      (setq mu4e-get-mail-command "offlineimap -o -q")

      ;; Let GMAIL/IMAP take care of sent messages
      (setq mu4e-sent-messages-behavior 'delete)

      (require 'smtpmail)

       ;; smtp settings
      (setq message-send-mail-function 'smtpmail-send-it
            smtpmail-stream-type 'starttls
            smtpmail-default-smtp-server "smtp.gmail.com"
            smtpmail-smtp-server "smtp.gmail.com"
            smtpmail-smtp-service 587)

      ;; Kill message buffers on send
      (setq message-kill-buffer-on-exit t)

      ;; mu4e View
      (setq mu4e-attachment-dir "~/Downloads"
            mu4e-view-show-images t
            mu4e-show-addresses t
            mu4e-view-prefer-html t
            mu4e-view-show-images t)


      (when (fboundp 'imagemagick-register-types)
        (imagemagick-register-types))

      (setq mu4e-completing-read-function 'ivy-completing-read)

      ;; Mu4e Contexts
      (setq mu4e-context-policy 'pick-first
            mu4e-compose-context-policy 'ask-if-none)

      (setq mu4e-contexts
            `(,(make-mu4e-context
                :name "personal"
                :enter-func
                (lambda () (mu4e-message "Using Personal gmail account."))
                :leave-func
                (lambda () (mu4e-message "leaving Personal gmail account."))
                :match-func
                (lambda (msg)
                  (when msg
                    (string-match-p "^/personal")
                    (mu4e-message-field msg :maildir)))
                :vars
                '((user-mail-address  . "jchaffin57@gmail.com")
                  (user-full-name     . "Jacob Chaffin")
                  (mail-reply-to      . "jchaffin57@gmail.com")
                  (smtpmail-smtp-user . "jchaffin57@gmail.com")
                  (mu4e-sent-folder   . "/personal/sent")
                  (mu4e-drafts-folder . "/personal/drafts")
                  (mu4e-refile-folder . "/personal/archive")
                  (mu4e-trash-folder  . "/personal/trash")
                  (mu4e-compose-signature .
                   (concat
                    "Jacob Chaffin\n"
                    "jchaffin57@gmail.com\n"
                    "jchaffin@ucla.edu"))))

               ,(make-mu4e-context
                 :name "school"
                 :enter-func
                 (lambda () (mu4e-message "Entering UCLA Gmail account"))
                 :leave-func
                 (lambda () (mu4e-message "Leaving UCLA Gmail account."))
                 :match-func
                 (lambda (msg)
                   (when msg
                     (string-match-p "^/school"
                     (mu4e-message-field msg :maildir))))
                 :vars '((user-mail-address  . "jchaffin@ucla.edu")
                         (user-full-name     . "Jacob Chaffin")
                         (mail-reply-to      . "jchaffin@ucla.edu" )
                         (smtpmail-smtp-user . "jchaffin@g.ucla.edu")
                         (mu4e-drafts-folder . "/school/drafts")
                         (mu4e-sent-folder   . "/school/sent")
                         (mu4e-refile-folder . "/school/archive")
                         (mu4e-trash-folder  . "/school/trash")
                         (mu4e-compose-signature .
                          (concat
                           "Jacob Chaffin\n"
                           "UCLA 2019\n"
                           "Linguistics and Computer Science\n"
                           "jchaffin@ucla.edu"))))))

      ;; From [[https://www.djcbsoftware.nl/code/mu/mu4e/Some-context-tricks.html#Some-context-tricks][9.5 - Some Context Tricks]]
      ;; This sets `mu4e-user-mail-address-list' to the concatenation of all
      ;; `user-mail-address' values for all contexts. If you have other mail
      ;; addresses as well, you'll need to add those manually.
      (setq mu4e-user-mail-address-list
            (delq nil
                  (mapcar (lambda (context)
                            (when (mu4e-context-vars context)
                              (cdr
                               (assq
                                'user-mail-address
                                (mu4e-context-vars context)))))
                          mu4e-contexts)))


      (require 'gnus-dired)

      (defun gnus-dired-mail-buffers ()
        "Return a list of active message buffers."
        (let ((buffers))
          (save-current-buffer
            (dolist (buffer (buffer-list t))
              (set-buffer buffer)
              (when (and (derived-mode-p 'message-mode)
                         (null message-sent-message-via))
                (push (buffer-name buffers) buffers))))
          (nreverse buffers)))

      (setq gnus-dired-mail-mode 'mu4e-user-agent)

      (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode))
#+END_SRC

**** Mu Notifications

#+NAME: mu-alert
#+BEGIN_SRC emacs-lisp
(use-package mu4e-alert
    :config
    (mu4e-alert-enable-notifications))
#+END_SRC

**** mu4e maildirs extension

#+NAME: mu-maildirs
#+BEGIN_SRC emacs-lisp
(use-package mu4e-maildirs-extension
    :after (mu4e)
    :init
    (mu4e-maildirs-extension-load))
#+END_SRC

**** mu4e conversion

#+BEGIN_SRC emacs-lisp
(use-package mu4e-conversation)
#+END_SRC

** Bug Tracking
:PROPERTIES:
:ID:       B9B7C7ED-8D05-44F2-95C3-C08F008966C5
:END:

#+BEGIN_SRC emacs-lisp
(use-package debbugs
  :straight (debbugs
             :type git
             :repo "https://git.savannah.gnu.org/git/emacs/elpa.git"
             :files ("packages/debbugs/*.el"
                     "packages/debbugs/Debbugs.wsdl")
             :local-repo "elpa"))

#+END_SRC

** Browse at remote
:PROPERTIES:
:ID:       5A68686E-3476-47FD-AF46-E76FEA8FBD84
:END:

#+NAME: vcs/remote
#+BEGIN_SRC emacs-lisp
(use-package browse-at-remote
  :init
  (if (eq system-type 'darwin)
      (when (fboundp 'osx-browse-url-chrome)
        (setq browse-url-browser/function 'osx-browse-url-chrome))))
#+END_SRC

* Writing
** Notetaking
*** Deft

[[https://jblevins.org/projects/deft/][Deft]] is a notetaking application for Emacs.

#+NAME: notes/deft
#+BEGIN_SRC emacs-lisp
(use-package deft
  :if (eq system-type 'darwin)
  :bind ("C-x C-n" . deft)
  :custom
  (deft-auto-save-interval 0)
  (deft-extensions '("org"))
  (deft-directory "~/Dropbox/org/notes/")
  (deft-use-filename-as-title t)
  (deft-default-extension "org"))
#+END_SRC

*** Org OneNote

Work account is for office portal, not a Microsoft account. I need integration or authorization via office.

#+NAME: cloud-onenote
#+BEGIN_SRC emacs-lisp
(use-package org-onenote
  :init
  (require 'secrets)
  :custom
  (org-onenote-token-file
   (emacs-var-dir "org/onenote-oauth2.plstore")))
#+END_SRC

*** Lorem Ipsum

#+NAME: notes/lorem-ipsum
#+BEGIN_SRC emacs-lisp
(use-package lorem-ipsum
  :straight t)
#+END_SRC

*** Org Velocity

#+NAME: notes/velocity
#+BEGIN_SRC emacs-lisp
  (use-package org-velocity
    :straight org-plus-contrib
    :bind
    (("C-c n" . org-velocity))
    :demand t
    :custom
    (org-velocity-bucket (expand-file-name "bucket.org" org-directory))
    :init
  (require 'org-velocity))
#+END_SRC

** Nov

[[https://github.com/wasamasa/nov.el][Nov.el]] is a major mode for reading EPUB documents in Emacs.

#+NAME: readview-epub
#+BEGIN_SRC emacs-lisp
(use-package nov
  :mode ("\\.epub\\'" . nov-mode)
  :init
  (require 'justify-kp)

  (defun nov/setup ()
    (face-remap-add-relative 'variable-pitch :family "Bookmania")
    (unless visual-line-mode
      (visual-line-mode 1))
    (unless visual-fill-column-mode
      (visual-fill-column-mode 1))
    (setq nov-text-width most-positive-fixnum
          visual-fill-column-center-text t))

  (defun nov/window-configuration ()
    (nov/post-html-render)
    (remove-hook 'window-configuration-change-hook
                 'nov/window-configuration))

  (defun nov/post-html-render ()
    (if (get-buffer-window)
        (let ((max-width (pj-line-width)) buffer-read-only)
          (save-excursion
            (goto-char (point-min))
              (while (not (eobp))
                (when (not (looking-at "^[[:space:]]*$"))
                  (goto-char (line-end-position))
                  (when (> (shr-pixel-column) max-width)
                    (goto-char (line-beginning-position))
                    (pj-justify)))
                (forward-line 1))))
      (add-hook 'window-configuration-change-hook
                'nov/window-configuration nil t)))
  :hook
  (nov-mode . nov/setup)
  (nov-post-html-render .  nov/post-html-render))
#+END_SRC

** Variable Pitch

#+NAME: writing-variable-pitch
#+BEGIN_SRC emacs-lisp
(defcustom dotemacs-org-fixed-pitch-faces
  '(org-table
    org-code
    org-special-keyword
    org-verbatim
    org-latex-and-related
    org-meta-line
    org-block
    org-block-begin-line
    org-block-end-line
    org-document-info-keyword)
  "Faces to keep fixed-width when using ‘org-variable-pitch-minor-mode’."
  :type '(list symbol))

(defvar org-fixed-pitch-font
  (face-attribute 'fixed-pitch :family))

(defvar org-variable-pitch-font
  (face-attribute 'variable-pitch :family))


(setq org-fixed-pitch-font "Fira Code")
(setq org-variable-pitch-font "Baskerville")


(setq face-remapping-alist nil)

(defvar variable-pitch-toggle-hook nil
  "Hooks to run when `org-toggle-variable-pitch' is called.")

(defun org-toggle-variable-pitch ()
  "Toggle use of face `variable-pitch'.
  This works by frobbing `face-remapping-alist'."
  (interactive)
  (if face-remapping-alist
      (setq face-remapping-alist nil)
    (face-remap-add-relative 'variable-pitch
                             :family org-variable-pitch-font
                             :height 130)
    (face-remap-add-relative 'default 'variable-pitch)
    (->> dotemacs-org-fixed-pitch-faces
       (mapcar (lambda (x) (list x
                            :family org-fixed-pitch-font
                            :height 100)))
       (mapcar (lambda (x) (apply #'face-remap-add-relative x)))))
  (run-hooks 'variable-pitch-toggle-hook))

#+END_SRC

** Olivetti

#+NAME:  writing-olivetti
#+BEGIN_SRC emacs-lisp

(use-package olivetti
  :init
  (defun dotemacs/olivetti-setup ()
    (auto-fill-mode -1)
    (when (fboundp 'centered-cursor-mode)
      (centered-cursor-mode)))
  :hook
  (olivetti-mode . dotemacs/olivetti-setup))

#+END_SRC

** Writeroom

#+NAME: writing-writeroom
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
    :config
    (defun dotemacs/writeroom-mode-hook ()
      (org-toggle-variable-pitch)
      (auto-fill-mode -1))
    (add-hook 'writeroom-mode #'dotemacs/writeroom-mode-hook))
#+END_SRC

* Code
** LSP
*** LSP Mode

#+NAME: lsp/mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :custom
  (lsp-prefer-flymake nil)
  :init
  (require 'lsp)
  (require 'lsp-clients)
  :hook
  (lsp-after-open . lsp-enable-imenu))
#+END_SRC

*** LSP UI Mode

#+NAME: lsp/ui
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui)

(use-package lsp-ui-peek
  :straight lsp-ui
  :bind
  (:map lsp-ui-peek-mode-map
        ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
        ([remap xref-find-references]  . lsp-ui-peek-find-references)))
#+END_SRC

*** Company LSP

#+NAME: lsp/company
#+BEGIN_SRC emacs-lisp
(use-package company-lsp
    :after company
    :demand t
    :init
    (push 'company-lsp company-backends)
    :custom
    (company-transformers nil)
    (company-lsp-async t)
    (company-lsp-cache-candidates nil))
#+END_SRC

*** Dap Mode
:PROPERTIES:
:ID:       EEB674B8-A1AA-4965-834F-0550F5FBF4A7
:END:

#+NAME: dap/mode
#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :after lsp-mode
  :demand t
  :config
  (dap-mode t)
  (dap-ui-mode t))
#+END_SRC

** Flycheck

#+NAME: flycheck-spec
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
      :custom
      (flycheck-global-modes nil)
      (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
      (flycheck-emacs-lisp-load-path 'inherit)
      :init
      (defun dotemacs/flycheck-enable (mode)
        "Use flycheck in MODE."
        (push mode flycheck-global-modes))

      (defun dotemacs/flycheck-enable-hook ()
        "Enable Flycheck as a hook."
        (when (fboundp 'flycheck-mode)
          (flycheck-mode +1)))

      (defun dotemacs/toggle-flycheck-error-list ()
        "Toggle flycheck's error list window.
  If the error list is visible, hide the window.
  Else display the buffer."
        (interactive)
        (-if-let (window (flycheck-get-error-list-window))
            (quit-window nil window)
          (flycheck-list-errors)))

      (defun dotemacs/goto-flycheck-error-list ()
        "Open and go to the error list buffer."
        (interactive)
        (unless (get-buffer-window
                 (get-buffer flycheck-error-list-buffer))
          (flycheck-list-errors)
          (switch-to-buffer-other-window
           flycheck-error-list-buffer))))
#+END_SRC

** Code Style
*** Default
**** Disable tabs

#+NAME: default/notabs
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2
              indent-tabs-mode nil)
#+END_SRC

**** Display Line Numbers

#+NAME: default/linenos
#+BEGIN_SRC emacs-lisp
  ; Line Numbering
  (when (>= emacs-major-version 26)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode))

#+END_SRC

*** Code Folding
**** Vimish fold

#+BEGIN_SRC emacs-lisp :tangle no
(use-package vimish-fold
  :init
  (vimish-fold-global-mode 1))
#+END_SRC

**** Hide show

#+NAME: fold/hs
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :straight nil)
#+END_SRC

**** Hide show visual


#+BEGIN_SRC emacs-lisp
(use-package hideshowvis
  :init
  (defface dotemacs-folded-face
      `((((background light)) :background ,(plist-get dotemacs-theme-colors :base00))
        (((background dark)) :background ,(plist-get dotemacs-theme-colors :base03)))
    "Face to highlight `hideshow' overlays.")

  (setq hs-set-up-overlay
        (lambda (ov)
          (when (eq 'code (overlay-get ov 'hs))
            (when (featurep 'vimish-fold)
              (overlay-put
               ov 'before-string
               (propertize "..." 'display
                           (list vimish-fold-indication-mode
                                 'empty-line
                                 'vimish-fold-fringe))))
            (overlay-put
             ov 'display (propertize " [...] " 'face 'dotemacs-folded-face)))))

  (defun hideshowvis/enable ()
    (hideshowvis-minor-mode 1))
  :hook
  (prog-mode . hideshowvis/enable))

#+END_SRC

**** Org Hideshow

#+BEGIN_SRC emacs-lisp
(use-package hideshow-org
  :bind*
  (:map org-mode-map
        ("C-c @" . hs-org/minor-mode)))
#+END_SRC

*** Editorconfig

#+BEGIN_SRC emacs-lisp
;; Editorconfig
(use-package editorconfig
  :if (executable-find "editorconfig")
  :init (editorconfig-mode 1))
#+END_SRC

*** Google C Style

#+NAME: google-c-styleguide
#+BEGIN_SRC emacs-lisp
(use-package google-c-style
  :straight
  (google-c-style
   :host github
   :repo "google/styleguide"
   :branch "gh-pages")
  :init
  (defun dotemacs/google-c-style ()
    (google-set-c-style)
    (google-make-newline-indent))
  :hook
  (c++-mode . dotemacs/google-c-style)
  (java-mode . dotemacs/google-c-style))
#+END_SRC

*** Code Formatting
**** Electric Operator

#+BEGIN_SRC emacs-lisp
(use-package electric-operator)
#+END_SRC

**** Format all
#+NAME: tools-code-format
#+BEGIN_SRC emacs-lisp
(use-package format-all)
#+END_SRC

** Eldoc

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :config
  (when (fboundp 'paredit)
    (eldoc-add-command
     'paredit-backward-delete
     'paredit-close-round)))
#+END_SRC

** Pair Matching
*** Paredit

We could use ~:init~ key to hook the ~enable-paredit-mode~
function to each of the implementing languages like is
done [[https://github.com/tomjakubowski/.emacs.d/blob/master/init.el][here]], but I think adding the hook in the configuration
block of the programming language is easier to follow and
offers more meaningful semantics.

#+NAME: pairs/paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :config
  (progn
    (autoload 'enable-paredit-mode "paredit"
      "Turn on pseudo-structural editing of Lisp code." t)))
   #+END_SRC

*** Smartparens

Like paredit, [[https://github.com/Fuco1/smartparens][smartparens]] is a minor-mode for managing parens pairs. However, it also offers support for curly brackets in JavaScript objects, angle brackets in HTML, and most other major programming languages. I think I the "delete-on-command" behavior of paredit for lisp programming, but in languages where locating unmatched pairs is less comparable to searching for a needle in a haystack, =smartparens= are a great productivity tool.

#+NAME: smartparens-config
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :custom-face
  (sp-show-pair-match-face
   ((t (:underline
        (:color foreground-color :style line)
        :inherit (show-paren-match)))))
  :commands (sp-split-sexp sp-newline sp-up-sexp)
  :custom
  (sp-show-pair-delay
   (or (bound-and-true-p sp-show-pair-delay) 0.2))
  (sp-show-pair-from-inside t)
  (sp-highlight-pair-overlay nil)
  (sp-highlight-wrap-overlay nil)
  (sp-highlight-wrap-tag-overlay nil)
  :init
  (defun smartparens-pair-newline (id action context)
    (save-excursion
      (newline)
      (indent-according-to-mode)))

  (defun smartparens-pair-newline-and-indent (id action context)
    (smartparens-pair-newline id action context)
    (indent-according-to-mode))

  (defun conditionally-enable-smartparens-mode ()
    "enable `smartparens-mode' in the minibuffer, during `eval-expression'."
    (if (eq this-command 'eval-expression)
        (smartparens-mode)))


  (defun smartparens-adaptive-overlay-face ()
    (set-face-attribute 'sp-pair-overlay-face nil
                      :inherit 'lazy-highlight
                      :background nil
                      :foreground nil))


  (defun sp-wrap-inline-math ()
    "Wrap marked region as ordinary LaTeX inline math mode."
    (interactive)
    (sp-wrap-with-pair "$"))

  (defun disable-smartparens ()
      "Disable smartparens when `paredit-mode' is enabled."
    (smartparens-mode -1))

  :config
  (require 'smartparens-config)

  ;; enable globally
  (show-smartparens-global-mode +1)

  (smartparens-adaptive-overlay-face)

  (when (featurep 'paredit)
    (add-hook 'paredit-mode-hook #'disable-smartparens))

  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)

  (sp-pair "{" nil :post-handlers
           '(:add (smartparens-pair-newline-and-indent "RET")))
  (sp-pair "[" nil :post-handlers
           '(:add (smartparens-pair-newline-and-indent "RET"))))
#+END_SRC

*** Rainbow Delimiters

#+NAME: pair/rainbow
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC

*** Parinfer

Disabling for now.

#+BEGIN_SRC emacs-lisp
(use-package parinfer
  :bind
  (("C-," . parinfer-toggle-mode))
  :custom
  (parinfer-extensions
   '(defaults smart-yank pretty-parens paredit)))

#+END_SRC

***** Lispy

#+NAME: lispy-config
#+BEGIN_SRC emacs-lisp
(use-package lispy
  :config
  (when (functionp 'lispy-set-key-theme)
    (lispy-set-key-theme '(special paredit c-digits))))

#+END_SRC

*** Gtags
:PROPERTIES:
:ID:       0E4B8051-2EB4-454F-BBB0-BD57A5AEAFA6
:END:

#+NAME: ggtags-spec
#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :if (and (getenv "GTAGSLABEL") (executable-find "global"))
  :custom (ggtags-highlight-tag nil))
#+END_SRC

** Version Control
*** Ediff

#+NAME: vcs/ediff
#+BEGIN_SRC emacs-lisp
(use-package ediff
  :custom
  (ediff-diff-options "-w"))
#+END_SRC

*** Git
**** git modes

#+NAME: git/modes
#+BEGIN_SRC emacs-lisp
(use-package git-modes
  :straight t
  :mode (".projectile\\'" . gitignore-mode))
#+END_SRC

**** Magit
:PROPERTIES:
:ID:       AE7AB6CA-A097-4CB0-9B13-2B131CC2F5D9
:CUSTOM_ID: magit
:END:


[[https://github.com/magit/magit][Magit]] describes itself as one of two git porcelains, the other being
git itself.

A git porcelain is jargon for a program that features a user-friendly
vcs interface, as opposed to lower-level scripting commands.

It's not a vitrified ceramic commonly used for decorative tableware.
Magit would not be very good at that.

As a git client though, magit is awesome.

***** magit mode

#+NAME: magit/mode
#+BEGIN_SRC emacs-lisp
(use-package magit
    :defines (magit-mode-hook)
    :bind
    (("C-c v v" . magit-status)
     ("C-c v m" . magit-merge)
     ("C-c v b" . magit-blame)
     ("C-c v C" . magit-clone)
     ("C-c v i" . magit-init)
     ("C-c v l" . magit-log-buffer-file)
     ("C-c v c" . magit-checkout)
     ("C-c v f" . magit-stage-file)
     ("C-c v p" . magit-pull)
     ("C-c v P" . magit-push)
     ("C-c v S" . magit-stash))

    :init
    (which-key-add-key-based-replacements "C-c v" " Magit")

    (push '(( nil . "magit-\\(.+\\)") . (nil . " \\1"))
          which-key-replacement-alist)
    :custom
    (magit-save-repository-buffers 'dontask)
    (magit-completing-read-function 'ivy-completing-read))
#+END_SRC

***** Magit topgit

To configure:

#+BEGIN_EXAMPLE shell
git config --global --add magit.extension topgit
#+END_EXAMPLE


#+NAME: magit/topgit
#+BEGIN_SRC emacs-lisp
(use-package magit-topgit
  :ensure-system-package tg
  :demand t
  :after (magit)
  :hook
  (magit-mode . turn-on-magit-topgit)
)
#+END_SRC

***** Magit stgit

To configure:

#+BEGIN_SRC shell
git config --global --add magit.extension stgit
#+END_SRC

#+NAME: magit/stgit
#+BEGIN_SRC emacs-lisp
(use-package magit-stgit
  :ensure-system-package stg
  :after (magit)
  :demand t
  :hook
  (magit-mode . magit-stgit-mode))
#+END_SRC

***** Magit imerge

#+BEGIN_SRC emacs-lisp
(use-package magit-imerge
  :ensure-system-package git-imerge
  :after (magit)
  :demand t)
#+END_SRC

***** Magithub

[[https://github.com/vermiculus/github][Magithub]] offers an interface to github to complement magit.

#+NAME: magit/hub
#+BEGIN_SRC emacs-lisp
(use-package magithub
  :after (magit)
  :commands magithub-dispatch-popup
  :bind (:map magit-status-mode-map
	      ("@" . magithub-dispatch-popup))
  :config
  (progn
    (magithub-feature-autoinject t)))
#+END_SRC

***** Magit org todos

#+BEGIN_SRC emacs-lisp
(use-package magit-org-todos)
#+END_SRC

***** Orgit

Insert Org links to magit buffers.

#+NAME: magit/orgit
#+BEGIN_SRC emacs-lisp
(use-package orgit)
#+END_SRC

**** gist.el

Emacs integration for gist.github.com.

[[https://github.com/defunkt/gist.el][Gist]] requires generating a personal access token with ~gist~ scope, and
optionally ~user~ and ~repo~ scopes.

#+NAME: git/gist
#+BEGIN_SRC emacs-lisp
(use-package gist
  :bind
  (("C-c C-g l" . gist-list)
   ("C-c C-g r" . gist-region)
   ("C-c C-g b" . gist-buffer)
   ("C-c C-g p" . gist-buffer-private)
   ("C-c C-g B" . gist-region-or-buffer)
   ("C-c C-g P" . gist-region-or-buffer-private))
  :init
  (push '(( nil . "gist-\\(.+\\)") . (nil . " \\1"))
        which-key-replacement-alist)

  (which-key-add-key-based-replacements
      "C-c C-g" " Gist"))
#+END_SRC

**** Git timemachine

Travel back in time (to your last commit).

#+NAME: git/timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :bind
  ("C-c v t" . git-timemachine-toggle)
  :config
  (setq git-timemachine-abbreviation-length 7)
  (which-key-add-key-based-replacements
    "C-c v t" " Timemachine"))
#+END_SRC

**** Git messenger

Pop-up feature for viewing the last git commit.

#+NAME: git/messenger
#+BEGIN_SRC emacs-lisp
(use-package git-messenger
  :bind
  ("C-c C-v m" . git-messenger:popup-message))
#+END_SRC

**** Git Gutter
***** git gutter+

#+NAME: gutter/+
#+BEGIN_SRC emacs-lisp
(use-package git-gutter+
  :custom
  (git-gutter+-disabled-modes '(image-mode org-mode))
  :init
  (global-git-gutter+-mode))
#+END_SRC

***** git gutter fringe+

#+NAME:
#+BEGIN_SRC emacs-lisp
(use-package git-gutter-fringe+
  :hook
  (org-mode . git-gutter-fr+-minimal))
#+END_SRC

*** Mercurial
**** Monky

Monky provides an interactive interface for mercurial. It's
essentially to ~hg~ what [[#magit][magit]] is for ~git~.

#+NAME: hg/monky
#+BEGIN_SRC emacs-lisp
(use-package monky
  :custom
  (monky-process-type 'cmdserver))
#+END_SRC

**** ahg

#+NAME: hg/ahg
#+BEGIN_SRC emacs-lisp
(use-package ahg)
#+END_SRC

** Cloud
*** ecloud

#+BEGIN_SRC emacs-lisp
(use-package ecloud
  :ensure-system-package
  (ecloud . azure-cli)
  :straight
  (ecloud :host github
          :type git
          :repo "techniumlabs/ecloud"))

#+END_SRC

*** Docker

#+BEGIN_SRC emacs-lisp
(use-package docker)
#+END_SRC

**** Dockerfile

#+NAME: docker/dockerfile
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile\\'")
#+END_SRC

**** Docker Compose

#+NAME: docker/compose
#+BEGIN_SRC emacs-lisp
(use-package docker-compose-mode
    :mode ("docker-compose.yml\\'" . docker-compose-mode))

#+END_SRC

*** AWS

#+NAME: devops/aws
#+BEGIN_SRC emacs-lisp
(use-package aws
  :config
  (progn
    (autoload 'ec2-desribe-instances "aws")
    (autoload 'ec2-describe-volumes "aws")
    (autoload 'ec2-describe-snapshots "aws")
    (autoload 'ec2-describe-group "aws")
    (autoload 'ec2-get-console "aws")))
#+END_SRC

** Prog Utils
*** wakatime

Automate time tracking with [[https://github.com/wakatime/wakatime-mode][wakatime]].

#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
    :if (executable-find "wakatime")
    :hook
    (prog-mode . wakatime-mode)
    :init
    (defun wakatime-dashboard ()
      (interactive)
      (browse-url "https://wakatime.com/dashboard"))
    :custom
    (wakatime-cli-path
    "/usr/local/lib/python3.7/site-packages/wakatime/cli.py")
    (wakatime-python-bin
      "/usr/local/Cellar/python/3.7.2/bin/python3"))
#+END_SRC

*** Logging
**** Log view

#+NAME: logview
#+BEGIN_SRC emacs-lisp
(use-package logview)
#+END_SRC

**** Log nav

#+NAME: lognav
#+BEGIN_SRC emacs-lisp
(use-package lognav-mode)
#+END_SRC

*** floobits

#+BEGIN_SRC emacs-lisp
(use-package floobits
  :if (file-exists-p (user-home ".floorc.json")))

#+END_SRC

*** rmsbolt

#+BEGIN_SRC emacs-lisp
(use-package rmsbolt)
#+END_SRC

** Languages
*** Assembly

- See Spacemacs [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/asm/][ASM layer]].
**** ASM Mode

#+NAME: asm/mode
#+BEGIN_SRC emacs-lisp
(use-package asm-mode
  :mode (("\\.64sa\\'" . asm-mode)
         ("\\.64da\\'" . asm-mode)
         ("\\.32sa\\'" . asm-mode)
         ("\\.32da\\'" . asm-mode)))
#+END_SRC

**** NASM mode

#+NAME: asm/nasm
#+BEGIN_SRC emacs-lisp
(use-package nasm-mode
  :mode
  (("\\.[n]*\\(asm\\|s\\)\\'" . nasm-mode)))

#+END_SRC

**** ASM Init x86 Lookup

#+NAME: asm/x86-lookup
#+BEGIN_SRC emacs-lisp
(use-package x86-lookup
  :init
  (when (featurep 'pdf-tools)
    (setq x86-lookup-browse-pdf-function
          'x86-lookup-browse-pdf-pdf-tools))

  (defun x86-lookup-install-pdf ()
    (interactive)
    (let ((install-directory (emacs-var-dir "x86-lookup"))
          (remote-url "https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf"))
      (unwind-protect
          (unless (file-directory-p install-directory)
            (make-directory install-directory)
            (cd install-directory)
            (url-retrieve
             remote-url
             (lambda (s)
               (write-region (point) (point-max) "manual.pdf"))))
        (setq x86-lookup-pdf
              (expand-file-name "manual.pdf" install-directory)))))

  :init
  (x86-lookup-install-pdf))

#+END_SRC

*** C/C++
**** cmake

#+NAME: cc/cmake
#+BEGIN_SRC emacs-lisp
(use-package cmake-mode
  :mode (("CMakeLists\\.txt\\'" . cmake-mode)
         ("\\.cmake\\'" . cmake-mode))
  :init
  (with-eval-after-load 'projectile
    (add-to-list 'projectile-project-root-files-top-down-recurring
                 "compile_commands.json"))

  (defun cmake-build-compilation-database ()
    (interactive)
    (let* ((project-directory (cond (projectile-project-root
                                     projectile-project-root)
                                    ((eq 'major-mode 'dired-mode)
                                     dired-directory)
                                    (t default-directory)))
           (build-directory (f-join project-directory "build"))
           (compiledb (f-join build-directory "compile_commands.json")))
      (when (f-exists? (f-join project-directory "CMakeLists.txt"))
        (if-not (f-exists? build-directory)
            (mkdir build-directory))
        (with-temp-buffer
          (shell-command "make clean")
          (cd build-directory)
          (cmake-command-run "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON" project-directory))
        (if (f-exists? compiledb)
            (make-symbolic-link (f-slash project-directory) build-directory t)))))

  (defun cmake-mode-dash-docsets ()
    (setq-local dash-plugin-keywords '("cmake")))

  :hook (cmake-mode . cmake-mode-dash-docsets))

#+END_SRC

**** Cquery

#+NAME: cc/cquery
#+BEGIN_SRC emacs-lisp

(use-package cquery
    :commands lsp-cquery-enable
    :if (executable-find "cquery")
    :custom
    (cquery-executable (executable-find "cquery"))
    (cquery-extra-init-params '(:index (:comments 2)
                                :cacheFormat "msgpack"
                                :completion (:detailedLabel t)))
    :init
    (defun cquery/enable ()
      "Enable cquery in the workspace."
      (condition-case nil
          (lsp-cquery-enable)
        (user-error "%s" "cquery didn't work")))

    :hook
    ((c-mode c++-mode)  . cquery/enable)
    ((c-mode c++-mode) . dotemacs/flycheck-enable-hook)

    :config

    ;; Alternatively, use lsp-ui-peek interface
    ;; (setq cquery-sem-highlight-method 'font-lock)
    ;; alternatively
    (setq cquery-sem-highlight-method 'overlay)

    ;; For rainbow semantic highlighting
    (with-eval-after-load 'lsp-ui-mode
      (lsp-ui-peek-find-custom 'base "$cquery/base")
      (lsp-ui-peek-find-custom 'callers "$cquery/callers")
      (lsp-ui-peek-find-custom 'vars "$cquery/vars"))

    (cquery-use-default-rainbow-sem-highlight)

    (with-eval-after-load 'projectile
        (add-to-list 'projectile-project-root-files-top-down-recurring
                     ".cquery")))

#+END_SRC

**** rtags

#+NAME: cc/rtags
#+BEGIN_SRC emacs-lisp
(use-package rtags
    :ensure-system-package (rdm . rtags)
    :hook
    ((c-mode c++-mode objc-mode) . rtags-start-process-unless-running))

#+END_SRC

**** llvm mode

#+NAME: cc/llvm
#+BEGIN_SRC emacs-lisp
(use-package llvm-mode
    :straight nil
    :load-path "~/.emacs.d/etc/local/llvm-mode"
    :init
    (require 'llvm-mode)
    (require 'tablegen-mode))
#+END_SRC

**** Clang Tidy

#+NAME: cc/clang-tidy
#+BEGIN_SRC emacs-lisp
(use-package flycheck-clang-tidy
    :after flycheck
    :if (executable-find "clang-tidy")
    :init
    (defun clang-tidy/enable ()
      (when (and (-non-nil projectile-project-root)
                 (string= projectile-project-type "cmake"))
        (when (fboundp 'flycheck-mode)
          (flycheck-clang-tidy-setup))))
    (add-hook 'c-mode-common-hook 'clang-tidy/enable))

#+END_SRC

**** Clang Format

#+NAME: cc/clang-format
#+BEGIN_SRC emacs-lisp
(use-package clang-format
    :if (executable-find "clang-format")
    :bind (:map c-mode-base-map
                ("C-c i" . clang-format-region)
                ("C-c u" . clang-format-buffer))
    :custom
    (clang-format-style-option "google"))

#+END_SRC

*** Common Lisp

Configuration for common-lisp.

**** common lisp mode

#+NAME: cl/mode
#+BEGIN_SRC emacs-lisp
(use-package lisp-mode
  :straight nil
  :init
  (defun common-lisp-setup ()
    "setup for common lisp."
    (if (fboundp 'paredit-mode)
        (paredit-mode +1))
    (if (fboundp 'highlight-symbol-mode)
        (highlight-symbol-mode +1))
    (if (eq system-type 'darwin)
        (setq-local dash-plugin-keywords '("lisp"))))
  :hook
  (lisp-mode . common-lisp-setup))
#+END_SRC

**** Slime

[[https://common-lisp.net/project/slime/][SLIME]] is The Superior Lisp Interaction Mode for Emacs.

#+NAME: cl/slime
#+BEGIN_SRC emacs-lisp
(use-package slime
  :defines
  (slime-complete-symbol*-fancy
   slime-completion-at-point-functions)
  :init
  (setq slime-contribs
        '(slime-fancy slime-indentation slime-scratch)
	      inferior-lisp-program "clisp"
      	;; enable fuzzy matching in code buffer and SLIME REPL
      	slime-complete-symbol*-fancy t
      	slime-completion-at-point-functions 'slime-fuzzy-complete-symbol)
  (defun slime/disable-smartparens ()
    "Disable smartparens in slime repl buffers."
    (when (fboundp 'smartparens-mode)
      (smartparens-strict-mode -1)
      (turn-off-smartparens-mode)))
  :hook
  (slime-repl-mode . slime/disable-smartparens))
#+END_SRC

*** Clojure

**** Clojure Mode
:PROPERTIES:
:ID:       B09DFF0C-3404-483C-824F-E51A5CE50BCD
:END:

Everything about [[https://gihub.com/clojure-emacs/clojure-mode][clojure]], is awesome. That's
before we even get to [[#cider][CIDER]]...:beer::raised_hands_tone3:

Provides key bindings and font-locking for Clojure.

#+NAME: clj/mode
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :custom (clojure-indent-style :always-indent)

  :mode (("\\.edn$"   . clojure-mode)
         ("\\.cljs$"  . clojurescript-mode)
         ("\\.cljx$"  . clojurex-mode)
         ("\\.cljsc$" . clojurec-mode))

  :hook ((clojure-mode . enable-paredit-mode)
         (clojure-mode . show-paren-mode))

  :config

  (defun dotemacs/clj-dash-docsets ()
    "Keywords for Clojure Docsets via Dash.app."
    (setq-local dash-plugin-keywords '("clojure")))

  (defun dotemacs/clj-style-compojure ()
    "Indendation for macros defined in compojure routing framework.

     See https://github.com/weavejester/compojure/wiki/Emacs-indentation."

    (define-clojure-indent
        (defroutes 'defun)
        (GET 2)
        (POST 2)
        (PUT 2)
        (DELETE 2)
        (HEAD 2)
        (ANY 2)
        (OPTIONS 2)
        (PATCH 2)
        (rfn 2)
        (let-routes 1)
        (context 2)))


  (defun dotemacs/clj-style-om-next ()
    "Indendation for om-next macros."
      (put-clojure-indent 'defui '(1 nil nil (1)))
      (put-clojure-indent 'dom/div 1))

  (defun dotemacs/clj-style-guide ()
    "Styleguide for clojure."
    (dotemacs/clj-style-compojure)
    (dotemacs/clj-style-om-next))

  (add-hook 'clojure-mode-hook #'dotemacs/clj-dash-docsets)
  (add-hook 'clojure-mode-hook #'dotemacs/clj-style-guide))
#+END_SRC

**** Clojure Mode Extra Font Locking

Additional syntax highlighting for ~clojure-mode~.

#+NAME: clj/extra-font-locking
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode-extra-font-locking
  :config
  (defun clj/enable-extra-font-locking ()
    (require 'clojure-mode-extra-font-locking))
  :hook
  (clojure-mode . clj/enable-extra-font-locking))
#+END_SRC

**** CIDER
:PROPERTIES:
:ID:       324C7B10-8B92-4C49-8FAC-702C65C7A2EE
:CUSTOM_ID: cider
:END:

[[https://github.com/clojure-emacs/cider][Clojure Interactive Development Environment that Rocks for Emacs]]

#+NAME: clj/cider
#+BEGIN_SRC emacs-lisp
(use-package cider
  :custom
  (cider-repl-use-clojure-font-lock t)
  (cider-repl-result-prefix ";; => ")
  (cider-repl-wrap-history t)
  (cider-repl-history-size 3000)
  (cider-show-error-buffer nil)
  (nrepl-hide-special-buffers t)
  :hook
  (clojure-mode . cider-mode)
  ((cider-mode cider-repl-mode) . eldoc-mode)
  ((cider-mode cider-repl-mode) . cider-company-enable-fuzzy-completion)
  (cider-repl-mode . subword-mode))
#+END_SRC

**** Clojure Refactor

#+NAME: clj/refactor
#+BEGIN_SRC emacs-lisp
(use-package clj-refactor
  :init
  (defun clj/refactor-enable ()
    "Enable clj-refactor in clojure-mode."
    (clj-refactor-mode 1)
    ;; For adding reuire/use/import statements
    (yas-minor-mode 1)
    ;; Unbinds `cider-macroexpand-1'
    (cljr-add-keybindings-with-prefix "C-c C-m"))

  :hook (clojure-mode . clj/refactor-enable))

#+END_SRC

**** ClojureScript

#+NAME: clj/cljs
#+BEGIN_SRC emacs-lisp
;; elein

;; Cljsbuild

#+END_SRC

***** elein

[[https://github.com/remvee/elein][Elein]] rovides support for leiningen commands in Emacs.

#+NAME: cljs/elein
#+BEGIN_SRC emacs-lisp
(use-package elein
  :if (executable-find "lein")
  :straight t)
#+END_SRC

***** Cljsbuild

Minor mode offering ~lein cljsbuild~ commands for the Leiningen [[https://github.com/emezeske/lein-cljsbuild][plugin]].

#+NAME: cljs/build
#+BEGIN_SRC emacs-lisp
(use-package cljsbuild-mode
  :if (executable-find "lein")
  :hook ((clojure-mode clojurescript-mode) . cljsbuild-mode))
#+END_SRC

*** Emacs Lisp
**** Emacs lisp mode

#+NAME: elisp/mode
#+BEGIN_SRC emacs-lisp
(use-package emacs-lisp-mode
  :straight nil
  :init
  (defun emacs-lisp/setup ()
    "Setup elisp."
    (when (require 'paredit nil t)
	    (paredit-mode +1))
    (when (require 'highlight-symbol nil t)
	      (highlight-symbol-mode +1))
    (when (require 'rainbow-delimiters nil t)
      (rainbow-delimiters-mode +1))
    (setq lisp-indent-function 'lisp-indent-function)
    (setq-local dash-plugin-keywords '("elisp")))

  :hook
  (emacs-lisp-mode . emacs-lisp/setup))
#+END_SRC

**** lisp extra fontlocking

#+BEGIN_SRC emacs-lisp
(use-package lisp-extra-font-lock
  :init
  (lisp-extra-font-lock-global-mode +1))
#+END_SRC

**** Emacs Lisp  Format

#+NAME: elisp/format
#+BEGIN_SRC emacs-lisp
  (use-package elisp-format
    :custom
    (elisp-format-column 80))
#+END_SRC

*** Groovy

#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :mode  "\\.gradle\\'"
  :init
  (defun groovy/setup ()
    "Setup `groovy-mode' buffers."
    (setq groovy-indent-offset 2
          tab-width 4
          indent-tabs-mode nil
          c-indent-comments-syntactically-p t))
  :hook
  (groovy-mode . groovy-setup))
#+END_SRC

*** Java
**** java mode
#+NAME: java/mode
#+BEGIN_SRC emacs-lisp
(use-package java-mode
  :straight nil
  :init
  (defun java/setup ()
    "Setup `java-mode' buffers."
    (c-set-offset 'arglist-close '0)
    (setq indent-tabs-mode nil
          tab-width 2
          c-basic-offset 2)
    (setq-local dash-plugin-keywords '("java" "gradle" "groovy")))
  :hook
  (java-mode . java/setup))

#+END_SRC

**** Autodisass Java Bytecode
:PROPERTIES:
:ID:       892B3341-D8D3-4E12-A540-5A19DD54A459
:END:

The [[https://github.com/gbalats/autodisass-java-bytecode][autodisass-java-bytecode]] package enables automatic disassembly of
Java bytecode inside Emacs buffers.

#+NAME: java/disass
#+BEGIN_SRC emacs-lisp
(use-package autodisass-java-bytecode)
#+END_SRC

**** Gradle Mode
:PROPERTIES:
:ID:       0D4DEC79-5E2D-48D0-A8B1-38E2432565C8
:CUSTOM_ID: gradle-mode
:END:

Gradle is a build tool for Java. It's awesome.

#+NAME: java/gradle
#+BEGIN_SRC emacs-lisp
(use-package gradle-mode
  :if (executable-find "gradle")
  :hook
  (java-mode . gradle-mode))
#+END_SRC

**** Lsp Java
***** Lsp Java Mode

#+NAME: lsp/java
#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :defines (lsp-java-enable)
  :custom
  (lsp-java-server-install-dir
   (file-name-as-directory
    (emacs-var-dir "eclipse.jdt.ls" "server")))
  (lsp-highlight-symbol-at-point nil)
  (lsp-ui-sideline-update-mode 'point)
  (lsp-eldoc-render-all nil)
  (lsp-java-compilation-guess-arguments t))

#+END_SRC

***** Lsp Java Treemacs

#+NAME: lsp/treemacs
#+BEGIN_SRC emacs-lisp
(use-package lsp-java-treemacs
  :straight lsp-java
  :after (treemacs))
#+END_SRC

**** Dap

#+NAME: java/dap
#+BEGIN_SRC emacs-lisp
;; Dap Mode

;; Dap Java

#+END_SRC

***** Dap Java

#+NAME: dap/java
#+BEGIN_SRC emacs-lisp
(use-package dap-java
  :straight dap-mode
  :after (lsp-java))
#+END_SRC

**** Javadoc lookup

#+NAME: java/doc
#+BEGIN_SRC emacs-lisp
(use-package javadoc-lookup
  :bind
  ("C-h j" . javadoc-lookup)
  :custom
  (javadoc-lookup-completing-read-function #'ivy-completing-read))
#+END_SRC

*** JavaScript
**** js2 mode

#+NAME: js/2
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :custom
  (js-indent-level 2)
  :mode (("\\.js\\'" . js2-mode)
         ("\\.mjs\\'" . js2-mode))
  :interpreter "node"
  :hook (js2-mode . lsp))
#+END_SRC

**** JSON

#+NAME: js/json
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :init
  (defun json-mode-style ()
    "Styleguide for JSON Mode."
    (set (make-local-variable 'js-indent-level) 2))

    (defun json-mode-faces ()
    (let ((foreground (face-foreground 'font-lock-variable-name-face)))
      (face-remap-add-relative 'font-lock-keyword-face
                               `(:slant normal :foreground ,foreground))))
  (defun json-inhibit-message ()
      (set (make-local-variable 'inhibit-message) t))

  :hook
  (json-mode . json-mode-style)
  (json-mode . json-mode-faces)
  (json-mode . json-inhibit-message))

#+END_SRC

**** Node JS
***** Add Node Modules Path

#+NAME: node/modules
#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path
  :if (executable-find "node")
  :init
  (progn
    (add-hook 'js-mode-hook #'add-node-modules-path)))
#+END_SRC

***** NPM Mode

#+NAME: node/npm
#+BEGIN_SRC emacs-lisp
(use-package npm-mode
    :if (executable-find "npm")
    :init
    (el-patch-feature npm-mode)
    (el-patch-defun npm-mode--exec-process (cmd)
      "Execute a process running CMD."
      (message (concat "Running " cmd))
      (compile cmd (el-patch-add t)))

    (defun npm-mode-npm-install-global (dep)
      (interactive "sEnter package name: ")
      (npm-mode--exec-process (format "npm i -g %s" dep)))

    :config
    (npm-global-mode)

    :hook
    (js-mode . npm-mode))
#+END_SRC

***** Yarn mode

#+NAME: node/yarn
#+BEGIN_SRC emacs-lisp
(use-package yarn-mode
    :if (executable-find "yarn"))
#+END_SRC

***** NVM

#+NAME: node/nvm
#+BEGIN_SRC emacs-lisp
(use-package nvm
  :if (executable-find "nvm"))
#+END_SRC

**** TypeScript

#+NAME: js/typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :custom
    (typescript-indent-level 2)
    :hook
    (typescript-mode . lsp)
    (typescript-mode . subword-mode))
#+END_SRC

**** Tide mode

#+NAME: js/tide
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :functions (tide/setup)
    :after (:all typescript-mode)
    :demand t
    :init
    (defun tide/setup ()
      "Enable Tide Mode for Typescript."
      (tide-setup)
      (when (fboundp 'flycheck-mode)
        ;; add typescript checkers
        (flycheck-add-mode 'typescript-tslint 'typescript-mode)
        ;; add javascript checkers
        (flycheck-add-next-checker 'javascript-eslint
                                   'javascript-tide
                                   'append)
        (setq flycheck-check-syntax-automatically '(save mode-enabled)))
      (eldoc-mode +1))


    :hook
    (before-save . tide-format-before-save)
    (typescript-mode . tide/setup)
    (typescript-mode . tide-hl-identifier-mode))
#+END_SRC

**** rjsx-mode

Real jsx support.

#+NAME: js/rjsx
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :mode "\\.jsx\\'")
#+END_SRC

**** Flycheck Jest

#+NAME: js/jest
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-jest
    :after flycheck
    :init
    (flycheck-jest-setup))

#+END_SRC

**** CoffeeScript

#+NAME: js/coffee
#+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :mode ("\\.coffee\\'" . coffee-mode))
#+END_SRC

**** Indium

#+NAME: js/indium
#+BEGIN_SRC emacs-lisp
(use-package indium
  :bind (:map indium-interaction-mode-map
                ("C-M-b" . indium-eval-buffer))
    :init
    (el-patch-feature indium-nodejs)
    (with-eval-after-load 'indium-nodejs
      (el-patch-defun indium-nodejs--process-filter-function (conf)
        "Return a process filter function for CONF.
The function detects the socket URL to connect to from the
process outputp."
        (let ((connected))
          (lambda (process output)
            ;; Append output to the process buffer
            (with-current-buffer (process-buffer process)
	            (goto-char (point-max))
	            (insert output)
              (el-patch-add
                (save-excursion
                  (goto-char (point-min))
                  (ansi-color-apply-on-region (point-min) (point-max)))))
            (when (and (not connected)
		                 (string-match-p "Debugger listening on" output))
	            ;; Node will keep outputing the "Debugger listening on" message after
	            ;; each deconnection, so only try to connect one.
	            (setq connected t)
	            (let-alist conf
	              (indium-client-connect (file-name-directory .projectFile) .name)))))))


    (cl-defun chrome-debugger-launch (&optional
                                        (port "3000")
                                        (host "localhost")
                                        (type "http"))
      "Launch a chromium debugger process on HOST using PORT and protocol TYPE.

      Note this will kill any running instances of Chromium."

      (interactive (list
                    (read-string "Port: " "3000")
                    (read-string "Host: " "localhost")
                    (read-string "Type: " "http")))

      (unless (featurep 'secrets)
        (require 'secrets))

      (if (boundp 'google-api-key)
          (setenv "GOOGLE_API_KEY" google-api-key))
      (if (boundp 'google-api-key)
          (setenv "GOOGLE_DEFAULT_CLIENT_ID" google-default-client-id))
      (if (boundp 'google-default-client-secret)
          (setenv "GOOGLE_DEFAULT_CLIENT_SECRET" google-default-client-secret))
      (let ((process-names (--> (process-list)
                                (mapcar (lambda (p) (process-name p)) it)))
            (process (get-process "chromium"))
            (ip (concat type "://" host ":" port))
            (chromium-program browse-url-chromium-program))
        (if (shell-command-to-list "pgrep \"Chromium\"")
            (shell-command "killall Chromium"))
        (if (process-live-p process)
            (kill-process process))
        (start-process "chromium" (get-buffer-create "chromium")
                       chromium-program "--remote-debugging-port=9222" ip)))
    :hook
    (js-mode . indium-interaction-mode))
#+END_SRC

*** Python
**** Python Mode

#+NAME: py/python
#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :init
  (when (executable-find "ipython3")
    (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
    (setq python-shell-interpreter "ipython3"
          python-shell-interpreter-args "-i"))
  :config
  (defun python-dash-docsets ()
    (setq-local dash-plugin-keywords
                '("python" "django" "twisted" "sphinx"
                  "flask" "tornado" "sqlalchemy" "numpy"
                  "scipy" "salt" "pandas" "matplotlib"
                  "cvp")))
  (when (eq system-type 'darwin)
    (add-hook 'python-mode-hook #'python-dash-docsets))
  :hook
  (python-mode . lsp))
#+END_SRC

**** Pyenv
***** Pyenv mode

#+NAME: pyenv/mode
#+BEGIN_SRC emacs-lisp
  (use-package pyenv-mode
    :if (executable-find "pyenv")
    :init
    (add-to-list 'exec-path (user-home ".pyenv" "shims"))
    (setenv "WORKON_HOME" (file-name-as-directory (user-home ".pyenv" "versions")))
    (pyenv-mode)
    :bind
    ("C-x p e" . pyenv-activate-current-project)
    ("C-x p s" . pyenv-mode-set)
    :commands

    (pyenv-mode-set pyenv-mode-unset pyenv-mode-versions)

    :config

    (defvar pyenv-current-version nil nil)

    (defun pyenv-init()
      "Initialize pyenv's current version to the global one."
      (let ((global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global"))))
        (message (concat "Setting pyenv version to " global-pyenv))
        (pyenv-mode-set global-pyenv)
        (setq pyenv-current-version global-pyenv)))

    (add-hook 'after-init-hook 'pyenv-init)

    (progn
      (with-eval-after-load 'projectile
        (defun projectile-pyenv-mode-set ()
          "Set pyenv version matching project name."
          (let ((project (projectile-project-name)))
            (if (member project (pyenv-mode-versions))
                (pyenv-mode-set project)
              (pyenv-mode-unset))))

        (add-hook 'projectile-after-switch-project-hook
                  'projectile-pyenv-mode-set))

      ;; http://rakan.me/emacs/python-dev-with-emacs-and-pyenv/
      (defun pyenv-activate-current-project ()
        "Automatically activates pyenv version if .python-version file exists."
        (interactive)
        (let ((python-version-directory (locate-dominating-file (buffer-file-name) ".python-version")))
          (if python-version-directory
              (let* ((pyenv-version-path (f-expand ".python-version" python-version-directory))
                     (pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8))))
                (pyenv-mode-set pyenv-current-version)
                (message (concat "Setting virtualenv to " pyenv-current-version))))))))
#+END_SRC

**** Pyenv Auto Set

#+NAME: pyenv/auto
#+BEGIN_SRC emacs-lisp
(use-package pyenv-mode-auto)
#+END_SRC

**** Virtualenv Wrapper

#+NAME: py/virtualenvwrapper
#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
    :init
    (setq venv-dirlookup-names '(".pyenv" ".venv"))
    (setq venv-location (getenv "WORKON_HOME"))
    :config
    (when (fboundp 'projectile-mode)
      (setq projectile-switch-project-action
            '(lambda ()
              (venv-projectile-auto-workon)
              (projectile-find-file)))))

#+END_SRC

**** Pyvenv

#+NAME: py/venv
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
    :requires virtualenvwrapper
    :init
  (pyvenv-mode +1))
#+END_SRC

**** with venv

#+BEGIN_SRC emacs-lisp
(use-package with-venv)
#+END_SRC

**** livepy mode

#+BEGIN_SRC emacs-lisp
(use-package live-py-mode)
#+END_SRC

**** Pip Requirements

#+NAME: py/pip
#+BEGIN_SRC emacs-lisp
(use-package pip-requirements
    :straight t)
#+END_SRC

**** Pydoc

#+NAME: py/doc
#+BEGIN_SRC emacs-lisp
(use-package pydoc
    :straight t)
#+END_SRC

**** EIN

The [[https://github.com/millejoh/emacs-ipython-notebook][emacs ipython notebook]] client.

#+NAME: py/notebook
#+BEGIN_SRC emacs-lisp
(use-package ein
    :config
    (setq ein:use-smartrep t))
#+END_SRC

*** Prolog

#+NAME: lang/prolog
#+BEGIN_SRC emacs-lisp
(use-package prolog-mode
  :straight nil
  :mode "\\.pl\\'")
#+END_SRC

*** Ruby
**** Ruby Mode

#+NAME: ruby/mode
#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :mode "\\.rb\\'"
  :interpreter "ruby"
  :config

  (defun dotemacs/ruby-dash-docsets ()
    (setq-local dash-plugin-keywords '("ruby" "rails")))


  (add-hook 'ruby-mode-hook #'dotemacs/ruby-dash-docsets))

#+END_SRC

**** Enhanced Ruby Mode

#+NAME: ruby/enhanced
#+BEGIN_SRC emacs-lisp
(use-package enh-ruby-mode
    :after ruby-mode
    :demand t
    :mode "\\.rb\\'"
    :config
    (add-hook 'enh-ruby-mode-hook #'dotemacs/ruby-dash-docsets))
#+END_SRC

**** Inf ruby

#+NAME: ruby/inf
#+BEGIN_SRC emacs-lisp
(use-package inf-ruby
    :hook
    ((ruby-mode enh-ruby-mode) . inf-ruby-minor-mode)
    (compilation-filter . inf-ruby-auto-enter))
#+END_SRC

**** RVM

#+NAME: ruby/rvm
#+BEGIN_SRC emacs-lisp
(use-package rvm
  :init
  (rvm-use-default))
#+END_SRC

**** Robe

#+NAME: ruby/robe
#+BEGIN_SRC emacs-lisp
  (use-package robe
    :init
    ;; ensure `rvm' activates the proper project Ruby
    ;; before `robe-start' runs.
    (when (featurep 'rvm)
      (defadvice inf-ruby-console-auto
          (before activate-rvm-for-robe activate)
        (rvm-activate-corresponding-ruby)))

    (defun robe/enable ()
      "Enable `robe-mode'."
      (robe-mode 1)
      (when (fboundp 'company-mode)
        (let ((backends (cons 'company-robe company-backends)))
          (set (make-local-variable 'company-backends) backends))))

    :hook
    ((ruby-mode enh-ruby-mode) . robe/enable))
#+END_SRC

**** Yard Mode

#+NAME: ruby-yard
#+BEGIN_SRC emacs-lisp
(use-package yard-mode
  :hook
  ((ruby-mode enh-ruby-mode) . yard-mode)
  ((ruby-mode enh-ruby-mode) . eldoc-mode))

#+END_SRC

**** Homebrew mode
Mode for editing Homebrew formula.

#+BEGIN_SRC emacs-lisp
(use-package homebrew-mode)
#+END_SRC

*** Ocaml
**** Utop

#+NAME: ocaml/utop
#+BEGIN_SRC emacs-lisp
(use-package utop)
#+END_SRC

**** Merlin

#+NAME: ocaml/merlin
#+BEGIN_SRC emacs-lisp
(use-package merlin
  :custom
  (merlin-command 'opam)
  (merlin-error-after-save nil))
#+END_SRC

**** caml mode

#+NAME: ocaml/caml
#+BEGIN_SRC emacs-lisp
(use-package caml
  :hook
  (caml . ocaml/merlin))
#+END_SRC

**** Tuareg

#+NAME: ocaml/tuareg
#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :mode
    ("\\.ml\\'" . tuareg-mode)

    :init
    (defun tuareg/prettify-symbols ()
      "Enable `prettify-symbols-mode' for `tuareg-mode'."
      (when (functionp 'prettify-symbols-mode)
        (prettify-symbols-mode)))

    :hook
    (tuareg-mode . tuareg/prettify-symbols)
    (tuareg-mode . merlin-mode)
    (tuareg-mode . lsp))
#+END_SRC

**** Dune

#+NAME: ocaml/dune
#+BEGIN_SRC emacs-lisp
(use-package dune
  :straight
  (dune
   :host github
   :type git
   :repo "ocaml/dune"
   :files ("editor-integration/emacs/dune"
           "editor-integration/emacs/dune.el"
           "editor-integration/emacs/dune-flymake.el"))
  :mode
  ("dune\\'" . dune-mode)
  ("dune-project\\'" . dune-mode)

  :ensure-system-package
  (dune . "opam install dune")
  :init

  (with-eval-after-load 'projectile
    (projectile-register-project-type 'dune
                                      '("dune-project")
                                      :compile "dune build"
                                      :test "dune runtest"
                                      :run "dune exec"))

  :hook
  (dune-mode . enable-paredit-mode))
#+END_SRC

**** Reason Mode

#+NAME: ocaml/reason
#+BEGIN_SRC emacs-lisp
(use-package reason-mode
  :hook
  (reason . merlin-mode))
#+END_SRC

*** Scala
**** Scala Mode

#+NAME: scala/mode
#+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :interpreter
  ("scala" . scala-mode))
#+END_SRC

**** Sbt

#+NAME: scala/sbt
#+BEGIN_SRC emacs-lisp
(use-package sbt-mode)
#+END_SRC

*** Shell script mode

#+BEGIN_SRC emacs-lisp
(use-package sh-mode
  :straight nil
  :custom
  (sh-indentation 2)
  :init
  (defun sh-mode/disable-org-link ()
    (org-link-minor-mode -1))
  :hook
  (sh-mode  . sh-mode/disable-org-link))

#+END_SRC

*** Web
**** web mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :bind
    (:map web-mode-map
          ("M-n" . web-mode-tag-match))
    :mode
    (("\\.phtml\\'"      . web-mode)
     ("\\.tpl\\.php\\'"  . web-mode)
     ("\\.twig\\'"       . web-mode)
     ("\\.html\\'"       . web-mode)
     ("\\.htm\\'"        . web-mode)
     ("\\.[gj]sp\\'"     . web-mode)
     ("\\.as[cp]x?\\'"   . web-mode)
     ("\\.eex\\'"        . web-mode)
     ("\\.erb\\'"        . web-mode)
     ("\\.mustache\\'"   . web-mode)
     ("\\.handlebars\\'" . web-mode)
     ("\\.hbs\\'"        . web-mode)
     ("\\.eco\\'"        . web-mode)
     ("\\.ejs\\'"        . web-mode)
     ("\\.djhtml\\'"     . web-mode)
     ("\\.tsx\\'"        . web-mode))

    :custom
    (web-mode-engines-alist
     '(("php" . "\\.phtml\\'")
       ("blade" . "\\.blade\\'")))
    (web-mode-enable-auto-pairing t)
    (web-mode-enable-css-colorization t)
    (web-mode-enable-block-face t)
    (web-mode-enable-part-face t)
    (web-mode-enable-comment-keywords t)
    (web-mode-enable-heredoc-fontification t)
    (web-mode-enable-current-element-highlight t)
    (web-mode-enable-current-column-highlight t)
    (web-mode-markup-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-style-padding 1)
    (web-mode-script-padding 1)
    (web-mode-block-padding 0)
    (web-mode-comment-style 2)

    :config

    (defun web/tsx ()
      "Enable tide-mode in Typescript tsx buffers."
      (when (string-equal "tsx" (file-name-extension buffer-file-name))
        (when (fboundp 'tide/setup)
          (tide/setup))
        (when (fboundp 'flycheck-add-mode)
          (flycheck-add-mode 'typescript-tslint 'web-mode))))

    (defun web/docsets ()
      "Set Dash docsets for `web-mode'"
      (when (eq system-type 'darwin)
        (setq-local dash-plugin-keywords
                    '("css" "html" "javascript" "react"))))
    :hook
    (web-mode . web/tsx)
    (web-mode . web/docsets))
#+END_SRC

**** HTML

***** HTML mode

#+NAME: html/mode
#+BEGIN_SRC emacs-lisp
(use-package html-mode
  :straight nil
  :hook
  (html-mode . lsp))

#+END_SRC

***** Tag Edit

#+NAME: html/tagedit
#+BEGIN_SRC emacs-lisp
  (use-package tagedit
    :init
    (defun tagedit/enable ()
      "Enable `tagedit-mode'"
      (tagedit-add-experimental-features)
      (tagedit-mode +1))

    :hook
    (html-mode . tagedit/enable))
#+END_SRC

***** Auto rename tag

#+BEGIN_SRC emacs-lisp
(use-package auto-rename-tag)
#+END_SRC



***** Htmlize

#+NAME: html/lize
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC

**** CSS
***** css mode

#+NAME: css/mode
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :custom (css-indent-offset 2)
  :hook
  (css-mode . lsp))
#+END_SRC

***** Less

#+NAME: css/less
#+BEGIN_SRC emacs-lisp
(use-package less-mode
  :mode "\\.less\\'"
  :hook
  (less-mode . lsp))
#+END_SRC

***** sass mode

#+NAME: css/sass
#+BEGIN_SRC emacs-lisp
(use-package sass-mode
  :mode "\\.sass\\'"
  :hook
  (sass-mode . lsp))
#+END_SRC

***** scss mode

#+NAME: css/scss
#+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :mode "\\.scss\\'"
  :hook
  (scss-mode . lsp))
#+END_SRC

**** Nginx

#+NAME: web/nginx
#+BEGIN_SRC emacs-lisp
(use-package nginx-mode
    :mode ("/nginx/sites-\\(?:available|enabled\\)/" . nginx-mode))
#+END_SRC

**** Emmet

#+NAME: web/emmet
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :hook
  ((css-mode html-mode web-mode) . emmet-mode))
#+END_SRC

*** Markdown
**** markdown mode

- See https://jblevins.org/projects/markdown-mode/

#+NAME: md/mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :preface
    (defun markdown-open-preview ()
      "Use Marked 2 to preview the current file"
      (interactive)
      (let ((app-list (mapcar #'car (counsel-osx-app-list))))
        (if (member "Marked" app-list)
            (shell-command
             (format
              "open -a 'Marked' %s"
              (shell-quote-argument (buffer-file-name)))))))

      :custom
      (markdown-command "multimarkdown")
      (markdown-open-command #'markdown-open-preview)
      :mode
      (("README\\.md\\'" . gfm-mode)
       ("\\.md\\'" . markdown-mode)
       ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

**** markdown-mode+

#+NAME: md/plus
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode+)
#+END_SRC

**** markdown toc

#+NAME: md/toc
#+BEGIN_SRC emacs-lisp
(use-package markdown-toc)
#+END_SRC

**** markdownfmt

#+NAME: md/fmt
#+BEGIN_SRC emacs-lisp
(use-package markdownfmt
  :bind (:map markdown-mode-map
	      ("C-c C-f" . markdown-format-buffer))
  :hook
  (markdown-mode . markdownfmt-enable-on-save))
#+END_SRC

**** Livedown

#+NAME: md/livedown
#+BEGIN_SRC emacs-lisp
  (use-package livedown
      :straight (livedown
                 :type git
                 :host github
                 :repo "shime/emacs-livedown")
      :custom (livedown-open nil)
      :init

      (when (featurep 'xwidget-internal)
        (unless (featurep 'xwidget)
          (require 'xwidget))

        (defadvice livedown-preview (after livedown-preview-after activate)
          (xwidget-webkit-browse-url "http://localhost:1337"))))
#+END_SRC

*** Applescript


#+BEGIN_SRC emacs-lisp
(use-package apples-mode
  :mode "\\.applescript\\'")
#+END_SRC

*** Racket

#+NAME: lang/racket
#+BEGIN_SRC emacs-lisp
(use-package racket-mode
  :hook
  (racket . paredit-mode))
#+END_SRC

*** Yaml

#+NAME: lang/yaml
#+BEGIN_SRC emacs-lisp

(use-package yaml-mode
    :mode (("\\.yml\\'" . yaml-mode)
           (".clang-tidy\\'" . yaml-mode)))

#+END_SRC

* Misc
** Scimax

#+NAME: research/scimax
#+BEGIN_SRC emacs-lisp
(use-package scimax
  :straight nil
  :if (file-directory-p (emacs-etc-dir "local" "scimax"))
  :custom
  (scimax-dir (emacs-etc-dir "local" "scimax"))
  (scimax-snippet-dir (car yas-snippet-dirs))
  :load-path "etc/local/scimax"
  :init
  (setq ore-user-directory (emacs-etc-dir "ore"))
  (require 'scimax-ivy)
  (require 'scimax-latex)
  (require 'scimax-utils)
  (require 'scimax-yas)
  (require 'scimax-link-thumbnails)
  (require 'ore)
  (require 'ox-word))

;; copied from scimax
;; * Fragment overlays
(defun org-latex-fragment-tooltip (beg end image imagetype)
  "Add the fragment tooltip to the overlay and set click function to toggle it."
  (overlay-put (ov-at) 'help-echo
	       (concat (buffer-substring beg end)
		       "\nmouse-1 to toggle."))
  (overlay-put (ov-at) 'local-map (let ((map (make-sparse-keymap)))
				    (define-key map [mouse-1]
				      `(lambda ()
					 (interactive)
					 (org-remove-latex-fragment-image-overlays ,beg ,end)))
				    map)))

(advice-add 'org--format-latex-make-overlay :after 'org-latex-fragment-tooltip)

(defun org-latex-fragment-justify (justification)
  "Justify the latex fragment at point with JUSTIFICATION.
JUSTIFICATION is a symbol for 'left, 'center or 'right."
  (interactive
   (list (intern-soft
          (completing-read "Justification (left): " '(left center right)
                           nil 'require-match))))

  (let* ((ov (ov-at))
	 (beg (ov-beg ov))
	 (end (ov-end ov))
	 (shift (- beg (line-beginning-position)))
	 (img (overlay-get ov 'display))
	 (img (and (and img (consp img) (eq (car img) 'image)
			(image-type-available-p (plist-get (cdr img) :type)))
		   img))
	 space-left offset)
    (when (and img (= beg (line-beginning-position)))
      (setq space-left (- (window-max-chars-per-line) (car (image-display-size img)))
	    offset (floor (cond
			   ((eq justification 'center)
			    (- (/ space-left 2) shift))
			   ((eq justification 'right)
			    (- space-left shift))
			   (t
			    0))))
      (when (>= offset 0)
	(overlay-put ov 'before-string (make-string offset ?\ ))))))

(defun org-latex-fragment-justify-advice (beg end image imagetype)
  "After advice function to justify fragments."
  (org-latex-fragment-justify (or (plist-get org-format-latex-options :justify) 'left)))

(advice-add 'org--format-latex-make-overlay :after 'org-latex-fragment-justify-advice)

;; ** numbering latex equations
(defun org-renumber-environment (orig-func &rest args)
  "A function to inject numbers in LaTeX fragment previews."
  (let ((results '())
	(counter -1)
	(numberp))

    (setq results (loop for (begin .  env) in
			(org-element-map (org-element-parse-buffer) 'latex-environment
			  (lambda (env)
			    (cons
			     (org-element-property :begin env)
			     (org-element-property :value env))))
			collect
			(cond
			 ((and (string-match "\\\\begin{equation}" env)
			       (not (string-match "\\\\tag{" env)))
			  (incf counter)
			  (cons begin counter))
			 ((string-match "\\\\begin{align}" env)
			  (prog2
			      (incf counter)
			      (cons begin counter)
			    (with-temp-buffer
			      (insert env)
			      (goto-char (point-min))
			      ;; \\ is used for a new line. Each one leads to a number
			      (incf counter (count-matches "\\\\$"))
			      ;; unless there are nonumbers.
			      (goto-char (point-min))
			      (decf counter (count-matches "\\nonumber")))))
			 (t
			  (cons begin nil)))))

    (when (setq numberp (cdr (assoc (point) results)))
      (setf (car args)
	    (concat
	     (format "\\setcounter{equation}{%s}\n" numberp)
	     (car args)))))

  (apply orig-func args))

(advice-add 'org-create-formula-image :around #'org-renumber-environment)


;; * Markup commands for org-mode
(loop for (type beginning-marker end-marker)
      in '((subscript "_{" "}")
	   (superscript "^{" "}")
	   (italics "/" "/")
	   (bold "*" "*")
	   (verbatim "=" "=")
	   (code "~" "~")
	   (underline "_" "_")
	   (strikethrough "+" "+"))
      do
      (eval `(defun ,(intern (format "org-%s-region-or-point" type)) ()
	       ,(format "%s the region, word or character at point"
			(upcase (symbol-name type)))
	       (interactive)
	       (cond
		;; We have an active region we want to apply
		((region-active-p)
		 (let* ((bounds (list (region-beginning) (region-end)))
			(start (apply 'min bounds))
			(end (apply 'max bounds))
			(lines))
		   (unless (memq ',type '(subscript superscript))
		     (save-excursion
		       (goto-char start)
		       (unless (looking-at " \\|\\<")
			 (backward-word)
			 (setq start (point)))
		       (goto-char end)
		       (unless (looking-at " \\|\>")
			 (forward-word)
			 (setq end (point)))))
		   (setq lines
			 (s-join "\n" (mapcar
				       (lambda (s)
					 (if (not (string= (s-trim s) ""))
					     (concat ,beginning-marker
						     (s-trim s)
						     ,end-marker)
					   s))
				       (split-string
					(buffer-substring start end) "\n"))))
		   (setf (buffer-substring start end) lines)
		   (forward-char (length lines))))
		;; We are on a word with no region selected
		((thing-at-point 'word)
		 (cond
		  ;; beginning of a word
		  ((looking-back " " 1)
		   (insert ,beginning-marker)
		   (re-search-forward "\\>")
		   (insert ,end-marker))
		  ;; end of a word
		  ((looking-back "\\>" 1)
		   (insert ,(concat beginning-marker end-marker))
		   (backward-char ,(length end-marker)))
		  ;; not at start or end, so we just sub/sup the character at point
		  ((memq ',type '(subscript superscript))
		   (insert ,beginning-marker)
		   (forward-char ,(- (length beginning-marker) 1))
		   (insert ,end-marker))
		  ;; somewhere else in a word, and handled sub/sup. mark up the
		  ;; whole word.
		  (t
		   (re-search-backward "\\<")
		   (insert ,beginning-marker)
		   (re-search-forward "\\>")
		   (insert ,end-marker))))
		;; not at a word or region, insert markers and put point between
		;; them.
		(t
		 (insert ,(concat beginning-marker end-marker))
		 (backward-char ,(length end-marker)))))))

(defun org-latex-math-region-or-point (&optional arg)
  "Wrap the selected region in latex math markup.
\(\) or $$ (with prefix ARG) or @@latex:@@ with double prefix.
Or insert those and put point in the middle to add an equation."
  (interactive "P")
  (let ((chars
	 (cond
	  ((null arg)
	   '("\\(" . "\\)"))
	  ((equal arg '(4))
	   '("$" . "$"))
	  ((equal arg '(16))
	   '("@@latex:" . "@@")))))
    (if (region-active-p)
	(progn
	  (goto-char (region-end))
	  (insert (cdr chars))
	  (goto-char (region-beginning))
	  (insert (car chars)))
      (insert (concat  (car chars) (cdr chars)))
      (backward-char (length (cdr chars))))))
#+END_SRC

* Footnotes

[fn:1] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html#Library-Headers][Emacs Manual - D.8 Conventional Headers for Emacs Libraries]]

[fn:2]  "Next-generation, purely functional package manager for the
Emacs hacker."

[fn:3] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/General-Variables.html#General-Variables][Emacs Manual - C.4.1 General Variables]]

[fn:4] In lisp, global variables are called /top-level defintions/. By
convention, globals are wrapped in a pair of asterisks called
/earmuffs/. Earmuffs are completely optional -- they have no effect on
how the program is compiled -- its a best practice in all of the many
dialects of Lisp.

[fn:5] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Conditionals.html][Emacs Manual - 10.2 Conditionals]]

[fn:9] [[https://www.emacswiki.org/emacs/EmacsForMacOS][Emacs Wiki - Emacs For MacOS]]

[fn:6] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][Emacs Manual - 51.1.4 Saving Customizations]]

[fn:7] [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Mastering Emacs - Keeping Secrets in Emacs GnuPG Auth Sources]]

[fn:8] [[https://www.quora.com/Is-Windows-POSIX-compliant][Quora - Is Windows POSIX compliant?]]

[fn:10] http://www.jonathanleroux.org/bibtex-mode.html

[fn:11] http://mbork.pl/2018-04-28_org-mru-clock

[fn:12] [[https://matt.hackinghistory.ca/2015/11/11/note-taking-with-pdf-tools/][Note taking with pdf-tools]]

[fn:14] [[https://github.com/d12frosted/homebrew-emacs-plus][d12frosted/homebrew-emacs-plus]]

[fn:13] [[https://www.emacswiki.org/emacs/NeoTree][Emacs Wiki - NeoTree]]

[fn:15] [[https://www.emacswiki.org/emacs/WindowResize][Emacs Wiki - Window Resize]]

[fn:16] https://www.emacswiki.org/emacs/BookMarks#toc7

[fn:17] https://joelkuiper.eu/spellcheck_emacs

[fn:18] [[http://ergoemacs.org/emacs/dictionary_lookup.html][Ergo Emacs - Dictionary Lookup]]
